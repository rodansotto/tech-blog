<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="https://rodansotto.github.io/tech-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://rodansotto.github.io/tech-blog/" rel="alternate" type="text/html" /><updated>2023-01-30T18:14:55+00:00</updated><id>https://rodansotto.github.io/tech-blog/feed.xml</id><title type="html">Rodan Sotto’s Tech Blog</title><subtitle>A software developer's personal notes</subtitle><entry><title type="html">Key Points To Architecturing Cloud Applications, Part 4: Reliability</title><link href="https://rodansotto.github.io/tech-blog/2023/01/30/key-points-to-arch-cloud-app-reliab.html" rel="alternate" type="text/html" title="Key Points To Architecturing Cloud Applications, Part 4: Reliability" /><published>2023-01-30T00:00:00+00:00</published><updated>2023-01-30T00:00:00+00:00</updated><id>https://rodansotto.github.io/tech-blog/2023/01/30/key-points-to-arch-cloud-app-reliab</id><content type="html" xml:base="https://rodansotto.github.io/tech-blog/2023/01/30/key-points-to-arch-cloud-app-reliab.html">&lt;p&gt;&lt;img src=&quot;/tech-blog/assets/images/cloud-reliab.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These are key points from the course I took recently on &lt;a href=&quot;https://learn.microsoft.com/en-us/training/paths/azure-well-architected-framework/&quot;&gt;Build great solutions with the Microsoft Azure Well-Architected Framework&lt;/a&gt;.  I think these points are applicable no matter which cloud provider you use.  This will be a 5-part series on cost, operations, performance, reliability and security considerations in architecturing cloud applications.&lt;/p&gt;

&lt;p&gt;Here are the links to the other parts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/tech-blog/2022/12/14/key-points-to-arch-cloud-app-cost.html&quot;&gt;Part 1: Cost&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/tech-blog/2022/12/16/key-points-to-arch-cloud-app-ops.html&quot;&gt;Part 2: Operations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/tech-blog/2023/01/16/key-points-to-arch-cloud-app-perf.html&quot;&gt;Part 3: Performance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is Part 4: Reliability&lt;/strong&gt; and below are the key points to ensure a highly available cloud architecture.&lt;/p&gt;

&lt;h2 id=&quot;build-a-highly-available-architecture&quot;&gt;Build a highly available architecture&lt;/h2&gt;

&lt;p&gt;High availability (HA) ensures your architecture can handle failures.  This availability is often defined by business requirements, service-level objectives, or service-level agreements.&lt;/p&gt;

&lt;h3 id=&quot;evaluate-high-availability-for-your-architecture&quot;&gt;Evaluate high availability for your architecture&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Determine the service-level agreement of your application&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;A service-level agreement (SLA) is an agreement between a service provider and a service consumer, in which the service provider commits to a standard of service based on measurable metrics and defined responsibilities&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Service-level objectives (SLO) are the values of target metrics that are used to measure performance, reliability, or availability, e.g.:&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;Performance of request processing in milliseconds&lt;/li&gt;
          &lt;li&gt;Availability of services in minutes per month&lt;/li&gt;
          &lt;li&gt;Number of requests processed per hour&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Identifying SLAs is an important first step when determining the high-availability capabilities that your architecture will require as these will help shape the methods you’ll use to make your application highly available&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Evaluate the HA capabilities of the application&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Perform failure analysis&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Focus on single points of failure and critical component&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Evaluate all components including those that provide HA functionalities such as load balancers&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Determine application’s capability to detect error conditions and to self-heal&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Evaluate the HA capabilities of dependent applications&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;You’ll also need to understand the provided SLAs of any resource on which your application may depend&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Dependencies with SLA lower than yours could put you at risk&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Find ways to meet your SLA while the dependency is unavailable, such as caches and queues&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;high-availability-cloud-services&quot;&gt;High availability cloud services&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Availability sets&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Allows VMs that belong to the same application workload to be distributed to prevent simultaneous impact from hardware failure and scheduled maintenance&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Made up of update domains and fault domains&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;With update domains, you have some servers/VMs (not all) on one rack that remains running during maintenance&lt;/li&gt;
          &lt;li&gt;With fault domains, you have more than 1 rack available such that an outage in one rack will not affect the other racks&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Availability zones&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;With availability zones, you have more than 1 physical datacenter location within a region available for you so you can protect yourself from datacenter outages while retaining presence in a particular region&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Mutually exclusive with availability sets as you no longer need to define an availability set for your systems&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;You’ll have diversity at the data-center level, and updates will never be performed to multiple availability zones at the same time&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Load balancing&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Load balancers manage how network traffic is distributed across an application&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;For applications that don’t have service discovery built in, load balancing is required for both availability sets and availability zones&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Types of load balancing:&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;DNS load balancing
            &lt;ul&gt;
              &lt;li&gt;Directs users to multiple IP addresses (server machines) for a single domain&lt;/li&gt;
              &lt;li&gt;DNS returns a list of all the servers’ IP addresses in response to a name resolution request&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;Layer 7 (Application layer) load balancing, such as an application gateway
            &lt;ul&gt;
              &lt;li&gt;Provides distribution (e.g. round-robin) of incoming traffic, cookie-based session affinity, URL path-based routing&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;Layer 4 (Transport layer) load balancing
            &lt;ul&gt;
              &lt;li&gt;Provides distribution at the transport layer by using only the TCP and HTTP health-probing options&lt;/li&gt;
              &lt;li&gt;No smart load balancing because the load balancer can’t access request content&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Platform as a service (PaaS) HA capabilities&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Usually comes with high availability built in&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Using PaaS services is one of the best ways to ensure that your architecture is highly available&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;develop-a-disaster-recovery-strategy&quot;&gt;Develop a disaster recovery strategy&lt;/h2&gt;

&lt;p&gt;Disaster recovery is about recovering from high-impact events that result in downtime and data loss.  And the best remedy for a disaster once it has occurred is a well-defined, tested disaster recovery plan and an application that actively supports disaster recovery efforts through its design.&lt;/p&gt;

&lt;h3 id=&quot;create-a-disaster-recovery-plan&quot;&gt;Create a disaster recovery plan&lt;/h3&gt;

&lt;p&gt;A disaster recovery plan is a single document that details the procedures that are required to recover from data loss and downtime caused by a disaster and identifies who’s in charge of directing those procedures.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Risk assessment and process inventory&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;The first step in creating a disaster recovery plan is performing a risk analysis that examines the impact of different kinds of disasters on the application&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;The risk assessment needs to consider every process that can’t afford unlimited downtime, and every category of data that can’t afford unlimited loss&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Recovery objectives&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;A complete plan needs to specify two critical business requirements for each process implemented by the application:&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Recovery Point Objective (RPO)&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;The maximum duration of acceptable data loss&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;Measured in units of time, not volume: “30 minutes of data”, “four hours of data”, and so on&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;Is about limiting and recovering from data loss&lt;/p&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Recovery Time Objective (RTO)&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;The maximum duration of acceptable downtime&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Each major process or workload that’s implemented by an app should have separate RPO and RTO values&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;The process of specifying an RPO and RTO is effectively the creation of disaster recovery requirements for your application&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Detailing recovery steps&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;The final plan should go into detail about exactly what steps should be taken to restore lost data and application connectivity. Steps often include information about:&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Backups: How often they’re created, where they’re located, and how to restore data from them&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Data replicas: The number and locations of replicas, the nature and consistency characteristics of the replicated data, and how to switch over to a different replica&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Deployments: How deployments are executed, how rollbacks occur, and failure scenarios for deployments&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Infrastructure: On-premises and cloud resources, network infrastructure, and hardware inventory&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Dependencies: External services that are used by the application, including SLAs and contact information&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Configuration and notification: Flags or options that can be set to gracefully degrade the application, and services that are used to notify users of application impact&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;design-for-disaster-recovery&quot;&gt;Design for disaster recovery&lt;/h3&gt;

&lt;p&gt;Disaster recovery is not an automatic feature. It must be designed, built, and tested.  Designing for disaster recovery has two main concerns:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Data recovery and replication&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Unlike backup, which creates long-lived, read-only snapshots of data for use in recovery, replication creates real-time or near-real-time copies of live data&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Replication is used to mitigate a failed or unreachable data store by executing a failover: changing application configuration to route data requests to a working replica&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Most fully featured database systems and other data-storage products and services include some kind of replication as a tightly integrated feature due to its functional and performance requirements&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Many different replication designs exist that place different priorities on data consistency, performance, and cost:&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Active replication requires updates to take place on multiple replicas simultaneously, guaranteeing consistency at the cost of throughput&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Passive replication performs synchronization in the background, removing replication as a constraint on application performance, but increasing RPO&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Active-active or multi-master replication enables multiple replicas to be used simultaneously, enabling load balancing at the cost of complicating data consistency&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Active-passive replication reserves replicas for live use only during failover&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Process recovery&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;After a disaster, business data isn’t the only asset that needs recovering&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Process restoration involves failover to a separate, working deployment of your application&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;test-a-disaster-recovery-plan&quot;&gt;Test a disaster recovery plan&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Testing the plan is a crucial aspect of disaster recovery to ensure that the directions and explanations are clear and up to date&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choose intervals to perform different types and scopes of tests, such as testing backups and failover mechanisms every month, and performing a full-scale disaster recovery simulation every six months&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure to include your monitoring system in your testing as well&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;protect-your-data-with-backup-and-restore&quot;&gt;Protect your data with backup and restore&lt;/h2&gt;

&lt;p&gt;Backup is the final and most powerful line of defense against permanent data loss.&lt;/p&gt;

&lt;h3 id=&quot;establish-backup-and-restoration-requirements&quot;&gt;Establish backup and restoration requirements&lt;/h3&gt;

&lt;p&gt;To establish backup requirements for your app, group your application’s data based on the following requirements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;How much of this type of data can afford to be lost, measured in duration&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The maximum amount of time a restore of this type of data should require&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Backup retention requirements: how long and at what frequency do backups need to remain available&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Don’t confuse archival as archival is the storage of data for long-term preservation and read access&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cloud-backup-and-restore-capabilities&quot;&gt;Cloud backup and restore capabilities&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;General-purpose backup solution for cloud and on-premises workflows that run on VMs or physical servers&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Blob storage backup&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Automatic database backup&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;App service scheduled and manual backup&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;verify-backups-and-test-restore-procedures&quot;&gt;Verify backups and test restore procedures&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;By creating a new deployment of the application, restoring the backup to it, and comparing the state of the two instances&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Simply performing a comparison of a subset of the backup data with the live data immediately after creating a backup can be enough&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="cloud" /><summary type="html"></summary></entry><entry><title type="html">Key Points To Architecturing Cloud Applications, Part 3: Performance</title><link href="https://rodansotto.github.io/tech-blog/2023/01/16/key-points-to-arch-cloud-app-perf.html" rel="alternate" type="text/html" title="Key Points To Architecturing Cloud Applications, Part 3: Performance" /><published>2023-01-16T00:00:00+00:00</published><updated>2023-01-16T00:00:00+00:00</updated><id>https://rodansotto.github.io/tech-blog/2023/01/16/key-points-to-arch-cloud-app-perf</id><content type="html" xml:base="https://rodansotto.github.io/tech-blog/2023/01/16/key-points-to-arch-cloud-app-perf.html">&lt;p&gt;&lt;img src=&quot;/tech-blog/assets/images/cloud-perf.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These are key points from the course I took recently on &lt;a href=&quot;https://learn.microsoft.com/en-us/training/paths/azure-well-architected-framework/&quot;&gt;Build great solutions with the Microsoft Azure Well-Architected Framework&lt;/a&gt;.  I think these points are applicable no matter which cloud provider you use.  This will be a 5-part series on cost, operations, performance, reliability and security considerations in architecturing cloud applications.&lt;/p&gt;

&lt;p&gt;Here are the links to the other parts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/tech-blog/2022/12/14/key-points-to-arch-cloud-app-cost.html&quot;&gt;Part 1: Cost&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/tech-blog/2022/12/16/key-points-to-arch-cloud-app-ops.html&quot;&gt;Part 2: Operations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/tech-blog/2023/01/30/key-points-to-arch-cloud-app-reliab.html&quot;&gt;Part 4: Reliability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is Part 3: Performance&lt;/strong&gt; and below are the key points to ensure your cloud architecture is performing at its best thus providing users with the best experience.&lt;/p&gt;

&lt;h2 id=&quot;use-scaling-up-and-scaling-out-in-your-architecture&quot;&gt;Use scaling up and scaling out in your architecture&lt;/h2&gt;

&lt;p&gt;Scaling resources allows your application to meet demands in times of increased load and provides you cost savings during off peak times.  Scaling in the cloud is usually easier than scaling on-premises and this is one of those main reasons of moving into the cloud.&lt;/p&gt;

&lt;h3 id=&quot;scaling-up-or-down&quot;&gt;Scaling up or down&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;When scaling resources for a single instance of a service, such as a virtual machine, you scale up or down&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You increase or decrease the number of resources in a service, such as the cpu capacity, memory capacity, or storage capacity&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Example of a cloud service that can be scaled up or down would be a virtual machine, a database service (to increase/decrease database transaction units for example), or an application service.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scaling-out-or-in&quot;&gt;Scaling out or in&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;With scaling out and in, the number of instances are adjusted&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the infrastructure layer, you can increase and decrease the number of VM instances&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In a database, you can employ a sharding technique that splits a large database into multiple smaller database and deployed across multiple servers&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In an application service, if setup in an application farm, you can increase and decrease the number of VMs in the farm.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;autoscaling&quot;&gt;Autoscaling&lt;/h3&gt;

&lt;p&gt;If available, autoscaling allows you to scale your services automatically based on specific metrics like CPU utilization or queue length or schedule.&lt;/p&gt;

&lt;h3 id=&quot;considerations-when-scaling&quot;&gt;Considerations when scaling&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Startup time of your application can impact how quickly your application can scale&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;You might want to add a lead time when scaling&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;How your application handles state&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;If an instance is removed the state stored there is lost&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;If an instance is added the state from another instance does not have its state&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Best to externalize the state to another service such as Redis or a database&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;throttling&quot;&gt;Throttling&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Sometimes the load on an application is caused by the number of active or concurrent users and the activities being performed&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Throttling limits the number of requests from a source and this is one way to prevent the application from breaking&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Used most frequently in applications that expose API endpoints&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;serverless&quot;&gt;Serverless&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Serverless computing provides a cloud-hosted execution environment that runs your apps/code, but completely abstracts the underlying environment&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You configure your serverless apps to respond to events&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Infrastructure isn’t your responsibility&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Scaling and performance are handled automatically&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Example of serverless computing is the Azure Functions/AWS Lambda/GCP Cloud Functions&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;containers&quot;&gt;Containers&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A container is a method of running applications in a virtualized environment at the OS level&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Containers are lightweight and well suited to scale-out scenarios&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;They’re designed to be created, scaled out, and stopped dynamically as your environment and demands change&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;With containers, you don’t necessarily need to separate VMs for separate workloads&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Some services that ease the management and scaling of containers&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Kubernetes Service&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Cloud specific container management service&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;optimize-network-performance&quot;&gt;Optimize network performance&lt;/h2&gt;

&lt;h3 id=&quot;network-latency&quot;&gt;Network latency&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Network latency is the time that it takes for data to travel between a source to a destination across a network&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To improve network performance, we must strive to reduce network latency&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;latency-between-cloud-resources&quot;&gt;Latency between cloud resources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Create read-replica of databases in different regions&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sync your data between regions&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use a globally distributed database&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use a caching technology such as Redis&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;latency-between-users-and-cloud-resources&quot;&gt;Latency between users and cloud resources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Use a DNS load balancer for endpoint path optimization&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Can distribute traffic within and across regions&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Can route users based on a set of criteria:&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;Priority&lt;/li&gt;
          &lt;li&gt;Weighted&lt;/li&gt;
          &lt;li&gt;Performance (based on network latency)&lt;/li&gt;
          &lt;li&gt;Geographic&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Use a CDN to cache content close to users&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Using a content delivery network (CDN) can deliver static content such as website pages or image and video assets to users faster&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;You can use CDN to host cached dynamic content but you will need to manage content expiration by setting a time to live (TTL)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use a connectivity service from on-premises to cloud provider&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Optimizing network connectivity from your on-premises environment to cloud is also important&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Internet connection or even site-to-site VPN over the internet might have an impact on network latency for high-throughput architecture&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;A private dedicated connection between your network and the cloud can give a guaranteed performance&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;optimize-storage-performance&quot;&gt;Optimize storage performance&lt;/h2&gt;

&lt;h3 id=&quot;optimize-virtual-machine-storage-performance&quot;&gt;Optimize virtual machine storage performance&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Some disk options that your cloud provider might provide:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Local SSD storage that is included in VM and is local, thus has a high performance but could be lost during maintenance event or a redeployment of the VM&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Standard storage HDD that is only HDD and only good for dev/test workload&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Standard storage SSD that has a low latency of an SSD but only good enough for non production use&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Premium storage SSD that is well suited for those workloads that are going into production&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Another way to optimize storage performance is to use a striping technology that spreads disk activity across multiple disks; often seen in high-performance database systems&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;optimize-storage-performance-for-your-application&quot;&gt;Optimize storage performance for your application&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Caching&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Integrate a caching layer between your application and your data store&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Polyglot persistence&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Use different data storage technologies such as blob store for your application assets, NoSQL store for user related or created data, and a SQL database for your account data (for example)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;With polyglot persistence, maintaining data consistency can be a significant challenge&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;A more relaxed approach to consistency is used and is known as eventual consistency&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Eventual consistency means that replica data stores eventually converge if there are no further writes&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;identify-performance-bottlenecks-in-your-application&quot;&gt;Identify performance bottlenecks in your application&lt;/h2&gt;

&lt;h3 id=&quot;performance-requirements&quot;&gt;Performance requirements&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Without performance requirements defined, you could keep improving further and further without end to the point that it becomes prohibitively expensive, difficult, and doesn’t have enough business impact to be worthwhile&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Nonfunctional requirements help you find that point; doesn’t tell you what your app must do but tell you what quality levels it must meet&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You should discuss requirements with your stakeholders or customers, document them, and communicate them broadly to ensure that everyone agrees on what good performance means&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;performance-monitoring-options-in-the-cloud&quot;&gt;Performance monitoring options in the cloud&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Infrastructure-level logging and monitoring service that can collect following data:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Application monitoring data, which is the data about the performance and functionality of the code you’ve written&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Guest OS monitoring data&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Resource monitoring data, which is the data about the operation of a cloud resource&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Subscription monitoring data (if available)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Tenant monitoring data (if available)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Log analytics tool&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Centralized logging&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;You can query and aggregate data across logs&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Application performance management&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Using an APM solution to gain a deep understanding of your application and to correlate activity across your application&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="cloud" /><summary type="html"></summary></entry><entry><title type="html">Key Points To Architecturing Cloud Applications, Part 2: Operations</title><link href="https://rodansotto.github.io/tech-blog/2022/12/16/key-points-to-arch-cloud-app-ops.html" rel="alternate" type="text/html" title="Key Points To Architecturing Cloud Applications, Part 2: Operations" /><published>2022-12-16T00:00:00+00:00</published><updated>2022-12-16T00:00:00+00:00</updated><id>https://rodansotto.github.io/tech-blog/2022/12/16/key-points-to-arch-cloud-app-ops</id><content type="html" xml:base="https://rodansotto.github.io/tech-blog/2022/12/16/key-points-to-arch-cloud-app-ops.html">&lt;p&gt;&lt;img src=&quot;/tech-blog/assets/images/cloud-ops.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These are key points from the course I took recently on &lt;a href=&quot;https://learn.microsoft.com/en-us/training/paths/azure-well-architected-framework/&quot;&gt;Build great solutions with the Microsoft Azure Well-Architected Framework&lt;/a&gt;.  I think these points are applicable no matter which cloud provider you use.  This will be a 5-part series on cost, operations, performance, reliability and security considerations in architecturing cloud applications.&lt;/p&gt;

&lt;p&gt;Here are the links to the other parts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/tech-blog/2022/12/14/key-points-to-arch-cloud-app-cost.html&quot;&gt;Part 1: Cost&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/tech-blog/2023/01/16/key-points-to-arch-cloud-app-perf.html&quot;&gt;Part 3: Performance&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/tech-blog/2023/01/30/key-points-to-arch-cloud-app-reliab.html&quot;&gt;Part 4: Reliability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is Part 2: Operations&lt;/strong&gt; and below are the key points to ensure smooth operations for your cloud architecture.&lt;/p&gt;

&lt;h2 id=&quot;design-build-and-orchestrate-with-modern-practices&quot;&gt;Design, build, and orchestrate with modern practices&lt;/h2&gt;

&lt;h3 id=&quot;devops&quot;&gt;DevOps&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Bring development and operation functions together and break down the existing barriers between them in the goal of providing continuous delivery of value to end users&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use modern agile tools like Kanban boards, backlogs, dashboards, and scrum boards to help your team get greater visibility into the work that’s planned and work that’s been delivered&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use a version-control platform like GitHub that allows a global community of individuals and teams to collaborate on software-development projects&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Be able to build and test deployments, track issues, and create custom workflows in repositories, like in Github&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;continuous-integration-and-continuous-delivery-cicd&quot;&gt;Continuous Integration and Continuous Delivery (CI/CD)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Continuous Integration (CI) is the practice of building and testing code every time a team member commits changes to version control&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CI helps developers to identify bugs earlier, and it improves software quality since code is checked in, built, and verified more frequently&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Continuous Delivery (CD) is the process to build, test, configure and deploy from a build environment to a production environment&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Continuous integration and continuous delivery are often combined into a single pipeline known as CI/CD&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CI/CD moves code from development to testing to production and should be automated&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use tools like GitHub Actions to build workflows that are custom automated processes to build, test, package, release, and deploy code&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;microservices&quot;&gt;Microservices&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Employing microservices architecture that consists of services that are small, independent, and loosely coupled&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can deploy and scale each service independently&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Because each service is independent, services can use different technology stacks, frameworks, and SDKs&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It’s common to see services rely on REST calls for service-to-service communication by using well-defined APIs&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;environment-consistency&quot;&gt;Environment consistency&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A key piece of ensuring that you can develop and deploy applications with confidence is making sure that your environments are consistent between development, test, and production&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Including your environment definitions as part of your deployment will help ensure that your code is built and deployed on a consistent, end-to-end infrastructure&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;use-monitoring-and-analytics-to-gain-operational-insights&quot;&gt;Use monitoring and analytics to gain operational insights&lt;/h2&gt;

&lt;p&gt;Monitoring is the act of collecting and analyzing data to determine the performance, health, and availability of your business applications and the resources on which they depend.&lt;/p&gt;

&lt;h3 id=&quot;activity-logging&quot;&gt;Activity logging&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Collect detailed information about what’s happening with your cloud resources, such as:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Who attached a disk to this virtual machine?&lt;/li&gt;
      &lt;li&gt;When was this machine shut down?&lt;/li&gt;
      &lt;li&gt;Who changed the load balancer configuration?&lt;/li&gt;
      &lt;li&gt;Why did the autoscale operation on my Virtual Machine Scale Set fail?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Usually retained for a set period of time but should include option to archive or send to another sink for longer retention and further analysis&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;health-of-cloud-services&quot;&gt;Health of cloud services&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Use a health tool to identify any issues with cloud core services that might affect your application&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;metrics-and-diagnostics&quot;&gt;Metrics and diagnostics&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Use diagnostics to troubleshoot issues&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use metrics to provide performance statistics for different resources, and even the operating system inside a virtual machine&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;create alerts based on these diagnostics and metrics&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;recommendations-on-best-practices&quot;&gt;Recommendations on best practices&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;If available, take advantage of a tool that provides guidance and recommendations that would result in greater availability, reduced cost, or improved security on your cloud resources&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;infrastructure-and-application-monitoring&quot;&gt;Infrastructure and application monitoring&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;When you’re designing a monitoring strategy, it’s important to include every component in the application chain so you can correlate events across services and resources&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pull log/analytics information from database server&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Configure services to send log/analytics&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install agents on VMs to send log/analytics&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Implement or install an instrumentation package into your application&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Send these data to a centralized logging/analytics tool&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;use-automation-to-reduce-effort-and-error&quot;&gt;Use automation to reduce effort and error&lt;/h2&gt;

&lt;p&gt;Using automation to manage the infrastructure ensures that each system is configured properly, with no variance between systems&lt;/p&gt;

&lt;h3 id=&quot;infrastructure-as-code&quot;&gt;Infrastructure as code&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Infrastructure as code (IaC) is the management of infrastructure (such as networks, virtual machines, load balancers, and connection topology) in a descriptive model, using a versioning system that’s similar to what’s used for source code&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;IaC is a key DevOps practice, and it’s often used in conjunction with continuous delivery&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Imperative automation&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Automating infrastructure through a scripting language or SDK usually done via command line interface (CLI) or a scripting shell&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Declarative automation&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Automating infrastructure through the use of template files, JSON-structured files being the commonly used files&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;vm-images-vs-post-deployment-configuration&quot;&gt;VM images vs. post-deployment configuration&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;For many virtual machine deployments, likely there’s additional configuration that you need to take care of before the VM can actually serve its intended purpose, e.g. installation and configuration of the actual workload&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There are two common strategies that you can use for the configuration work&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Custom images&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Working with custom images can speed up your overall deployment time, because as soon as the virtual machine is deployed and running, no additional configuration would be needed&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;But you’ll need to ensure there’s a process to handle image updates, security patches, and inventory management of the images themselves&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Post-deployment scripting&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Leverages a basic base image, then relies on scripting or a configuration-management platform to perform the necessary configuration after the VM is deployed&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;But build times can be extended that can impact how quickly you can scale your VMs&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;automation-of-operational-tasks&quot;&gt;Automation of operational tasks&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Once your solutions are up and running, there are ongoing operational activities that you can also automate, such as:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Periodically searching for orphaned disks&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Installing the latest security patches on VMs&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Searching for and shutting down virtual machines in off hours&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Running daily reports and producing a dashboard to report to senior management&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;automate-development-environments&quot;&gt;Automate development environments&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Using automation to deploy VMs with all of the correct tools and repositories that your developers need&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;testing-strategies-for-your-application&quot;&gt;Testing strategies for your application&lt;/h2&gt;

&lt;p&gt;If automation gives DevOps the required speed and agility to deploy software quickly, only through extensive testing will those deployments achieve the required reliability that customers demand.&lt;/p&gt;

&lt;p&gt;Testing should occur on both application code and infrastructure code, and they should both be subject to the same quality controls.&lt;/p&gt;

&lt;h3 id=&quot;automated-testing&quot;&gt;Automated Testing&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Unit Testing&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Unit tests are tests typically run by each new version of code that’s committed into your version-control system&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Smoke Testing&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Smoke tests are more exhaustive than unit tests, but still not as much as integration tests&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;They verify that each component can be correctly built, and each component meets your criteria for expected functionality and performance&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Integration Testing&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Integration testing determines whether your components can interact with each other as they should&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;They usually take longer than smoke testing, and consequently they’re sometimes executed less frequently&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;manual-testing&quot;&gt;Manual Testing&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Acceptance Testing&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Blue/Green deployments&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;When deploying a new application version, you can deploy it in parallel to the existing one&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Canary releases&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;In this scenario, we’re talking about releasing functionality (via feature flags), and not necessarily about deploying a new version of the application&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;A/B testing&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;Similar to canary release testing, but while canary releases focus on mitigating risk, A/B testing focuses on evaluating the effectiveness of two versions of a functionality&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Consider collecting data on how your users are using your application&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Stress tests&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Test whether your application and infrastructure code will both be able to adapt to changing load conditions&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;It’s critical that you monitor all the components of the system in order to identify whether there are any scale limitations&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Fault injection&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Introducing faults in the underlying infrastructure and observing how your application behaves is fundamental for increasing the trust in your redundancy mechanisms, making it resilient to infrastructure failures&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Can use automated frameworks for this or use a more controlled manual way&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Possibly adopt chaos engineering where you purposefully make key pieces of infrastructure unavailable&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Security tests&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Routinely test your application for security vulnerabilities&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Can include automated security scans&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Can also include red team exercises, where security teams attempt to compromise your application&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="cloud" /><summary type="html"></summary></entry><entry><title type="html">Key Points To Architecturing Cloud Applications, Part 1: Cost</title><link href="https://rodansotto.github.io/tech-blog/2022/12/14/key-points-to-arch-cloud-app-cost.html" rel="alternate" type="text/html" title="Key Points To Architecturing Cloud Applications, Part 1: Cost" /><published>2022-12-14T00:00:00+00:00</published><updated>2022-12-14T00:00:00+00:00</updated><id>https://rodansotto.github.io/tech-blog/2022/12/14/key-points-to-arch-cloud-app-cost</id><content type="html" xml:base="https://rodansotto.github.io/tech-blog/2022/12/14/key-points-to-arch-cloud-app-cost.html">&lt;p&gt;&lt;img src=&quot;/tech-blog/assets/images/cloud-cost.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These are key points from the course I took recently on &lt;a href=&quot;https://learn.microsoft.com/en-us/training/paths/azure-well-architected-framework/&quot;&gt;Build great solutions with the Microsoft Azure Well-Architected Framework&lt;/a&gt;.  I think these points are applicable no matter which cloud provider you use.  This will be a 5-part series on cost, operations, performance, reliability and security considerations on architecturing cloud applications.&lt;/p&gt;

&lt;p&gt;Here are the links to the other parts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/tech-blog/2022/12/16/key-points-to-arch-cloud-app-ops.html&quot;&gt;Part 2: Operations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/tech-blog/2023/01/16/key-points-to-arch-cloud-app-perf.html&quot;&gt;Part 3: Performance&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/tech-blog/2023/01/30/key-points-to-arch-cloud-app-reliab.html&quot;&gt;Part 4: Reliability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is Part 1: Cost&lt;/strong&gt; and below are the key points to optimize cost for your cloud architecture.&lt;/p&gt;

&lt;h2 id=&quot;plan-and-estimate-your-cloud-costs&quot;&gt;Plan and estimate your cloud costs&lt;/h2&gt;

&lt;p&gt;Like which services to select, which service tier or virtual machine (VM) size to choose, do you provision VMs for your workload?, or take advantage of higher-level (application) services that can reduce operational costs (e.g. Azure Functions/AWS Lambda/GCP Cloud Functions)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure to capture business and technical requirements&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use pricing calculator from the cloud provider&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Include future investments since no architecture is static&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Organize resources into resource groups to enable control, reporting, and attribution of costs throughout your environment, e.g. to report on usage by product, business unit, or project&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Budget for education to ensure your staff is properly trained to build and maintain resource on cloud&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;provision-with-optimization&quot;&gt;Provision with optimization&lt;/h2&gt;

&lt;h3 id=&quot;select-appropriate-service-tiers-and-sizes&quot;&gt;Select appropriate service tiers and sizes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Carefully evaluate workload/resource requirements for your application&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How much CPU, memory and storage is required&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pay-only-for-consumption&quot;&gt;Pay only for consumption&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Pay for only the amount of transactions, CPU time, or run time of your application&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;use-spot-instances-for-low-priority-workloads&quot;&gt;Use spot instances for low-priority workloads&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Take advantage of unused capacity on the cloud provider at a significant cost savings&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Best for batch processing jobs and the like&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;use-managed-services-when-possible&quot;&gt;Use managed services when possible&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;This avoids managing the underlying infrastructure or lower-level services&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Managed services are the application and database services&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;take-advantage-of-reserved-instances&quot;&gt;Take advantage of reserved instances&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Committing yourself to 1 year or multi-year plans on multiple products instead of going for pay-for-what-you-use cost model might save you more&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Best for consistent resource usage&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;use-monitoring-and-analytics-to-gain-cost-insights&quot;&gt;Use monitoring and analytics to gain cost insights&lt;/h2&gt;

&lt;p&gt;This ensures costs aren’t growing out of control and detects areas to improve efficiency.  Resource demands will shift over time and cloud services will evolve.&lt;/p&gt;

&lt;h3 id=&quot;track-your-cloud-spend&quot;&gt;Track your cloud spend&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Track where your costs are going and how they’re allocated across your resources&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;conduct-cost-reviews&quot;&gt;Conduct cost reviews&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Regularly check your costs to track your cloud spending&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;respond-to-cost-alerts&quot;&gt;Respond to cost alerts&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Configure alerts that are based on spending, such as alerts on budget or department spending quota&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;report-anomalies&quot;&gt;Report anomalies&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Active engagement on cost can ensure that you identify a potential for cost overrun before it becomes problematic&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;maximize-efficiency-of-cloud-spend&quot;&gt;Maximize efficiency of cloud spend&lt;/h2&gt;

&lt;p&gt;By determining whether the increase is the result of natural, efficient growth, or whether the cost can be reduced by improving efficiency with the organization’s cloud resources.  But make sure maximizing efficiency doesn’t negatively affect the performance of your system (e.g. running a system at 100% utilization runs the risk of introducing performance issues)&lt;/p&gt;

&lt;h3 id=&quot;optimize-iaas-costs&quot;&gt;Optimize IaaS costs&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Compute&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Choose a smaller size for the virtual machine instance&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Reduce the number of hours a virtual machine runs (e.g. implementing shutdown schedules)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Use discounts for the compute costs if available&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;VM disk storage&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;If performance is not required, go for a standard storage instead&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;optimize-paas-costs&quot;&gt;Optimize PaaS costs&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Optimize database costs&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Single database server vs elastic pool of databases&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Using elastic pool makes sense for multiple databases that have unpredictable bursts or spikes in activity because database transaction units (DTUs) or virtual cores (vCores) are shared among the databases in the pool, in essence you are provisioning resources for the entire pool&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Optimize blob storage costs&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Blob storage is a good place to store all your unstructured data that can be accessed in massive scale&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Take advantage of discounts based on access tier if available: does your data need to be accessed often, infrequently or rarely and explore options to move data from temporary storage to a more permanent storage&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Consumption pricing models&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Moving to pay-for-what-you-use model can save you money&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Services like Azure Functions/AWS Lambda/GCP Cloud Functions are billed on number of executions, length of execution time, and the amount of memory used&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;links-to-architecture-from-azure-aws-and-google-cloud&quot;&gt;Links to architecture from Azure, AWS, and Google Cloud&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/azure/architecture/framework/&quot;&gt;Microsoft Azure Well-Architected Framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/architecture/well-architected&quot;&gt;AWS Well-Architected&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/architecture/framework&quot;&gt;Google Cloud Architecture Framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="cloud" /><summary type="html"></summary></entry><entry><title type="html">Ways Developer Can Secure An ASP.NET Application (Redux 2022)</title><link href="https://rodansotto.github.io/tech-blog/2022/12/13/securing-asp-net-2022.html" rel="alternate" type="text/html" title="Ways Developer Can Secure An ASP.NET Application (Redux 2022)" /><published>2022-12-13T00:00:00+00:00</published><updated>2022-12-13T00:00:00+00:00</updated><id>https://rodansotto.github.io/tech-blog/2022/12/13/securing-asp-net-2022</id><content type="html" xml:base="https://rodansotto.github.io/tech-blog/2022/12/13/securing-asp-net-2022.html">&lt;p&gt;&lt;img src=&quot;/tech-blog/assets/images/secureaspnetlogo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Updating my post back in 2015 &lt;a href=&quot;/tech-blog/2015/11/02/ways-developer-can-secure-an-asp-net-application-part-1.html&quot;&gt;here&lt;/a&gt; for year 2022.&lt;/p&gt;

&lt;h2 id=&quot;cross-site-scripting-xss&quot;&gt;Cross-Site Scripting (XSS)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;According to &lt;a href=&quot;https://owasp.org/www-community/attacks/xss/&quot;&gt;OWASP’s definition of XSS&lt;/a&gt;, XSS is a type of injection that occurs when a web application uses input from a user within the output it generates without validating or encoding it&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To avoid XSS in ASP.NET, use &lt;a href=&quot;https://learn.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-7.0#expression-encoding&quot;&gt;Razor’s expression syntax&lt;/a&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&lt;/code&gt; symbol preceeding variable names, e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@InputString&lt;/code&gt;, as this will escape HTML characters in the input string by default&lt;/p&gt;

    &lt;p&gt;For example the following code:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  @(&quot;&amp;lt;span&amp;gt;Hello World&amp;lt;/span&amp;gt;&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;will render the following HTML:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;amp;lt;span&amp;amp;gt;Hello World&amp;amp;lt;/span&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use the &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/system.web.httputility.htmlencode?view=net-7.0&quot;&gt;HttpUtility.HtmlEncode()&lt;/a&gt; function inside your Razor code:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;%= HttpUtility.HtmlEncode(UserInput) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Avoid using &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/system.web.mvc.htmlhelper.raw?view=aspnet-mvc-5.2&quot;&gt;HtmlHelper.Raw()&lt;/a&gt;, unless you validate and sanitize the input string variable&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;same-origin-policy-and-cross-origin-resource-sharing-cors&quot;&gt;Same Origin Policy and Cross Origin Resource Sharing (CORS)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;According to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#:~:text=The%20same%2Dorigin%20policy%20is,documents%2C%20reducing%20possible%20attack%20vectors.&quot;&gt;MDN’s definition of same origin policy&lt;/a&gt;, same origin policy restricts how a document or script loaded by one origin can interact with a resource from another origin&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2 URLs have different origin if any of the following is different:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;protocol (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;/code&gt; vs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https&lt;/code&gt;)&lt;/li&gt;
      &lt;li&gt;domain (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://my-site.com&lt;/code&gt; vs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://www.my-site.com&lt;/code&gt;)&lt;/li&gt;
      &lt;li&gt;port (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:443&lt;/code&gt; vs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:5000&lt;/code&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;CORS on the other hand, according to &lt;a href=&quot;https://owasp.org/www-community/attacks/CORS_OriginHeaderScrutiny&quot;&gt;OWASP’s definition of CORS&lt;/a&gt;, allows a web application to expose resources to all or restricted domain and allows a web client to make AJAX request for resource on other domain than its source domain&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The process involves the browser sending the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin&quot;&gt;Origin&lt;/a&gt; HTTP request header (with origin URL as its value) for cross domain request to the server.  The server then sending the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin&quot;&gt;Access-Control-Allow-Origin&lt;/a&gt; HTTP response header (with origin URL as its value) to allow CORS.  Then lastly the browser checking if URL in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access-Control-Allow-Origin&lt;/code&gt; header matches the origin URL.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To enable CORS per endpoint in ASP.NET:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Use &lt;a href=&quot;https://learn.microsoft.com/en-us/aspnet/core/security/cors?view=aspnetcore-7.0#attr&quot;&gt;[EnableCors]&lt;/a&gt; attribute at the controller level&lt;/li&gt;
      &lt;li&gt;And call &lt;a href=&quot;https://learn.microsoft.com/en-us/aspnet/web-api/overview/security/enabling-cross-origin-requests-in-web-api#enable-cors&quot;&gt;CorsHttpConfigurationExtensions.EnableCors()&lt;/a&gt; on startup/configuration&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;You can enable CORS in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web.config&lt;/code&gt; using &lt;a href=&quot;https://learn.microsoft.com/en-us/iis/configuration/system.webserver/httpprotocol/customheaders/&quot;&gt;&amp;lt;customHeaders&amp;gt;&lt;/a&gt; but this will apply for all requests:&lt;/p&gt;

    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;system.webServer&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;httpProtocol&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;customHeaders&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Access-Control-Allow-Origin&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://...&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/customHeaders&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/httpProtocol&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/system.webServer&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sql-injection&quot;&gt;SQL Injection&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Avoid concatenating user input to SQL query statements&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use parameterized query or prepared statements&lt;/p&gt;

    &lt;p&gt;In your SQL query use &lt;a href=&quot;https://learn.microsoft.com/en-us/sql/t-sql/language-elements/variables-transact-sql?view=sql-server-ver16&quot;&gt;SQL variables&lt;/a&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;And in your ASP.NET code, use &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlcommand.parameters?view=dotnet-plat-ext-7.0&quot;&gt;SQL command parameters&lt;/a&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddWithValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Additionally validate user input&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Avoid execution of raw SQL even in Entity Framework 6 (EF6) - EF6 calls such as as &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/system.data.entity.database.sqlquery?view=entity-framework-6.2.0&quot;&gt;Database.SqlQuery()&lt;/a&gt; and &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/system.data.entity.database.executesqlcommand?view=entity-framework-6.2.0&quot;&gt;Database.ExecuteSqlCommand()&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For Entity Framework Core (EF Core), see &lt;a href=&quot;https://learn.microsoft.com/en-us/ef/core/querying/sql-queries#passing-parameters&quot;&gt;Passing parameters in EF Core&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Also, avoid returning &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/system.linq.iqueryable?view=net-7.0&quot;&gt;IQueryable&lt;/a&gt; in EF and instead call &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.tolist?view=net-7.0&quot;&gt;ToList()&lt;/a&gt; before returning results&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cross-site-request-forgery-csrf&quot;&gt;Cross-Site Request Forgery (CSRF)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;According to &lt;a href=&quot;https://owasp.org/www-community/attacks/csrf&quot;&gt;OWASP’s definition of CSRF&lt;/a&gt;, CSRF forces an end user to execute unwanted actions on a web application in which they are currently authenticated.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An example of CSRF is luring a user to visit the attacker’s site where the attacker is able to send an authenticated HTTP request to the server being attacked that the user has previously logged in&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To prevent CSRF in ASP.NET, antiforgery tokens are used and they work because the malicious page cannot read the user’s tokens, due to same-origin policies&lt;/p&gt;

    &lt;p&gt;Use &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/system.web.mvc.htmlhelper.antiforgerytoken?view=aspnet-mvc-5.2&quot;&gt;HtmlHelper.AntiForgeryToken()&lt;/a&gt; to add antiforgery token to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element:&lt;/p&gt;

    &lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nf&quot;&gt;@using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;BeginForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DeleteProduct&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Admin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;@Html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AntiForgeryToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;And add the &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.validateantiforgerytokenattribute?view=aspnetcore-7.0&quot;&gt;[ValidateAntiForgeryToken]&lt;/a&gt; attribute to the controller action:&lt;/p&gt;

    &lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValidateAntiForgeryToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DeleteProduct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For ASP.NET Core, see &lt;a href=&quot;https://learn.microsoft.com/en-us/aspnet/core/security/anti-request-forgery?view=aspnetcore-7.0&quot;&gt;Prevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;webconfig&quot;&gt;Web.config&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ASP.NET or specifically IIS by default forbids downloading the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web.config&lt;/code&gt; file via HTTP as this is configured in it’s config under &lt;a href=&quot;https://learn.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/bya7fh0a(v=vs.100)&quot;&gt;&amp;lt;system.web&amp;gt;/&amp;lt;httpHandlers&amp;gt;&lt;/a&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;system.web&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;httpHandlers&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;verb=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*.config&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;System.Web.HttpForbiddenHandler&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/httpHandlers&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/system.web&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;But still it should not contain sensitive information as this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web.config&lt;/code&gt; file can be stored in the project’s source control repository&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can store your app settings and connections strings in an external file which you can refer to in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web.config&lt;/code&gt; (see &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/appsettings/appsettings-element-for-configuration#attribute&quot;&gt;&amp;lt;appSettings&amp;gt; file&lt;/a&gt; attribute and &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/connection-strings-and-configuration-files&quot;&gt;&amp;lt;connectionStrings&amp;gt; configSource&lt;/a&gt;  attribute):&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;appSettings&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;file=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;secrets.appSettings.config&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        ...
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/appSettings&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;connectionStrings&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;configSource=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;secrets.connectionStrings.config&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/connectionStrings&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Encrypt sections of your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web.config&lt;/code&gt; file (see &lt;a href=&quot;https://learn.microsoft.com/en-us/previous-versions/aspnet/zhhddkxy(v=vs.100)&quot;&gt;Encrypting and Decrypting Configuration Sections&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you are using a cloud provider, use the &lt;a href=&quot;https://learn.microsoft.com/en-us/azure/key-vault/general/basic-concepts&quot;&gt;Key Vault in Azure&lt;/a&gt; or &lt;a href=&quot;https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html&quot;&gt;Secrets Manager in AWS&lt;/a&gt; to store sensitive information&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;password-hashing&quot;&gt;Password Hashing&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;You can use &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.rfc2898derivebytes?view=net-7.0&quot;&gt;Rfc2898DeriveBytes&lt;/a&gt; to hash password&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Or use &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.identity.passwordhasher-1?view=aspnetcore-7.0&quot;&gt;ASP.NET Core Identity PasswordHasher&lt;/a&gt; (see &lt;a href=&quot;https://andrewlock.net/exploring-the-asp-net-core-identity-passwordhasher/&quot;&gt;Exploring the ASP.NET Core Identity PasswordHasher&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cookies&quot;&gt;Cookies&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Secure cookies in ASP.NET code (see &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/system.web.httpcookie?view=netframework-4.8&quot;&gt;HttpCookie Class&lt;/a&gt;) by setting the following properties:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://owasp.org/www-community/controls/SecureCookieAttribute&quot;&gt;Secure&lt;/a&gt; - set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; to only transmit cookie using SSL, that is over HTTPS&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://owasp.org/www-community/HttpOnly&quot;&gt;HttpOnly&lt;/a&gt; - set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; to prevent client-side script from accessing the cookie&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://owasp.org/www-community/SameSite&quot;&gt;SameSite&lt;/a&gt; - set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strict&lt;/code&gt; to prevent cookie from being sent in all cross-site browsing contexts or set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lax&lt;/code&gt; for a more balanced approach between security and usability&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;/p&gt;
    &lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;cookie&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HttpCookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;NewCookie&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Secure&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpOnly&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SameSite&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SameSiteMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Strict&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// or SameSiteMode.Lax&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sessions&quot;&gt;Sessions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Secure sessions by setting properties in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web.config&lt;/code&gt; under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;system.web&amp;gt;/&amp;lt;sessionState&amp;gt;&lt;/code&gt; (see &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/system.web.configuration.sessionstatesection?view=netframework-4.8&quot;&gt;SessionStateSection Class&lt;/a&gt;) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;system.web&amp;gt;/&amp;lt;httpCookies&amp;gt;&lt;/code&gt; (see &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/system.web.configuration.httpcookiessection?view=netframework-4.8&quot;&gt;HttpCookiesSection Class&lt;/a&gt;):&lt;/p&gt;

    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;system.web&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;sessionState&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;cookieless=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;regenerateExpiredSessionId=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;timeout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;20&quot;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;httpCookies&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;httpOnlyCookies=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;requireSSL=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;sameSite=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Strict&quot;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/system.web&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sessionState&amp;gt; cookieless&lt;/code&gt; attribute to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; will prevent encoding the session ID in the URL which is prone to a security attack and instead use a cookie to store the session ID&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sessionState&amp;gt; regenerateExpiredSessionId&lt;/code&gt; attribute to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; will prevent using the same session ID value when expired&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Setting a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sessionState&amp;gt; timeout&lt;/code&gt; is recommended to prevent a session running too long which make it more vulnerable to security attack&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;enforce-https&quot;&gt;Enforce HTTPS&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Enforce HTTPS in ASP.NET code by redirecting after checking &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/system.web.httprequest.issecureconnection?view=netframework-4.8&quot;&gt;HttpRequest.IsSecureConnection&lt;/a&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsSecureConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerVariables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HTTP_HOST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RawUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can add a rewrite rule in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web.config&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;system.webServer&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;rewrite&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;rules&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;rule&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HTTP to HTTPS redirect&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;stopProcessing=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 
                  &lt;span class=&quot;nt&quot;&gt;&amp;lt;match&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(.*)&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; 
                  &lt;span class=&quot;nt&quot;&gt;&amp;lt;conditions&amp;gt;&lt;/span&gt; 
                      &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;input=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{HTTPS}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;off&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ignoreCase=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/conditions&amp;gt;&lt;/span&gt; 
                  &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Redirect&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;redirectType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Permanent&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://{HTTP_HOST}/{R:1}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt; 
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/rewrite&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/system.webServer&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Or you can add the HTTP &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security&quot;&gt;Strict-Transport-Security (HSTS)&lt;/a&gt; header to the response&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For ASP.NET Core, see &lt;a href=&quot;https://learn.microsoft.com/en-us/aspnet/core/security/enforcing-ssl?view=aspnetcore-7.0&amp;amp;tabs=visual-studio&quot;&gt;Enforce HTTPS in ASP.NET Core&lt;/a&gt; for information on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UseHttpsRedirection()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UseHsts()&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;error-handling&quot;&gt;Error handling&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Having a custom error page allows you to tailor your error messages from displaying too much information or from displaying sensitive information that can lead to a security attack&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In ASP.NET, you can add custom error handler in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Global.asax&lt;/code&gt; file under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Application_Error()&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Application_Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventArgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetLastError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Diagnostics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/Home/Error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can configure custom error messages/pages in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web.config&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;For example you can add this to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web.config&lt;/code&gt; file:&lt;/p&gt;

    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;customErrors&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;On&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;error&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;statusCode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;404&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;redirect=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;~/Home/MyCustomErrorPage&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/customErrors&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Then in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HomeController&lt;/code&gt; code, you would have this method defined:&lt;/p&gt;

    &lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyCustomErrorPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;And of course the corresponding view file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyCustomErrorPage.cshtml&lt;/code&gt; should have been created as well&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;owasp-links&quot;&gt;OWASP Links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://owasp.org/Top10/&quot;&gt;OWASP Top 10 2021&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://owasp.org/www-project-top-ten/2017/&quot;&gt;OWASP Top 10 2017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="asp-net" /><summary type="html"></summary></entry><entry><title type="html">Maintainable and Scalable Software: A Checklist</title><link href="https://rodansotto.github.io/tech-blog/2022/11/15/maintainable-scalable-software-checklist.html" rel="alternate" type="text/html" title="Maintainable and Scalable Software: A Checklist" /><published>2022-11-15T00:00:00+00:00</published><updated>2022-11-15T00:00:00+00:00</updated><id>https://rodansotto.github.io/tech-blog/2022/11/15/maintainable-scalable-software-checklist</id><content type="html" xml:base="https://rodansotto.github.io/tech-blog/2022/11/15/maintainable-scalable-software-checklist.html">&lt;p&gt;&lt;img src=&quot;/tech-blog/assets/images/swscale.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I think this serves as a good checklist to have when designing/developing software especially if this software is meant to grow as customer base grows.  I also included a definition of what software scalability means plus a list of current technologies that developers use to help tham scale their softwares.&lt;/p&gt;

&lt;h2 id=&quot;software-scalability-definition&quot;&gt;Software Scalability Definition&lt;/h2&gt;
&lt;p&gt;Software scalability is a measure of how easy it is to grow or shrink a piece of software. In many cases it refers to the software’s ability to handle increased workloads while adding users and removing them with minimal cost impact. Often software scalability also refers to the software’s ability to perform and support growing amounts of data.&lt;/p&gt;

&lt;p&gt;The keys to software scalability include &lt;strong&gt;hardware infrastructure&lt;/strong&gt;, &lt;strong&gt;software selection&lt;/strong&gt; and &lt;strong&gt;cloud accessibility&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;checklist&quot;&gt;Checklist&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Make software easy to change, update, or add features later on
    &lt;ul&gt;
      &lt;li&gt;Product flexibility from day one&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Keep things as simple as possible
    &lt;ul&gt;
      &lt;li&gt;Apply the K.I.S.S. principle (see &lt;a href=&quot;https://dev.to/kwereutosu/the-k-i-s-s-principle-in-programming-1jfg&quot;&gt;The K.I.S.S Principle in Programming&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Keep your code clean and readable
    &lt;ul&gt;
      &lt;li&gt;Avoid overusing conditional statements&lt;/li&gt;
      &lt;li&gt;Keep variables and functions meaningful and descriptive&lt;/li&gt;
      &lt;li&gt;Use loops&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Create modular components with well-defined interfaces
    &lt;ul&gt;
      &lt;li&gt;Adopt the S.O.L.I.D. design principles (my post &lt;a href=&quot;/tech-blog/2017/11/07/dont-confuse-dip-ioc-and-di-together-they-are-all-different-but-related.html&quot;&gt;here&lt;/a&gt; defines what SOLID stands for)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Adopt continuous integration practices
    &lt;ul&gt;
      &lt;li&gt;Automate building, testing, and deploying software&lt;/li&gt;
      &lt;li&gt;Test early and test often&lt;/li&gt;
      &lt;li&gt;Include performance and load testing&lt;/li&gt;
      &lt;li&gt;Option for canary or blue/green release strategies&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Make sure data storage solution is scalable
    &lt;ul&gt;
      &lt;li&gt;Option for multiple and distributed databases but synchronization will be a challenge&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Avoid storage
    &lt;ul&gt;
      &lt;li&gt;Rely on storage only for the most critical components&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Build stateless applications
    &lt;ul&gt;
      &lt;li&gt;Make sure application does not store any session data to use in another session&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Use asynchronous communication
    &lt;ul&gt;
      &lt;li&gt;Synchronous or serial tasks are a big bottleneck on scale&lt;/li&gt;
      &lt;li&gt;Run tasks in parallel&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Queue automation tasks
    &lt;ul&gt;
      &lt;li&gt;Avoid waiting on long running tasks by queueing them and get notified when done&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Use read replicas
    &lt;ul&gt;
      &lt;li&gt;Reduce load on primary DB by routing read queries from applications to the read replica&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reduce write requests
    &lt;ul&gt;
      &lt;li&gt;Controlling or buffering write operations&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Scale servers appropriately
    &lt;ul&gt;
      &lt;li&gt;Scaling vertically (up/down) which means adding more servers as opposed to scaling horizontally which means adding more resources to one server&lt;/li&gt;
      &lt;li&gt;Decide based on application traffic how conservative or aggressive it needs to scale&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Use a robust caching engine and a good CDN provider
    &lt;ul&gt;
      &lt;li&gt;Multi-location caching&lt;/li&gt;
      &lt;li&gt;Edge computing platform&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Add observability (e.g. logging, monitoring and alerting) to operate at scale&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;technologies&quot;&gt;Technologies&lt;/h2&gt;
&lt;p&gt;Microservices, CQRS, event sourcing, ECS, Kubernetes, elastic storage, CDNs, load balancers, data lakes, Docker, Go, GraphQL, Snowflake, BigQuery, AWS elastic containers with auto-scaling, AWS DynamoDB, S3, Apache Zookeeper, Kafka, Apache Spark, AWS EMR, AWS Athena, Redshift, GCP autoscaling, Elixir, ZenMonitor, Manifold, Semaphore, ScyllaDB, Rust, Ansible, Terraform, JMeter and queries, BlazeMeter, Grafana dashboards, New Relic, Cassandra, Cloudfront, Elastic Beanstalk, Fargate, Sumo Logic, Datadog, Google’s Firebase toolset, Azure App Service, Azure SQL, Azure Cache for Redis, Promotheus, RDS, Thanos, ESLint, RuboCop, AWS Lambda, GitFlow, Docker Compose, AWS CodeBuild, Logz.io, gRPC, Airflow&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adservio.fr/post/how-to-design-maintainable-and-scalable-software#el4&quot;&gt;How to Design Maintainable and Scalable software&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.snapt.net/blog/how-to-design-scalable-applications-in-10-steps&quot;&gt;How To Design Scalable Applications In 10 Steps&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cyberlinkasp.com/insights/what-is-software-scalability-and-why-is-it-important/&quot;&gt;WHAT IS SOFTWARE SCALABILITY AND WHY IS IT IMPORTANT?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://builtin.com/software-engineering-perspectives/what-is-scalability&quot;&gt;What Is Scalability and How Do You Build for It? 25 Engineers Weigh In&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="general" /><summary type="html"></summary></entry><entry><title type="html">Demystifying .NET Core apps, a quick walkthrough (.NET 6)</title><link href="https://rodansotto.github.io/tech-blog/2022/10/23/demystifying-net-core-apps.html" rel="alternate" type="text/html" title="Demystifying .NET Core apps, a quick walkthrough (.NET 6)" /><published>2022-10-23T00:00:00+00:00</published><updated>2022-10-23T00:00:00+00:00</updated><id>https://rodansotto.github.io/tech-blog/2022/10/23/demystifying-net-core-apps</id><content type="html" xml:base="https://rodansotto.github.io/tech-blog/2022/10/23/demystifying-net-core-apps.html">&lt;p&gt;&lt;img src=&quot;/tech-blog/assets/images/netcoreapps.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is just an overview of what makes &lt;strong&gt;.NET Core&lt;/strong&gt; apps work with links pointing to a much more in-depth coverage of these concepts.  There are several types of &lt;strong&gt;.NET Core&lt;/strong&gt; apps but this only covers the common ones, or at least those I have worked with.  Hopefully this will give you a much better understanding of the scope involved in developing &lt;strong&gt;.NET Core&lt;/strong&gt; apps.  Let’s go straight to it then.&lt;/p&gt;

&lt;h2 id=&quot;net-generic-host&quot;&gt;.NET Generic Host&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/core/introduction&quot;&gt;.NET Core&lt;/a&gt; apps uses this &lt;strong&gt;.NET Generic Host&lt;/strong&gt; to handle the apps’ resources such as:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/core/extensions/dependency-injection&quot;&gt;Dependency Injection (DI)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/core/extensions/logging?tabs=command-line&quot;&gt;Logging&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/core/extensions/configuration&quot;&gt;Configuration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;App shutdown&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are 2 versions of this host and are created by these 2 builders:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/core/extensions/generic-host&quot;&gt;HostBuilder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host?view=aspnetcore-6.0&quot;&gt;WebApplicationBuilder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;.NET Core&lt;/strong&gt; apps such as the &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/core/extensions/workers&quot;&gt;Worker Services&lt;/a&gt; and even &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/core/tutorials/with-visual-studio-code?pivots=dotnet-6-0&quot;&gt;Console apps&lt;/a&gt; use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HostBuilder&lt;/code&gt; version while &lt;a href=&quot;https://learn.microsoft.com/en-us/aspnet/core/introduction-to-aspnet-core?view=aspnetcore-6.0&quot;&gt;ASP.NET Core&lt;/a&gt; apps such as &lt;a href=&quot;https://learn.microsoft.com/en-us/aspnet/core/web-api/?view=aspnetcore-6.0&quot;&gt;Web APIs&lt;/a&gt; and &lt;a href=&quot;https://learn.microsoft.com/en-us/aspnet/core/mvc/overview?view=aspnetcore-6.0&quot;&gt;MVC apps&lt;/a&gt; use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebApplicationBuilder&lt;/code&gt; version.&lt;/p&gt;

&lt;p&gt;Historically, this host was originally developed for &lt;strong&gt;ASP.NET Core&lt;/strong&gt; apps but was extended for use with other types of &lt;strong&gt;.NET Core&lt;/strong&gt; apps.&lt;/p&gt;

&lt;p&gt;Let’s look at the different &lt;strong&gt;.NET Core&lt;/strong&gt; apps generated from templates provided in the &lt;a href=&quot;https://visualstudio.microsoft.com/vs/community/&quot;&gt;Visual Studio 2022 Community Edition&lt;/a&gt; and see what type of host they use and how it is used in it’s basic setup.&lt;/p&gt;

&lt;h2 id=&quot;console-app&quot;&gt;Console App&lt;/h2&gt;

&lt;p&gt;Here is the generated code from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Console App&lt;/code&gt; template with the usual startup code or entry point for any &lt;strong&gt;.NET Core&lt;/strong&gt; app found in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Program.cs&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Program.cs */&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// See https://aka.ms/new-console-template for more information&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It does not actually contain code that uses a host.  You will have to add it yourself which is not that difficult once you looked at the generated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Worker Service&lt;/code&gt; code later on.&lt;/p&gt;

&lt;p&gt;What you will notice in the code is the missing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Main&lt;/code&gt; method.  This is the new form in &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-6&quot;&gt;.NET 6&lt;/a&gt;.  See &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/core/tutorials/top-level-templates&quot;&gt;.NET 6 C# console app template generates top-level statements&lt;/a&gt; for more information on this.&lt;/p&gt;

&lt;h2 id=&quot;worker-service&quot;&gt;Worker Service&lt;/h2&gt;

&lt;p&gt;Here is the generated code from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Worker Service&lt;/code&gt; template:&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Program.cs */&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;WorkerService1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;IHost&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateDefaultBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ConfigureServices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;services&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddHostedService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;RunAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Worker.cs */&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;WorkerService1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Worker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BackgroundService&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExecuteAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stoppingToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stoppingToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsCancellationRequested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;LogInformation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Worker running at: {time}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTimeOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stoppingToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Program.cs&lt;/code&gt; file,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;the &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.host.createdefaultbuilder?view=dotnet-plat-ext-6.0&quot;&gt;Host.CreateDefaultBuilder()&lt;/a&gt; returns an instance of the &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.hostbuilder?view=dotnet-plat-ext-6.0&quot;&gt;HostBuilder&lt;/a&gt; class.&lt;/li&gt;
  &lt;li&gt;From this host you can then add services to the (dependency injection) container via &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.hostbuilder.configureservices?view=dotnet-plat-ext-6.0#microsoft-extensions-hosting-hostbuilder-configureservices(system-action((microsoft-extensions-hosting-hostbuildercontext-microsoft-extensions-dependencyinjection-iservicecollection)))&quot;&gt;ConfigureServices()&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Then you register your own &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/core/extensions/timer-service?source=recommendations&quot;&gt;implementation of an IHostedService&lt;/a&gt; which in this case is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Worker&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Worker.cs&lt;/code&gt; file via &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.servicecollectionhostedserviceextensions.addhostedservice?view=dotnet-plat-ext-6.0#microsoft-extensions-dependencyinjection-servicecollectionhostedserviceextensions-addhostedservice-1(microsoft-extensions-dependencyinjection-iservicecollection)&quot;&gt;AddHostedService&amp;lt;T&amp;gt;()&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Then you &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.hostbuilder.build?view=dotnet-plat-ext-6.0#microsoft-extensions-hosting-hostbuilder-build&quot;&gt;Build()&lt;/a&gt; your host.&lt;/li&gt;
  &lt;li&gt;And lastly, call &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.hostingabstractionshostextensions.run?view=dotnet-plat-ext-6.0#microsoft-extensions-hosting-hostingabstractionshostextensions-run(microsoft-extensions-hosting-ihost)&quot;&gt;Run()&lt;/a&gt; or &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.hostingabstractionshostextensions.runasync?view=dotnet-plat-ext-6.0#microsoft-extensions-hosting-hostingabstractionshostextensions-runasync(microsoft-extensions-hosting-ihost-system-threading-cancellationtoken)&quot;&gt;RunAsync()&lt;/a&gt; on the host to run all registered hosted services, because you can have multiple hosted services running and not just one.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Worker.cs&lt;/code&gt; file, on the otherhand, contains the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Worker&lt;/code&gt; class which inherits from &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.backgroundservice?view=dotnet-plat-ext-6.0&quot;&gt;BackgroundService&lt;/a&gt; which is an implementation of an &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.ihostedservice?view=dotnet-plat-ext-6.0&quot;&gt;IHostedService&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that in the constructor method of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Worker&lt;/code&gt; class, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Worker()&lt;/code&gt;, is passed, or shall we say is where an &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.ilogger-1?view=dotnet-plat-ext-6.0&quot;&gt;ILogger&amp;lt;T&amp;gt;&lt;/a&gt; implementation is injected.  This is an example of how &lt;strong&gt;.NET Generic Host&lt;/strong&gt; provides dependency injection for services such as the basic logging provided by &lt;strong&gt;.NET Core&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Next the function &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.backgroundservice.executeasync?view=dotnet-plat-ext-6.0&quot;&gt;ExecuteAsync()&lt;/a&gt; is called when the hosted service starts.  It accepts a &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/system.threading.cancellationtoken?view=net-6.0&amp;amp;viewFallbackFrom=dotnet-plat-ext-6.0&quot;&gt;CancellationToken&lt;/a&gt; which means this long running operation should be cancellable.&lt;/p&gt;

&lt;h2 id=&quot;aspnet-core-web-api&quot;&gt;ASP.NET Core Web API&lt;/h2&gt;

&lt;p&gt;Here is the generated code from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASP.NET Core Web API&lt;/code&gt; template:&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Program.cs */&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Add services to the container.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddControllers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddEndpointsApiExplorer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddSwaggerGen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Configure the HTTP request pipeline.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsDevelopment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseSwagger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseSwaggerUI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseHttpsRedirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseAuthorization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MapControllers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* WeatherForecastController.cs */&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Microsoft.AspNetCore.Mvc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ControllerWebAPI1.Controllers&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[controller]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WeatherForecastController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ControllerBase&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Summaries&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;Freezing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Bracing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Chilly&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Cool&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Mild&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Warm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Balmy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Sweltering&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Scorching&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WeatherForecastController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WeatherForecastController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WeatherForecastController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;GetWeatherForecast&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WeatherForecast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Enumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WeatherForecast&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddDays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;TemperatureC&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Shared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Summary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Summaries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Shared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Summaries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Program.cs&lt;/code&gt; file of an &lt;strong&gt;ASP.NET Core&lt;/strong&gt; app such as &lt;strong&gt;Web API&lt;/strong&gt; app,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;the &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.webapplication.createbuilder?view=aspnetcore-6.0&quot;&gt;WebApplication.CreateBuilder()&lt;/a&gt; is called to create an instance of the &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.webapplicationbuilder?view=aspnetcore-6.0&quot;&gt;WebApplicationBuilder&lt;/a&gt; class.&lt;/li&gt;
  &lt;li&gt;Then the following services are added into it’s DI container, the &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.webapplicationbuilder.services?view=aspnetcore-6.0&quot;&gt;WebApplicationBuilder.Services&lt;/a&gt;:
    &lt;ol&gt;
      &lt;li&gt;Adds MVC services for controllers via &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.mvcservicecollectionextensions.addcontrollers?view=aspnetcore-6.0#microsoft-extensions-dependencyinjection-mvcservicecollectionextensions-addcontrollers(microsoft-extensions-dependencyinjection-iservicecollection)&quot;&gt;AddControllers()&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Configures &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.apiexplorer?view=aspnetcore-6.0&quot;&gt;ApiExplorer&lt;/a&gt; using &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.endpoint.metadata?view=aspnetcore-6.0#microsoft-aspnetcore-http-endpoint-metadata&quot;&gt;Endpoint’s Metadata&lt;/a&gt; via &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.endpointmetadataapiexplorerservicecollectionextensions.addendpointsapiexplorer?view=aspnetcore-6.0&quot;&gt;AddEndpointsApiExplorer()&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Adds the &lt;a href=&quot;https://learn.microsoft.com/en-us/aspnet/core/tutorials/web-api-help-pages-using-swagger?view=aspnetcore-6.0&quot;&gt;Swagger&lt;/a&gt; generator via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AddSwaggerGen()&lt;/code&gt;.  See &lt;a href=&quot;https://learn.microsoft.com/en-us/aspnet/core/tutorials/getting-started-with-swashbuckle?view=aspnetcore-6.0&amp;amp;tabs=visual-studio&quot;&gt;Get started with Swashbuckle and ASP.NET Core&lt;/a&gt;.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Then you &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.webapplicationbuilder.build?view=aspnetcore-6.0#microsoft-aspnetcore-builder-webapplicationbuilder-build&quot;&gt;Build()&lt;/a&gt; the host, the &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.webapplication?view=aspnetcore-6.0&quot;&gt;WebApplication&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Next you configure the HTTP request pipeline or the middleware with the following calls:
    &lt;ol&gt;
      &lt;li&gt;Register the Swagger middleware via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UseSwagger()&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Register the SwaggerUI middleware via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UseSwaggerUI()&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Adds middleware for redirecting HTTP requests to HTTPS vi &lt;a href=&quot;https://learn.microsoft.com/en-us/aspnet/core/security/enforcing-ssl?view=aspnetcore-6.0&amp;amp;tabs=visual-studio&quot;&gt;UseHttpsRedirection()&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Enables authorization capabilities via &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.authorizationappbuilderextensions.useauthorization?view=aspnetcore-6.0&quot;&gt;UseAuthorization()&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Adds endpoints to controller actions via &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.controllerendpointroutebuilderextensions.mapcontrollers?view=aspnetcore-6.0&quot;&gt;MapControllers()&lt;/a&gt;
&lt;br /&gt;
See &lt;a href=&quot;https://learn.microsoft.com/en-us/aspnet/core/fundamentals/middleware/?view=aspnetcore-6.0&quot;&gt;ASP.NET Core Middleware&lt;/a&gt; for more information of what middleware is and what other built-in middleware components came with &lt;strong&gt;ASP.NET Core&lt;/strong&gt;.  Briefly, they replace the HTTP handlers and modules in previous &lt;strong&gt;ASP.NET&lt;/strong&gt; versions and come with &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.useextensions.use?view=aspnetcore-6.0&quot;&gt;Use&lt;/a&gt;, &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.mapextensions.map?view=aspnetcore-6.0&quot;&gt;Map&lt;/a&gt;, or &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.runextensions.run?view=aspnetcore-6.0&quot;&gt;Run&lt;/a&gt; extension methods.
&lt;br /&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;And lastly, runs the application via &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.webapplication.run?view=aspnetcore-6.0&quot;&gt;Run()&lt;/a&gt; which blocks the calling thread until host shutdown&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-old-startupcs&quot;&gt;The Old Startup.cs&lt;/h2&gt;
&lt;p&gt;You will notice that all the configuration and setup is done in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Program.cs&lt;/code&gt; file.  Before &lt;strong&gt;.NET 6&lt;/strong&gt;, it used to be in 2 files: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Program.cs&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Startup.cs&lt;/code&gt; and it looks something like this:&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Program.cs */&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Program&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;CreateWebHostBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	   
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IWebHostBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateWebHostBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;IConfiguration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateConfigurationContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebHost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateDefaultBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ConfigureLogging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ClearProviders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddConsole&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UseStartup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Startup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Startup.cs */&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Startup&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Startup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IConfiguration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Configuration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IConfiguration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Configuration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// This method gets called by the runtime. Use this method to add services to the container.&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConfigureServices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IServiceCollection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddMvc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetCompatibilityVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompatibilityVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Version_2_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// etc.&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IApplicationBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IHostingEnvironment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsDevelopment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseDeveloperExceptionPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseHsts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseHttpsRedirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseMvc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Program.cs&lt;/code&gt; file where you create the host and call &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.hosting.webhostbuilderextensions.usestartup?view=aspnetcore-6.0&quot;&gt;UseStartup&amp;lt;TStartup&amp;gt;()&lt;/a&gt; to use a separate file containing the startup code.&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Startup.cs&lt;/code&gt; file, you implement the following 2 methods that are called by the runtime:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ConfigureServices(IServiceCollection)&lt;/strong&gt; - to add services to the container&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Configure(IApplicationBuilder app, IHostingEnvironment env)&lt;/strong&gt; - to configure the HTTP request pipeline&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see there is more boilerplate code you need to add compared to the new minimal hosting model in &lt;strong&gt;.NET 6&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;minimal-api&quot;&gt;Minimal API&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Minimal API&lt;/strong&gt; is a new type of &lt;strong&gt;.NET Core&lt;/strong&gt; application in &lt;strong&gt;.NET 6&lt;/strong&gt;.  You can generate the code from the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASP.NET Core Web API&lt;/code&gt; template but unselecting the checkbox besides &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Use controllers (uncheck to use minimal APIs)&lt;/code&gt;.  Below is the generated code:&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Program.cs */&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Add services to the container.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddEndpointsApiExplorer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddSwaggerGen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Configure the HTTP request pipeline.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsDevelopment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseSwagger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseSwaggerUI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseHttpsRedirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;summaries&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Freezing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Bracing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Chilly&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Cool&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Mild&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Warm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Balmy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Sweltering&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Scorching&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MapGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/weatherforecast&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forecast&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Enumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WeatherForecast&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddDays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Shared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;summaries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Shared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;summaries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forecast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WithName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GetWeatherForecast&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WeatherForecast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TemperatureC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Summary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TemperatureF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TemperatureC&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.5556&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So it does not have controller code like in the regular &lt;strong&gt;Web API&lt;/strong&gt; but it makes a call to &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.endpointroutebuilderextensions.mapget?view=aspnetcore-6.0&quot;&gt;MapGet()&lt;/a&gt;.  I won’t go over too much on this but feel free to look at &lt;a href=&quot;https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-6.0&quot;&gt;Minimal APIs overview&lt;/a&gt; for more information.  Also &lt;a href=&quot;https://learn.microsoft.com/en-us/aspnet/core/fundamentals/routing?view=aspnetcore-6.0#routing-basics&quot;&gt;Routing basics&lt;/a&gt; in &lt;strong&gt;ASP.NET Core&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;aspnet-core-empty&quot;&gt;ASP.NET Core Empty&lt;/h2&gt;

&lt;p&gt;And just to show you how many lines of code is required to get yourself a bare minimum, no content &lt;strong&gt;ASP.NET Core&lt;/strong&gt; web application up and running, you can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASP.NET Core Empty&lt;/code&gt; template to generate this code for you:&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MapGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;adding-host-to-a-console-app&quot;&gt;Adding Host to a Console App&lt;/h2&gt;

&lt;p&gt;As previously mentioned, you need to add the &lt;strong&gt;.NET Generic Host&lt;/strong&gt; to the console app because the generated code does not expose it.  You will need to add a NuGet package for &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.Extensions.Hosting&quot;&gt;Microsoft.Hosting.Extensions&lt;/a&gt; before you can use the host.  See this video showing you how to do this.&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/I6SzqpoQ-Gw&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br /&gt;
And below is the code to use host in a console app after adding the NuGet package:&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Microsoft.Extensions.DependencyInjection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Microsoft.Extensions.Hosting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Microsoft.Extensions.Logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateDefaultBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// See https://aka.ms/new-console-template for more information&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetRequiredService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;LogInformation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Host created.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;RunAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And as an added bonus, it also shows you how to get the host’s default logger service to log messages.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s Next&lt;/h2&gt;
&lt;p&gt;There’s still a lot more to cover but this is only part 1.  In the next part or so, I like to get more into .NET Generic Host’s features such as dependency injection, logging, and configuration; some of the framework provided sevices; some of ASP.NET Core’s built-in HTTP middleware like authentication and authorization; and how to create a custom HTTP middleware.&lt;/p&gt;

&lt;h2 id=&quot;additional-references&quot;&gt;Additional References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/&quot;&gt;.NET documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/fundamentals/&quot;&gt;.NET Fundamentals&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/aspnet/core/?view=aspnetcore-6.0&quot;&gt;ASP.NET documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="net" /><summary type="html"></summary></entry><entry><title type="html">Tic-Tac-Toe in Angular, React, and Lit</title><link href="https://rodansotto.github.io/tech-blog/2022/10/02/tictactoe-ng-rx-lit.html" rel="alternate" type="text/html" title="Tic-Tac-Toe in Angular, React, and Lit" /><published>2022-10-02T00:00:00+00:00</published><updated>2022-10-02T00:00:00+00:00</updated><id>https://rodansotto.github.io/tech-blog/2022/10/02/tictactoe-ng-rx-lit</id><content type="html" xml:base="https://rodansotto.github.io/tech-blog/2022/10/02/tictactoe-ng-rx-lit.html">&lt;p&gt;&lt;img src=&quot;/tech-blog/assets/images/tictactoe-ng-rx-lit.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I created a quick and simple tic-tac-toe game in &lt;a href=&quot;https://angular.io/&quot;&gt;Angular&lt;/a&gt;, &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt;, and &lt;a href=&quot;https://lit.dev/&quot;&gt;Lit&lt;/a&gt; to show the similarities between these 3 frontend frameworks.  You can see they all share pretty much the same HTML, CSS and &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt; code.&lt;/p&gt;

&lt;p&gt;Check them out there:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackblitz.com/edit/angular-ivy-5qjdvt?file=src%2Fapp%2Ftictactoe.component.html,src%2Fapp%2Ftictactoe.component.css,src%2Fapp%2Ftictactoe.component.ts&quot;&gt;Tic-tac-toe in Angular&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://codepen.io/rodansotto/pen/mdLLwMm&quot;&gt;Tic-tac-toe in React&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lit.dev/playground/#gist=3002ab6bc851dae0493a970eb8c4a6f6&quot;&gt;Tic-tac-toe in Lit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="front-end" /><summary type="html"></summary></entry><entry><title type="html">My notes on Angular (Redux 14)</title><link href="https://rodansotto.github.io/tech-blog/2022/09/25/my-notes-on-angular-redux-14.html" rel="alternate" type="text/html" title="My notes on Angular (Redux 14)" /><published>2022-09-25T00:00:00+00:00</published><updated>2022-09-25T00:00:00+00:00</updated><id>https://rodansotto.github.io/tech-blog/2022/09/25/my-notes-on-angular-redux-14</id><content type="html" xml:base="https://rodansotto.github.io/tech-blog/2022/09/25/my-notes-on-angular-redux-14.html">&lt;p&gt;&lt;img src=&quot;/tech-blog/assets/images/angularbanner.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I was going over my Angular post back in 2017, &lt;a href=&quot;/tech-blog/2017/11/23/my-notes-on-angular-2-0.html&quot;&gt;My notes on Angular (2.0+)&lt;/a&gt;, and thought I should provide code examples from my Angular product catalog application demo that you can check out &lt;a href=&quot;https://rodansotto.github.io/productcatalogdemo-angular14/products&quot;&gt;here&lt;/a&gt; with the full source code &lt;a href=&quot;https://github.com/rodansotto/productcatalogdemo-angular14&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This post can serve as a quick refresher to the basic concepts we need to know to build a full running Angular application.&lt;/p&gt;

&lt;p&gt;I do think that these are the concepts that you can easily transfer to any modern front-end framework especially any web component based framework.&lt;/p&gt;

&lt;p&gt;Without further ado, let’s get down to it…&lt;/p&gt;

&lt;h2 id=&quot;root-module&quot;&gt;Root module&lt;/h2&gt;

&lt;p&gt;Following Angular’s default directory structure, our root module would be in &lt;a href=&quot;https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/app/app.module.ts&quot;&gt;/src/app/app.module.ts&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;NgModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;declarations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What this code does is export a class named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppModule&lt;/code&gt; and decorate it with Angular directive &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@NgModule&lt;/code&gt; to indicate that this is an &lt;a href=&quot;https://angular.io/guide/architecture-modules&quot;&gt;Angular module&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/main.ts&quot;&gt;/src/main.ts&lt;/a&gt;, our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppModule&lt;/code&gt; is loaded at startup via call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bootstrapModule()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;platformBrowserDynamic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bootstrapModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We also declare in our root module our root component &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppComponent&lt;/code&gt; via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;declarations&lt;/code&gt; property and we set it to load at startup via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bootstrap&lt;/code&gt; property.  Note that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;declarations&lt;/code&gt; property is where you declare all Angular components that an Angular module requires.&lt;/p&gt;

&lt;h2 id=&quot;root-component&quot;&gt;Root component&lt;/h2&gt;

&lt;p&gt;Our root component would be in &lt;a href=&quot;https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/app/app.component.ts&quot;&gt;/src/app/app.component.ts&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;app-root&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./app.component.html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;styleUrls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./app.component.css&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;productcatalogdemo-angular14&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What this code does is export a class named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppComponent&lt;/code&gt; with a property &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt; and decorate the class with Angular directive &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Component&lt;/code&gt; to indicate that this is an &lt;a href=&quot;https://angular.io/guide/component-overview&quot;&gt;Angular component&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An Angular component is where we define our HTML and CSS, the UI for our application, and also the custom HTML tag name which in this case is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt;.  Note that this follows the concept of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components&quot;&gt;Web Components&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If we look at the &lt;a href=&quot;https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/index.html&quot;&gt;/src/index.html&lt;/a&gt; file of our Angular application, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; is added under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;app-root&amp;gt;&amp;lt;/app-root&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that I loosely called it root component because this will be the only entry point to our Angular application.  But we can have multiple entries if we declare and boostrap more than one component in our root module and add them in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt; file.  See &lt;a href=&quot;https://angular.io/guide/bootstrapping#the-bootstrap-array&quot;&gt;The bootstrap array&lt;/a&gt; for more info.&lt;/p&gt;

&lt;h2 id=&quot;interpolation&quot;&gt;Interpolation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://angular.io/guide/interpolation&quot;&gt;Interpolation&lt;/a&gt; is a way to embed values or expressions in an Angular component template.  It uses the double curly braces &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;}}&lt;/code&gt; as delimiters.&lt;/p&gt;

&lt;p&gt;Remember in our root component class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppComponent&lt;/code&gt; we defined a property called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt;?  We can embed this property inside the the component’s template in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/src/app/app.component.html&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;{{ title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;template-variable&quot;&gt;Template Variable&lt;/h2&gt;

&lt;p&gt;There is also such thing as &lt;a href=&quot;https://angular.io/guide/template-reference-variables&quot;&gt;template variable&lt;/a&gt; in Angular which we don’t have an example in our Angular application.  Basically you can assign a variable to any HTML element (.e.g input, div, or even our own custom element) in a template using the hash symbol &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; and refer to it from another part of the template.&lt;/p&gt;

&lt;h2 id=&quot;property-binding&quot;&gt;Property binding&lt;/h2&gt;

&lt;p&gt;Good examples of &lt;a href=&quot;https://angular.io/guide/property-binding&quot;&gt;property binding&lt;/a&gt; can be found in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductListComponent&lt;/code&gt;’s template in &lt;a href=&quot;https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/app/product-list/product-list.component.html&quot;&gt;/src/app/product-list/product-list.component.html&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;mat-paginator&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;[length]=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;totalRecords&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;[pageSize]=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pageSize&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;[pageSizeOptions]=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pageSizeOptions&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;[pageIndex]=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;page-1&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;(page)=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pageEvent($event)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/mat-paginator&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we are setting the value of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt; attribute, among other things, of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;mat-paginator&amp;gt;&lt;/code&gt;.  Basically we enclose the attribute with the square brackets &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;]&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[length]=&quot;totalRecords&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to bind it to the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;totalRecords&lt;/code&gt; where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;totalRecords&lt;/code&gt; is a property in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductListComponent&lt;/code&gt; in &lt;a href=&quot;https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/app/product-list/product-list.component.ts&quot;&gt;/src/app/product-list/product-list.component.ts&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;event-binding&quot;&gt;Event binding&lt;/h2&gt;

&lt;p&gt;Similarly for &lt;a href=&quot;https://angular.io/guide/event-binding&quot;&gt;event binding&lt;/a&gt;, we enclose the event attribute, in this case the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;page&lt;/code&gt; event attribute in our code example above, with the parentheses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;)&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(page)=&quot;pageEvent($event)&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to bind it to the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pageEvent()&lt;/code&gt; defined in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductListComponent&lt;/code&gt;.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$event&lt;/code&gt; is Angular’s event object that we need to pass to the function.&lt;/p&gt;

&lt;h2 id=&quot;two-way-binding&quot;&gt;Two-way binding&lt;/h2&gt;

&lt;p&gt;We don’t have an example of &lt;a href=&quot;https://angular.io/guide/two-way-binding&quot;&gt;two-way binding&lt;/a&gt; in our Angular application.  One thing to note is that when doing two-way binding with form elements, the built-in attribute directive &lt;a href=&quot;https://angular.io/guide/built-in-directives#ngModel&quot;&gt;NgModel&lt;/a&gt; is used instead.&lt;/p&gt;

&lt;p&gt;So let’s say we have a form for editing our product in our catalog and to allow editing a product’s name we can use two-way binding on an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;[(ngModel)]=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;product.Name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;product&lt;/code&gt; is an object  defined in our product component and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Name&lt;/code&gt; is one of product’s properties.&lt;/p&gt;

&lt;p&gt;With two-way binding, we enclose the attribute with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[(&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;)]&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;built-in-attribute-directives&quot;&gt;Built-in attribute directives&lt;/h2&gt;

&lt;p&gt;We also don’t have examples of &lt;a href=&quot;https://angular.io/guide/built-in-directives#built-in-attribute-directives&quot;&gt;built-in attribute directives&lt;/a&gt; in our Angular application.  But one such attribute is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NgModel&lt;/code&gt; mentioned above.  The other commonly used ones are: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NgClass&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NgStyle&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;built-in-structural-directives&quot;&gt;Built-in structural directives&lt;/h2&gt;

&lt;p&gt;Our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductListComponent&lt;/code&gt;’s template in &lt;a href=&quot;https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/app/product-list/product-list.component.html&quot;&gt;/src/app/product-list/product-list.component.html&lt;/a&gt; has examples of some of Angular’s &lt;a href=&quot;https://angular.io/guide/built-in-directives#built-in-structural-directives&quot;&gt;built-in structural directives&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One such built-in structural directive is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*ngIf&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;mat-progress-spinner&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;margin-left: 10px;&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;*ngIf=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;!productsLoaded&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;indeterminate&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;diameter=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;25&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/mat-progress-spinner&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*ngIf&lt;/code&gt; directive here tells Angular to display or render the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;mat-progress-spinner&amp;gt;&lt;/code&gt; component if products have not been loaded yet or has not finished loading yet.  Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;productsLoaded&lt;/code&gt; is a property of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductListComponent&lt;/code&gt; in &lt;a href=&quot;https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/app/product-list/product-list.component.ts&quot;&gt;/src/app/product-list/product-list.component.ts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another commonly used built-in structural directive is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*ngFor&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;*ngFor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;let product of products&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;mat-card&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;mat-card-content&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
        {{product.ProductNumber}}
        | {{product.ProductCategory}}
        | {{product.ProductModel}}
        | {{product.Color}}
        | Sz {{product.Size}}
        | Wt {{product.Weight}}
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/mat-card-content&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/mat-card&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*ngFor&lt;/code&gt; directive iterates/loops over the containing HTML code, and in our example above, it iterates for each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;product&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;products&lt;/code&gt; propery of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductListComponent&lt;/code&gt; and displays a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;mat-card-content&amp;gt;&lt;/code&gt; component showing each product’s informations such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductNumber&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductCategory&lt;/code&gt;, etc.&lt;/p&gt;

&lt;h2 id=&quot;pipes&quot;&gt;Pipes&lt;/h2&gt;

&lt;p&gt;We use the character &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|&lt;/code&gt; to indicate a pipe operation in Angular.  In our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductListComponent&lt;/code&gt;’s template, the &lt;a href=&quot;https://angular.io/api/common/CurrencyPipe&quot;&gt;CurrencyPipe&lt;/a&gt; is used to display all dollar amount values to currency format:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;mat-card-subtitle&amp;gt;&lt;/span&gt;{{product.ListPrice | currency}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/mat-card-subtitle&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;parent-to-child-component-interaction&quot;&gt;Parent to child component interaction&lt;/h2&gt;

&lt;p&gt;We don’t have an example of &lt;a href=&quot;https://angular.io/guide/inputs-outputs#sending-data-to-a-child-component&quot;&gt;passing data from parent component to child component&lt;/a&gt; in our Angular application.  But let’s say we decided to create our own card component for our single product named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;product-card&amp;gt;&lt;/code&gt; and we wanted to iterate over them, we could have the following modified template on our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductListComponent&lt;/code&gt;’s template:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;*ngFor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;let product of products&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;product-card&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;[product]=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;product&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/product-card&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;, where we are binding the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;product&lt;/code&gt; attribute of the the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;product-card&amp;gt;&lt;/code&gt; to the iterated products of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*ngFor&lt;/code&gt; directive.&lt;/p&gt;

&lt;p&gt;To add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;product&lt;/code&gt; attribute to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductCard&lt;/code&gt; component, we use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Input&lt;/code&gt; decorator:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;product-card&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./product-card.component.html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;styleUrls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./product-card.component.css&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ProductCard&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is like passing a custom property to our component.&lt;/p&gt;

&lt;h2 id=&quot;child-to-parent-component-interaction&quot;&gt;Child to parent component interaction&lt;/h2&gt;

&lt;p&gt;To &lt;a href=&quot;https://angular.io/guide/inputs-outputs#sending-data-to-a-parent-component&quot;&gt;pass data or information back to parent from a child component&lt;/a&gt;, we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventEmmitter&lt;/code&gt; in Angular to expose an event from child that the parent can listen to.  To define an event, we use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Output&lt;/code&gt; decorator.&lt;/p&gt;

&lt;p&gt;For example, if we wanted to have a list of liked products in our product list page (our parent component) and everytime the &lt;strong&gt;Like&lt;/strong&gt; button is clicked in our product card component (our child component), we would use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Output&lt;/code&gt; decorator to define our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventEmitter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Back to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductCard&lt;/code&gt; component (our child component), we would add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Output&lt;/code&gt; statement and the code to emit the event:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ProductCard&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;likedEventEmitter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EventEmitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;likeButtonClicked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;likedEventEmitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then on our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductListComponent&lt;/code&gt;’s template (our parent component), we listen to the event emitted by our child component using event binding:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;*ngFor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;let product of products&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;product-card&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;[product]=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;product&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;(likedEventEmitter)=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;addLikedProduct($event)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/product-card&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addLikedProduct()&lt;/code&gt; is a function defined in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductListComponent&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;lifecycle-hooks&quot;&gt;Lifecycle hooks&lt;/h2&gt;

&lt;p&gt;You will notice in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductListComponent&lt;/code&gt; in &lt;a href=&quot;https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/app/product-list/product-list.component.ts&quot;&gt;/src/app/product-list/product-list.component.ts&lt;/a&gt; in its declaration that it’s implementing an interface called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnInit&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ProductListComponent&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OnInit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That is to say we would like our component to implement the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ngOnInit()&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;ngOnInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getProducts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// load products on load&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ngOnInit()&lt;/code&gt; is one of the most common &lt;a href=&quot;https://angular.io/guide/lifecycle-hooks&quot;&gt;lifecycle hooks&lt;/a&gt; available in Angular that we can use.  Other commons ones are: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ngOnChanges()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ngOnDestroy()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;service&quot;&gt;Service&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://angular.io/guide/architecture-services&quot;&gt;Angular service&lt;/a&gt; is a way to separate logic from view, from Angular component.  It is decorated as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Injectable&lt;/code&gt;, declared in Angular module as a provider, and injected to an Angular component.&lt;/p&gt;

&lt;p&gt;An example of an Angular service in our Angular application is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductService&lt;/code&gt; in &lt;a href=&quot;https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/app/product-service/product.service.ts&quot;&gt;/src/app/product-service/product.service.ts&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Injectable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ProductService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getProducts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;orderBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppModule&lt;/code&gt; in &lt;a href=&quot;https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/app/app.module.ts&quot;&gt;/src/app/app.module.ts&lt;/a&gt; we list our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductService&lt;/code&gt; as a provider via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;providers&lt;/code&gt; property:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;NgModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;declarations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ProductListComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;providers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ProductService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductService&lt;/code&gt; is injected to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductListComponent&lt;/code&gt;’s constructor in &lt;a href=&quot;https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/app/product-list/product-list.component.ts&quot;&gt;/src/app/product-list/product-list.component.ts&lt;/a&gt; so our product list component can call functions of our product service such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getProducts()&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ProductListComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_productService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ProductService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_productService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getProducts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;routing&quot;&gt;Routing&lt;/h2&gt;
&lt;p&gt;Routing enables us to build a single page application where you can navigate from one view to the next without requesting a whole new page from the server.  The &lt;a href=&quot;https://angular.io/guide/routing-overview&quot;&gt;Angular router&lt;/a&gt; provides us such feature.&lt;/p&gt;

&lt;p&gt;We have routing in our Angular application and they are defined in the routing module in &lt;a href=&quot;https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/app/app-routing.module.ts&quot;&gt;/src/app/app-routing.module.ts&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RouterModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Routes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@angular/router&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Routes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ProductListComponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PageNotFoundComponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;NgModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;imports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RouterModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;useHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RouterModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppRoutingModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;routes&lt;/code&gt; contains our route definitions and basically we are saying that for any url path (including the base path &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'/'&lt;/code&gt;) other than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/products&lt;/code&gt; we show the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Page Not Found&lt;/code&gt; component, as indicated by the wildcard route &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'**'&lt;/code&gt;.  Only the url path &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/products&lt;/code&gt; will show our product list component, our Angular product catalog application.&lt;/p&gt;

&lt;p&gt;The routed view is then shown on the template of our root component AppComponent in &lt;a href=&quot;https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/app/app.component.html&quot;&gt;/src/app/app.component.html&lt;/a&gt;.  In Angular, the routed views render in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;router-outlet&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;padding:20px&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;router-outlet&amp;gt;&amp;lt;/router-outlet&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;forms&quot;&gt;Forms&lt;/h2&gt;

&lt;p&gt;We don’t have forms on our Angular application.  But if you are having forms in you web application, you have the option to use &lt;a href=&quot;https://angular.io/guide/forms-overview&quot;&gt;Angular forms&lt;/a&gt;.  Maybe I will do a separate post on this when I add forms in our Angular application.  But for now just be aware that in Angular, there are two approaches to implementing forms: the more simplistic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;template-driven forms&lt;/code&gt; and the more robust and scalable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reactive forms&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;additional-reference&quot;&gt;Additional Reference&lt;/h2&gt;

&lt;p&gt;There is this Youtube video that I watched (here is the &lt;a href=&quot;https://www.youtube.com/watch?v=IYI0em-xT28&quot;&gt;link&lt;/a&gt;) that goes through these concepts.  It’s a long video, like 4 hours, but it’s totally worth it.  For just a quick refresher you can set the playback to 2x which I totally did and still understandable.&lt;/p&gt;</content><author><name></name></author><category term="front-end" /><summary type="html"></summary></entry><entry><title type="html">Multi-threading in C#: Task-Based Asynchronous Pattern (TAP)</title><link href="https://rodansotto.github.io/tech-blog/2022/09/06/task-based-async-pattern.html" rel="alternate" type="text/html" title="Multi-threading in C#: Task-Based Asynchronous Pattern (TAP)" /><published>2022-09-06T00:00:00+00:00</published><updated>2022-09-06T00:00:00+00:00</updated><id>https://rodansotto.github.io/tech-blog/2022/09/06/task-based-async-pattern</id><content type="html" xml:base="https://rodansotto.github.io/tech-blog/2022/09/06/task-based-async-pattern.html">&lt;p&gt;&lt;img src=&quot;/tech-blog/assets/images/csthread.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[DEMO CODE](https://dotnetfiddle.net/xer6Iv)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Since .NET Framework 4, &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap?source=recommendations&quot;&gt;Task-Based Asynchronous Pattern (TAP)&lt;/a&gt; is Microsoft’s recommended way of developing multi-threaded applications in C#.  Before that, it was &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.threading?view=net-6.0&quot;&gt;Threads&lt;/a&gt;.  I’ve briefly covered the basics of threads and provided links to them in my 2017 post &lt;a href=&quot;/tech-blog/2017/11/16/multi-threading-in-c-a-must-have-in-your-programming-arsenal-imo.html&quot;&gt;Multi-threading in C#: A must have in your programming arsenal (IMO)&lt;/a&gt;.  In fact all of the links there are still valid and still serve as a good refresher.  &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks?view=net-6.0&quot;&gt;Tasks&lt;/a&gt; are part of Microsoft’s &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/task-parallel-library-tpl&quot;&gt;Task Parallel Libray (TPL)&lt;/a&gt; which also covers parallel programming.  For a complete guide to .NET’s parallel programming, visit &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/&quot;&gt;Parallel programming in .NET&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I created a demo code on my .NET Fiddle library, &lt;a href=&quot;https://dotnetfiddle.net/xer6Iv&quot;&gt;Threads vs Tasks&lt;/a&gt;, illustrating how to program both threads and tasks in C#.  Tasks in C# is akin to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promises in JavaScript&lt;/a&gt;.  It is much easier to code with tasks than with threads but with threads of course we have more control.  We do get code running faster with threads over tasks but threads are less scalable in terms of memory.  With tasks, thread pooling is automatic thereby reducing chance of running out of memory when scaling to a large number of running tasks.  We can implement thread pooling in threads but that complicates our code and thus much harder to understand.&lt;/p&gt;

&lt;p&gt;Check out the sample output below from running the demo code on my .NET Fiddle library:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Running Threads...
Worker 01 Thread Id 04: Running...
Worker 02 Thread Id 05: Running...
Worker 03 Thread Id 06: Running...
Worker 04 Thread Id 07: Running...
Worker 05 Thread Id 08: Running...
Worker 06 Thread Id 09: Running...
Worker 07 Thread Id 10: Running...
Worker 08 Thread Id 11: Running...
Worker 09 Thread Id 12: Running...
Worker 10 Thread Id 13: Running...
Worker 03 Thread Id 06: Done 100ms
Worker 01 Thread Id 04: Done 100ms
Worker 04 Thread Id 07: Done 100ms
Worker 02 Thread Id 05: Done 100ms
Worker 05 Thread Id 08: Done 100ms
Worker 06 Thread Id 09: Done 100ms
Worker 07 Thread Id 10: Done 100ms
Worker 08 Thread Id 11: Done 100ms
Worker 09 Thread Id 12: Done 100ms
Worker 10 Thread Id 13: Done 100ms
All Threads Completed 105ms

Running Tasks Using New, Start, and Wait...
Worker 02 Thread Id 16: Running...
Worker 01 Thread Id 14: Running...
Worker 03 Thread Id 18: Running...
Worker 04 Thread Id 17: Running...
Worker 02 Thread Id 16: Done 100ms
Worker 01 Thread Id 14: Done 100ms
Worker 03 Thread Id 18: Done 100ms
Worker 05 Thread Id 14: Running...
Worker 06 Thread Id 18: Running...
Worker 07 Thread Id 16: Running...
Worker 04 Thread Id 17: Done 100ms
Worker 08 Thread Id 17: Running...
Worker 05 Thread Id 14: Done 100ms
Worker 06 Thread Id 18: Done 100ms
Worker 10 Thread Id 18: Running...
Worker 09 Thread Id 14: Running...
Worker 07 Thread Id 16: Done 100ms
Worker 08 Thread Id 17: Done 100ms
Worker 10 Thread Id 18: Done 100ms
Worker 09 Thread Id 14: Done 100ms
All Tasks Completed 304ms

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will notice we spawned &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10 threads&lt;/code&gt; that run the same block of code that takes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;100ms&lt;/code&gt; to finish.  And all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10 threads&lt;/code&gt; completed in a span of just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;105ms&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With tasks however, when we spawned &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10 tasks&lt;/code&gt;, only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4 threads&lt;/code&gt; were created and were reused to complete all our tasks.  And thus it took a span of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;304ms&lt;/code&gt; for all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10 tasks&lt;/code&gt; to complete.&lt;/p&gt;

&lt;p&gt;This goes to show that with tasks, threads and thread pooling are being handled for you.  See &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/standard/threading/the-managed-thread-pool&quot;&gt;The managed thread pool&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;p&gt;Tasks or not, we still need to be aware though of the synchronization primitives and how to use them properly for when our tasks or threads need to share a resource or coordinate interaction.  In my next post or maybe my next demo code I will illustrate the use of these synchronization primitives.  For the meantime you can check &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/standard/threading/overview-of-synchronization-primitives&quot;&gt;Overview of synchronization primitives&lt;/a&gt; for a list of these synchronization primitives in C#.&lt;/p&gt;</content><author><name></name></author><category term="c-sharp" /><summary type="html"></summary></entry></feed>