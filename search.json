[
  
    {
      "title"    : "Key Points To Architecturing Cloud Applications, Part 4: Reliability",
      "category" : "cloud",
      "tags"     : "",
      "url"      : "/tech-blog/2023/01/30/key-points-to-arch-cloud-app-reliab.html",
      "date"     : "2023-01-30 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/cloud-reliab.png\" alt=\"\" /></p>\n\n<p>These are key points from the course I took recently on <a href=\"https://learn.microsoft.com/en-us/training/paths/azure-well-architected-framework/\">Build great solutions with the Microsoft Azure Well-Architected Framework</a>.  I think these points are applicable no matter which cloud provider you use.  This will be a 5-part series on cost, operations, performance, reliability and security considerations in architecturing cloud applications.</p>\n\n<p>Here are the links to the other parts:</p>\n<ul>\n  <li><a href=\"/tech-blog/2022/12/14/key-points-to-arch-cloud-app-cost.html\">Part 1: Cost</a></li>\n  <li><a href=\"/tech-blog/2022/12/16/key-points-to-arch-cloud-app-ops.html\">Part 2: Operations</a></li>\n  <li><a href=\"/tech-blog/2023/01/16/key-points-to-arch-cloud-app-perf.html\">Part 3: Performance</a></li>\n</ul>\n\n<p></p>\n<p><strong>This is Part 4: Reliability</strong> and below are the key points to ensure a highly available cloud architecture.</p>\n\n<h2 id=\"build-a-highly-available-architecture\">Build a highly available architecture</h2>\n\n<p>High availability (HA) ensures your architecture can handle failures.  This availability is often defined by business requirements, service-level objectives, or service-level agreements.</p>\n\n<h3 id=\"evaluate-high-availability-for-your-architecture\">Evaluate high availability for your architecture</h3>\n\n<ul>\n  <li>\n    <p>Determine the service-level agreement of your application</p>\n\n    <ul>\n      <li>\n        <p>A service-level agreement (SLA) is an agreement between a service provider and a service consumer, in which the service provider commits to a standard of service based on measurable metrics and defined responsibilities</p>\n      </li>\n      <li>\n        <p>Service-level objectives (SLO) are the values of target metrics that are used to measure performance, reliability, or availability, e.g.:</p>\n        <ul>\n          <li>Performance of request processing in milliseconds</li>\n          <li>Availability of services in minutes per month</li>\n          <li>Number of requests processed per hour</li>\n        </ul>\n      </li>\n    </ul>\n\n    <p></p>\n    <ul>\n      <li>Identifying SLAs is an important first step when determining the high-availability capabilities that your architecture will require as these will help shape the methods you’ll use to make your application highly available</li>\n    </ul>\n  </li>\n</ul>\n\n<p></p>\n<ul>\n  <li>\n    <p>Evaluate the HA capabilities of the application</p>\n\n    <ul>\n      <li>\n        <p>Perform failure analysis</p>\n      </li>\n      <li>\n        <p>Focus on single points of failure and critical component</p>\n      </li>\n      <li>\n        <p>Evaluate all components including those that provide HA functionalities such as load balancers</p>\n      </li>\n      <li>\n        <p>Determine application’s capability to detect error conditions and to self-heal</p>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<p></p>\n<ul>\n  <li>\n    <p>Evaluate the HA capabilities of dependent applications</p>\n\n    <ul>\n      <li>\n        <p>You’ll also need to understand the provided SLAs of any resource on which your application may depend</p>\n      </li>\n      <li>\n        <p>Dependencies with SLA lower than yours could put you at risk</p>\n      </li>\n      <li>\n        <p>Find ways to meet your SLA while the dependency is unavailable, such as caches and queues</p>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<h3 id=\"high-availability-cloud-services\">High availability cloud services</h3>\n\n<ul>\n  <li>\n    <p>Availability sets</p>\n\n    <ul>\n      <li>\n        <p>Allows VMs that belong to the same application workload to be distributed to prevent simultaneous impact from hardware failure and scheduled maintenance</p>\n      </li>\n      <li>\n        <p>Made up of update domains and fault domains</p>\n\n        <ul>\n          <li>With update domains, you have some servers/VMs (not all) on one rack that remains running during maintenance</li>\n          <li>With fault domains, you have more than 1 rack available such that an outage in one rack will not affect the other racks</li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<p></p>\n<ul>\n  <li>\n    <p>Availability zones</p>\n\n    <ul>\n      <li>\n        <p>With availability zones, you have more than 1 physical datacenter location within a region available for you so you can protect yourself from datacenter outages while retaining presence in a particular region</p>\n      </li>\n      <li>\n        <p>Mutually exclusive with availability sets as you no longer need to define an availability set for your systems</p>\n      </li>\n      <li>\n        <p>You’ll have diversity at the data-center level, and updates will never be performed to multiple availability zones at the same time</p>\n      </li>\n    </ul>\n  </li>\n  <li>\n    <p>Load balancing</p>\n\n    <ul>\n      <li>\n        <p>Load balancers manage how network traffic is distributed across an application</p>\n      </li>\n      <li>\n        <p>For applications that don’t have service discovery built in, load balancing is required for both availability sets and availability zones</p>\n      </li>\n      <li>\n        <p>Types of load balancing:</p>\n\n        <ul>\n          <li>DNS load balancing\n            <ul>\n              <li>Directs users to multiple IP addresses (server machines) for a single domain</li>\n              <li>DNS returns a list of all the servers’ IP addresses in response to a name resolution request</li>\n            </ul>\n          </li>\n        </ul>\n\n        <p></p>\n        <ul>\n          <li>Layer 7 (Application layer) load balancing, such as an application gateway\n            <ul>\n              <li>Provides distribution (e.g. round-robin) of incoming traffic, cookie-based session affinity, URL path-based routing</li>\n            </ul>\n          </li>\n        </ul>\n\n        <p></p>\n        <ul>\n          <li>Layer 4 (Transport layer) load balancing\n            <ul>\n              <li>Provides distribution at the transport layer by using only the TCP and HTTP health-probing options</li>\n              <li>No smart load balancing because the load balancer can’t access request content</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<p></p>\n<ul>\n  <li>\n    <p>Platform as a service (PaaS) HA capabilities</p>\n\n    <ul>\n      <li>\n        <p>Usually comes with high availability built in</p>\n      </li>\n      <li>\n        <p>Using PaaS services is one of the best ways to ensure that your architecture is highly available</p>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<h2 id=\"develop-a-disaster-recovery-strategy\">Develop a disaster recovery strategy</h2>\n\n<p>Disaster recovery is about recovering from high-impact events that result in downtime and data loss.  And the best remedy for a disaster once it has occurred is a well-defined, tested disaster recovery plan and an application that actively supports disaster recovery efforts through its design.</p>\n\n<h3 id=\"create-a-disaster-recovery-plan\">Create a disaster recovery plan</h3>\n\n<p>A disaster recovery plan is a single document that details the procedures that are required to recover from data loss and downtime caused by a disaster and identifies who’s in charge of directing those procedures.</p>\n\n<ul>\n  <li>\n    <p>Risk assessment and process inventory</p>\n\n    <ul>\n      <li>\n        <p>The first step in creating a disaster recovery plan is performing a risk analysis that examines the impact of different kinds of disasters on the application</p>\n      </li>\n      <li>\n        <p>The risk assessment needs to consider every process that can’t afford unlimited downtime, and every category of data that can’t afford unlimited loss</p>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<p></p>\n<ul>\n  <li>\n    <p>Recovery objectives</p>\n\n    <ul>\n      <li>\n        <p>A complete plan needs to specify two critical business requirements for each process implemented by the application:</p>\n\n        <ul>\n          <li>\n            <p>Recovery Point Objective (RPO)</p>\n\n            <ul>\n              <li>\n                <p>The maximum duration of acceptable data loss</p>\n              </li>\n              <li>\n                <p>Measured in units of time, not volume: “30 minutes of data”, “four hours of data”, and so on</p>\n              </li>\n              <li>\n                <p>Is about limiting and recovering from data loss</p>\n              </li>\n            </ul>\n          </li>\n          <li>\n            <p>Recovery Time Objective (RTO)</p>\n\n            <ul>\n              <li>The maximum duration of acceptable downtime</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n\n    <p></p>\n    <ul>\n      <li>\n        <p>Each major process or workload that’s implemented by an app should have separate RPO and RTO values</p>\n      </li>\n      <li>\n        <p>The process of specifying an RPO and RTO is effectively the creation of disaster recovery requirements for your application</p>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<p></p>\n<ul>\n  <li>\n    <p>Detailing recovery steps</p>\n\n    <ul>\n      <li>\n        <p>The final plan should go into detail about exactly what steps should be taken to restore lost data and application connectivity. Steps often include information about:</p>\n\n        <ul>\n          <li>\n            <p>Backups: How often they’re created, where they’re located, and how to restore data from them</p>\n          </li>\n          <li>\n            <p>Data replicas: The number and locations of replicas, the nature and consistency characteristics of the replicated data, and how to switch over to a different replica</p>\n          </li>\n          <li>\n            <p>Deployments: How deployments are executed, how rollbacks occur, and failure scenarios for deployments</p>\n          </li>\n          <li>\n            <p>Infrastructure: On-premises and cloud resources, network infrastructure, and hardware inventory</p>\n          </li>\n          <li>\n            <p>Dependencies: External services that are used by the application, including SLAs and contact information</p>\n          </li>\n          <li>\n            <p>Configuration and notification: Flags or options that can be set to gracefully degrade the application, and services that are used to notify users of application impact</p>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<h3 id=\"design-for-disaster-recovery\">Design for disaster recovery</h3>\n\n<p>Disaster recovery is not an automatic feature. It must be designed, built, and tested.  Designing for disaster recovery has two main concerns:</p>\n\n<ul>\n  <li>\n    <p>Data recovery and replication</p>\n\n    <ul>\n      <li>\n        <p>Unlike backup, which creates long-lived, read-only snapshots of data for use in recovery, replication creates real-time or near-real-time copies of live data</p>\n      </li>\n      <li>\n        <p>Replication is used to mitigate a failed or unreachable data store by executing a failover: changing application configuration to route data requests to a working replica</p>\n      </li>\n      <li>\n        <p>Most fully featured database systems and other data-storage products and services include some kind of replication as a tightly integrated feature due to its functional and performance requirements</p>\n      </li>\n      <li>\n        <p>Many different replication designs exist that place different priorities on data consistency, performance, and cost:</p>\n\n        <ul>\n          <li>\n            <p>Active replication requires updates to take place on multiple replicas simultaneously, guaranteeing consistency at the cost of throughput</p>\n          </li>\n          <li>\n            <p>Passive replication performs synchronization in the background, removing replication as a constraint on application performance, but increasing RPO</p>\n          </li>\n          <li>\n            <p>Active-active or multi-master replication enables multiple replicas to be used simultaneously, enabling load balancing at the cost of complicating data consistency</p>\n          </li>\n          <li>\n            <p>Active-passive replication reserves replicas for live use only during failover</p>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n  <li>\n    <p>Process recovery</p>\n\n    <ul>\n      <li>\n        <p>After a disaster, business data isn’t the only asset that needs recovering</p>\n      </li>\n      <li>\n        <p>Process restoration involves failover to a separate, working deployment of your application</p>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<h3 id=\"test-a-disaster-recovery-plan\">Test a disaster recovery plan</h3>\n\n<ul>\n  <li>\n    <p>Testing the plan is a crucial aspect of disaster recovery to ensure that the directions and explanations are clear and up to date</p>\n  </li>\n  <li>\n    <p>Choose intervals to perform different types and scopes of tests, such as testing backups and failover mechanisms every month, and performing a full-scale disaster recovery simulation every six months</p>\n  </li>\n  <li>\n    <p>Make sure to include your monitoring system in your testing as well</p>\n  </li>\n</ul>\n\n<h2 id=\"protect-your-data-with-backup-and-restore\">Protect your data with backup and restore</h2>\n\n<p>Backup is the final and most powerful line of defense against permanent data loss.</p>\n\n<h3 id=\"establish-backup-and-restoration-requirements\">Establish backup and restoration requirements</h3>\n\n<p>To establish backup requirements for your app, group your application’s data based on the following requirements:</p>\n\n<ul>\n  <li>\n    <p>How much of this type of data can afford to be lost, measured in duration</p>\n  </li>\n  <li>\n    <p>The maximum amount of time a restore of this type of data should require</p>\n  </li>\n  <li>\n    <p>Backup retention requirements: how long and at what frequency do backups need to remain available</p>\n  </li>\n  <li>\n    <p>Don’t confuse archival as archival is the storage of data for long-term preservation and read access</p>\n  </li>\n</ul>\n\n<h3 id=\"cloud-backup-and-restore-capabilities\">Cloud backup and restore capabilities</h3>\n\n<ul>\n  <li>\n    <p>General-purpose backup solution for cloud and on-premises workflows that run on VMs or physical servers</p>\n  </li>\n  <li>\n    <p>Blob storage backup</p>\n  </li>\n  <li>\n    <p>Automatic database backup</p>\n  </li>\n  <li>\n    <p>App service scheduled and manual backup</p>\n  </li>\n</ul>\n\n<h3 id=\"verify-backups-and-test-restore-procedures\">Verify backups and test restore procedures</h3>\n\n<ul>\n  <li>\n    <p>By creating a new deployment of the application, restoring the backup to it, and comparing the state of the two instances</p>\n  </li>\n  <li>\n    <p>Simply performing a comparison of a subset of the backup data with the live data immediately after creating a backup can be enough</p>\n  </li>\n</ul>\n"
    } ,
  
    {
      "title"    : "Key Points To Architecturing Cloud Applications, Part 3: Performance",
      "category" : "cloud",
      "tags"     : "",
      "url"      : "/tech-blog/2023/01/16/key-points-to-arch-cloud-app-perf.html",
      "date"     : "2023-01-16 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/cloud-perf.png\" alt=\"\" /></p>\n\n<p>These are key points from the course I took recently on <a href=\"https://learn.microsoft.com/en-us/training/paths/azure-well-architected-framework/\">Build great solutions with the Microsoft Azure Well-Architected Framework</a>.  I think these points are applicable no matter which cloud provider you use.  This will be a 5-part series on cost, operations, performance, reliability and security considerations in architecturing cloud applications.</p>\n\n<p>Here are the links to the other parts:</p>\n<ul>\n  <li><a href=\"/tech-blog/2022/12/14/key-points-to-arch-cloud-app-cost.html\">Part 1: Cost</a></li>\n  <li><a href=\"/tech-blog/2022/12/16/key-points-to-arch-cloud-app-ops.html\">Part 2: Operations</a></li>\n  <li><a href=\"/tech-blog/2023/01/30/key-points-to-arch-cloud-app-reliab.html\">Part 4: Reliability</a></li>\n</ul>\n\n<p></p>\n<p><strong>This is Part 3: Performance</strong> and below are the key points to ensure your cloud architecture is performing at its best thus providing users with the best experience.</p>\n\n<h2 id=\"use-scaling-up-and-scaling-out-in-your-architecture\">Use scaling up and scaling out in your architecture</h2>\n\n<p>Scaling resources allows your application to meet demands in times of increased load and provides you cost savings during off peak times.  Scaling in the cloud is usually easier than scaling on-premises and this is one of those main reasons of moving into the cloud.</p>\n\n<h3 id=\"scaling-up-or-down\">Scaling up or down</h3>\n\n<ul>\n  <li>\n    <p>When scaling resources for a single instance of a service, such as a virtual machine, you scale up or down</p>\n  </li>\n  <li>\n    <p>You increase or decrease the number of resources in a service, such as the cpu capacity, memory capacity, or storage capacity</p>\n  </li>\n  <li>\n    <p>Example of a cloud service that can be scaled up or down would be a virtual machine, a database service (to increase/decrease database transaction units for example), or an application service.</p>\n  </li>\n</ul>\n\n<h3 id=\"scaling-out-or-in\">Scaling out or in</h3>\n\n<ul>\n  <li>\n    <p>With scaling out and in, the number of instances are adjusted</p>\n  </li>\n  <li>\n    <p>In the infrastructure layer, you can increase and decrease the number of VM instances</p>\n  </li>\n  <li>\n    <p>In a database, you can employ a sharding technique that splits a large database into multiple smaller database and deployed across multiple servers</p>\n  </li>\n  <li>\n    <p>In an application service, if setup in an application farm, you can increase and decrease the number of VMs in the farm.</p>\n  </li>\n</ul>\n\n<h3 id=\"autoscaling\">Autoscaling</h3>\n\n<p>If available, autoscaling allows you to scale your services automatically based on specific metrics like CPU utilization or queue length or schedule.</p>\n\n<h3 id=\"considerations-when-scaling\">Considerations when scaling</h3>\n\n<ul>\n  <li>\n    <p>Startup time of your application can impact how quickly your application can scale</p>\n\n    <ul>\n      <li>You might want to add a lead time when scaling</li>\n    </ul>\n  </li>\n</ul>\n\n<p></p>\n<ul>\n  <li>\n    <p>How your application handles state</p>\n\n    <ul>\n      <li>\n        <p>If an instance is removed the state stored there is lost</p>\n      </li>\n      <li>\n        <p>If an instance is added the state from another instance does not have its state</p>\n      </li>\n      <li>\n        <p>Best to externalize the state to another service such as Redis or a database</p>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<h3 id=\"throttling\">Throttling</h3>\n\n<ul>\n  <li>\n    <p>Sometimes the load on an application is caused by the number of active or concurrent users and the activities being performed</p>\n  </li>\n  <li>\n    <p>Throttling limits the number of requests from a source and this is one way to prevent the application from breaking</p>\n  </li>\n  <li>\n    <p>Used most frequently in applications that expose API endpoints</p>\n  </li>\n</ul>\n\n<h3 id=\"serverless\">Serverless</h3>\n\n<ul>\n  <li>\n    <p>Serverless computing provides a cloud-hosted execution environment that runs your apps/code, but completely abstracts the underlying environment</p>\n  </li>\n  <li>\n    <p>You configure your serverless apps to respond to events</p>\n  </li>\n  <li>\n    <p>Infrastructure isn’t your responsibility</p>\n  </li>\n  <li>\n    <p>Scaling and performance are handled automatically</p>\n  </li>\n  <li>\n    <p>Example of serverless computing is the Azure Functions/AWS Lambda/GCP Cloud Functions</p>\n  </li>\n</ul>\n\n<h3 id=\"containers\">Containers</h3>\n\n<ul>\n  <li>\n    <p>A container is a method of running applications in a virtualized environment at the OS level</p>\n  </li>\n  <li>\n    <p>Containers are lightweight and well suited to scale-out scenarios</p>\n  </li>\n  <li>\n    <p>They’re designed to be created, scaled out, and stopped dynamically as your environment and demands change</p>\n  </li>\n  <li>\n    <p>With containers, you don’t necessarily need to separate VMs for separate workloads</p>\n  </li>\n  <li>\n    <p>Some services that ease the management and scaling of containers</p>\n\n    <ul>\n      <li>\n        <p>Kubernetes Service</p>\n      </li>\n      <li>\n        <p>Cloud specific container management service</p>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<h2 id=\"optimize-network-performance\">Optimize network performance</h2>\n\n<h3 id=\"network-latency\">Network latency</h3>\n\n<ul>\n  <li>\n    <p>Network latency is the time that it takes for data to travel between a source to a destination across a network</p>\n  </li>\n  <li>\n    <p>To improve network performance, we must strive to reduce network latency</p>\n  </li>\n</ul>\n\n<h3 id=\"latency-between-cloud-resources\">Latency between cloud resources</h3>\n\n<ul>\n  <li>\n    <p>Create read-replica of databases in different regions</p>\n  </li>\n  <li>\n    <p>Sync your data between regions</p>\n  </li>\n  <li>\n    <p>Use a globally distributed database</p>\n  </li>\n  <li>\n    <p>Use a caching technology such as Redis</p>\n  </li>\n</ul>\n\n<h3 id=\"latency-between-users-and-cloud-resources\">Latency between users and cloud resources</h3>\n\n<ul>\n  <li>\n    <p>Use a DNS load balancer for endpoint path optimization</p>\n\n    <ul>\n      <li>\n        <p>Can distribute traffic within and across regions</p>\n      </li>\n      <li>\n        <p>Can route users based on a set of criteria:</p>\n        <ul>\n          <li>Priority</li>\n          <li>Weighted</li>\n          <li>Performance (based on network latency)</li>\n          <li>Geographic</li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<p></p>\n<ul>\n  <li>\n    <p>Use a CDN to cache content close to users</p>\n\n    <ul>\n      <li>\n        <p>Using a content delivery network (CDN) can deliver static content such as website pages or image and video assets to users faster</p>\n      </li>\n      <li>\n        <p>You can use CDN to host cached dynamic content but you will need to manage content expiration by setting a time to live (TTL)</p>\n      </li>\n    </ul>\n  </li>\n  <li>\n    <p>Use a connectivity service from on-premises to cloud provider</p>\n\n    <ul>\n      <li>\n        <p>Optimizing network connectivity from your on-premises environment to cloud is also important</p>\n      </li>\n      <li>\n        <p>Internet connection or even site-to-site VPN over the internet might have an impact on network latency for high-throughput architecture</p>\n      </li>\n      <li>\n        <p>A private dedicated connection between your network and the cloud can give a guaranteed performance</p>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<h2 id=\"optimize-storage-performance\">Optimize storage performance</h2>\n\n<h3 id=\"optimize-virtual-machine-storage-performance\">Optimize virtual machine storage performance</h3>\n\n<ul>\n  <li>\n    <p>Some disk options that your cloud provider might provide:</p>\n\n    <ul>\n      <li>\n        <p>Local SSD storage that is included in VM and is local, thus has a high performance but could be lost during maintenance event or a redeployment of the VM</p>\n      </li>\n      <li>\n        <p>Standard storage HDD that is only HDD and only good for dev/test workload</p>\n      </li>\n      <li>\n        <p>Standard storage SSD that has a low latency of an SSD but only good enough for non production use</p>\n      </li>\n      <li>\n        <p>Premium storage SSD that is well suited for those workloads that are going into production</p>\n      </li>\n    </ul>\n  </li>\n  <li>\n    <p>Another way to optimize storage performance is to use a striping technology that spreads disk activity across multiple disks; often seen in high-performance database systems</p>\n  </li>\n</ul>\n\n<h3 id=\"optimize-storage-performance-for-your-application\">Optimize storage performance for your application</h3>\n\n<ul>\n  <li>\n    <p>Caching</p>\n\n    <ul>\n      <li>Integrate a caching layer between your application and your data store</li>\n    </ul>\n  </li>\n</ul>\n\n<p></p>\n<ul>\n  <li>\n    <p>Polyglot persistence</p>\n\n    <ul>\n      <li>\n        <p>Use different data storage technologies such as blob store for your application assets, NoSQL store for user related or created data, and a SQL database for your account data (for example)</p>\n      </li>\n      <li>\n        <p>With polyglot persistence, maintaining data consistency can be a significant challenge</p>\n      </li>\n      <li>\n        <p>A more relaxed approach to consistency is used and is known as eventual consistency</p>\n      </li>\n      <li>\n        <p>Eventual consistency means that replica data stores eventually converge if there are no further writes</p>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<h2 id=\"identify-performance-bottlenecks-in-your-application\">Identify performance bottlenecks in your application</h2>\n\n<h3 id=\"performance-requirements\">Performance requirements</h3>\n\n<ul>\n  <li>\n    <p>Without performance requirements defined, you could keep improving further and further without end to the point that it becomes prohibitively expensive, difficult, and doesn’t have enough business impact to be worthwhile</p>\n  </li>\n  <li>\n    <p>Nonfunctional requirements help you find that point; doesn’t tell you what your app must do but tell you what quality levels it must meet</p>\n  </li>\n  <li>\n    <p>You should discuss requirements with your stakeholders or customers, document them, and communicate them broadly to ensure that everyone agrees on what good performance means</p>\n  </li>\n</ul>\n\n<h3 id=\"performance-monitoring-options-in-the-cloud\">Performance monitoring options in the cloud</h3>\n\n<ul>\n  <li>\n    <p>Infrastructure-level logging and monitoring service that can collect following data:</p>\n\n    <ul>\n      <li>\n        <p>Application monitoring data, which is the data about the performance and functionality of the code you’ve written</p>\n      </li>\n      <li>\n        <p>Guest OS monitoring data</p>\n      </li>\n      <li>\n        <p>Resource monitoring data, which is the data about the operation of a cloud resource</p>\n      </li>\n      <li>\n        <p>Subscription monitoring data (if available)</p>\n      </li>\n      <li>\n        <p>Tenant monitoring data (if available)</p>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<p></p>\n<ul>\n  <li>\n    <p>Log analytics tool</p>\n\n    <ul>\n      <li>\n        <p>Centralized logging</p>\n      </li>\n      <li>\n        <p>You can query and aggregate data across logs</p>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<p></p>\n<ul>\n  <li>\n    <p>Application performance management</p>\n\n    <ul>\n      <li>Using an APM solution to gain a deep understanding of your application and to correlate activity across your application</li>\n    </ul>\n  </li>\n</ul>\n"
    } ,
  
    {
      "title"    : "Key Points To Architecturing Cloud Applications, Part 2: Operations",
      "category" : "cloud",
      "tags"     : "",
      "url"      : "/tech-blog/2022/12/16/key-points-to-arch-cloud-app-ops.html",
      "date"     : "2022-12-16 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/cloud-ops.png\" alt=\"\" /></p>\n\n<p>These are key points from the course I took recently on <a href=\"https://learn.microsoft.com/en-us/training/paths/azure-well-architected-framework/\">Build great solutions with the Microsoft Azure Well-Architected Framework</a>.  I think these points are applicable no matter which cloud provider you use.  This will be a 5-part series on cost, operations, performance, reliability and security considerations in architecturing cloud applications.</p>\n\n<p>Here are the links to the other parts:</p>\n<ul>\n  <li><a href=\"/tech-blog/2022/12/14/key-points-to-arch-cloud-app-cost.html\">Part 1: Cost</a></li>\n  <li><a href=\"/tech-blog/2023/01/16/key-points-to-arch-cloud-app-perf.html\">Part 3: Performance</a></li>\n  <li><a href=\"/tech-blog/2023/01/30/key-points-to-arch-cloud-app-reliab.html\">Part 4: Reliability</a></li>\n</ul>\n\n<p></p>\n<p><strong>This is Part 2: Operations</strong> and below are the key points to ensure smooth operations for your cloud architecture.</p>\n\n<h2 id=\"design-build-and-orchestrate-with-modern-practices\">Design, build, and orchestrate with modern practices</h2>\n\n<h3 id=\"devops\">DevOps</h3>\n\n<ul>\n  <li>\n    <p>Bring development and operation functions together and break down the existing barriers between them in the goal of providing continuous delivery of value to end users</p>\n  </li>\n  <li>\n    <p>Use modern agile tools like Kanban boards, backlogs, dashboards, and scrum boards to help your team get greater visibility into the work that’s planned and work that’s been delivered</p>\n  </li>\n  <li>\n    <p>Use a version-control platform like GitHub that allows a global community of individuals and teams to collaborate on software-development projects</p>\n  </li>\n  <li>\n    <p>Be able to build and test deployments, track issues, and create custom workflows in repositories, like in Github</p>\n  </li>\n</ul>\n\n<h3 id=\"continuous-integration-and-continuous-delivery-cicd\">Continuous Integration and Continuous Delivery (CI/CD)</h3>\n\n<ul>\n  <li>\n    <p>Continuous Integration (CI) is the practice of building and testing code every time a team member commits changes to version control</p>\n  </li>\n  <li>\n    <p>CI helps developers to identify bugs earlier, and it improves software quality since code is checked in, built, and verified more frequently</p>\n  </li>\n  <li>\n    <p>Continuous Delivery (CD) is the process to build, test, configure and deploy from a build environment to a production environment</p>\n  </li>\n  <li>\n    <p>Continuous integration and continuous delivery are often combined into a single pipeline known as CI/CD</p>\n  </li>\n  <li>\n    <p>CI/CD moves code from development to testing to production and should be automated</p>\n  </li>\n  <li>\n    <p>Use tools like GitHub Actions to build workflows that are custom automated processes to build, test, package, release, and deploy code</p>\n  </li>\n</ul>\n\n<h3 id=\"microservices\">Microservices</h3>\n\n<ul>\n  <li>\n    <p>Employing microservices architecture that consists of services that are small, independent, and loosely coupled</p>\n  </li>\n  <li>\n    <p>You can deploy and scale each service independently</p>\n  </li>\n  <li>\n    <p>Because each service is independent, services can use different technology stacks, frameworks, and SDKs</p>\n  </li>\n  <li>\n    <p>It’s common to see services rely on REST calls for service-to-service communication by using well-defined APIs</p>\n  </li>\n</ul>\n\n<h3 id=\"environment-consistency\">Environment consistency</h3>\n\n<ul>\n  <li>\n    <p>A key piece of ensuring that you can develop and deploy applications with confidence is making sure that your environments are consistent between development, test, and production</p>\n  </li>\n  <li>\n    <p>Including your environment definitions as part of your deployment will help ensure that your code is built and deployed on a consistent, end-to-end infrastructure</p>\n  </li>\n</ul>\n\n<h2 id=\"use-monitoring-and-analytics-to-gain-operational-insights\">Use monitoring and analytics to gain operational insights</h2>\n\n<p>Monitoring is the act of collecting and analyzing data to determine the performance, health, and availability of your business applications and the resources on which they depend.</p>\n\n<h3 id=\"activity-logging\">Activity logging</h3>\n\n<ul>\n  <li>\n    <p>Collect detailed information about what’s happening with your cloud resources, such as:</p>\n\n    <ul>\n      <li>Who attached a disk to this virtual machine?</li>\n      <li>When was this machine shut down?</li>\n      <li>Who changed the load balancer configuration?</li>\n      <li>Why did the autoscale operation on my Virtual Machine Scale Set fail?</li>\n    </ul>\n  </li>\n</ul>\n\n<p></p>\n<ul>\n  <li>Usually retained for a set period of time but should include option to archive or send to another sink for longer retention and further analysis</li>\n</ul>\n\n<h3 id=\"health-of-cloud-services\">Health of cloud services</h3>\n\n<ul>\n  <li>Use a health tool to identify any issues with cloud core services that might affect your application</li>\n</ul>\n\n<h3 id=\"metrics-and-diagnostics\">Metrics and diagnostics</h3>\n\n<ul>\n  <li>\n    <p>Use diagnostics to troubleshoot issues</p>\n  </li>\n  <li>\n    <p>Use metrics to provide performance statistics for different resources, and even the operating system inside a virtual machine</p>\n  </li>\n  <li>\n    <p>create alerts based on these diagnostics and metrics</p>\n  </li>\n</ul>\n\n<h3 id=\"recommendations-on-best-practices\">Recommendations on best practices</h3>\n\n<ul>\n  <li>If available, take advantage of a tool that provides guidance and recommendations that would result in greater availability, reduced cost, or improved security on your cloud resources</li>\n</ul>\n\n<h3 id=\"infrastructure-and-application-monitoring\">Infrastructure and application monitoring</h3>\n\n<ul>\n  <li>\n    <p>When you’re designing a monitoring strategy, it’s important to include every component in the application chain so you can correlate events across services and resources</p>\n  </li>\n  <li>\n    <p>Pull log/analytics information from database server</p>\n  </li>\n  <li>\n    <p>Configure services to send log/analytics</p>\n  </li>\n  <li>\n    <p>Install agents on VMs to send log/analytics</p>\n  </li>\n  <li>\n    <p>Implement or install an instrumentation package into your application</p>\n  </li>\n  <li>\n    <p>Send these data to a centralized logging/analytics tool</p>\n  </li>\n</ul>\n\n<h2 id=\"use-automation-to-reduce-effort-and-error\">Use automation to reduce effort and error</h2>\n\n<p>Using automation to manage the infrastructure ensures that each system is configured properly, with no variance between systems</p>\n\n<h3 id=\"infrastructure-as-code\">Infrastructure as code</h3>\n\n<ul>\n  <li>\n    <p>Infrastructure as code (IaC) is the management of infrastructure (such as networks, virtual machines, load balancers, and connection topology) in a descriptive model, using a versioning system that’s similar to what’s used for source code</p>\n  </li>\n  <li>\n    <p>IaC is a key DevOps practice, and it’s often used in conjunction with continuous delivery</p>\n  </li>\n  <li>\n    <p>Imperative automation</p>\n\n    <ul>\n      <li>Automating infrastructure through a scripting language or SDK usually done via command line interface (CLI) or a scripting shell</li>\n    </ul>\n  </li>\n</ul>\n\n<p></p>\n<ul>\n  <li>\n    <p>Declarative automation</p>\n\n    <ul>\n      <li>Automating infrastructure through the use of template files, JSON-structured files being the commonly used files</li>\n    </ul>\n  </li>\n</ul>\n\n<h3 id=\"vm-images-vs-post-deployment-configuration\">VM images vs. post-deployment configuration</h3>\n\n<ul>\n  <li>\n    <p>For many virtual machine deployments, likely there’s additional configuration that you need to take care of before the VM can actually serve its intended purpose, e.g. installation and configuration of the actual workload</p>\n  </li>\n  <li>\n    <p>There are two common strategies that you can use for the configuration work</p>\n\n    <ul>\n      <li>\n        <p>Custom images</p>\n\n        <ul>\n          <li>\n            <p>Working with custom images can speed up your overall deployment time, because as soon as the virtual machine is deployed and running, no additional configuration would be needed</p>\n          </li>\n          <li>\n            <p>But you’ll need to ensure there’s a process to handle image updates, security patches, and inventory management of the images themselves</p>\n          </li>\n        </ul>\n      </li>\n    </ul>\n\n    <p></p>\n    <ul>\n      <li>\n        <p>Post-deployment scripting</p>\n\n        <ul>\n          <li>\n            <p>Leverages a basic base image, then relies on scripting or a configuration-management platform to perform the necessary configuration after the VM is deployed</p>\n          </li>\n          <li>\n            <p>But build times can be extended that can impact how quickly you can scale your VMs</p>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<h3 id=\"automation-of-operational-tasks\">Automation of operational tasks</h3>\n\n<ul>\n  <li>\n    <p>Once your solutions are up and running, there are ongoing operational activities that you can also automate, such as:</p>\n\n    <ul>\n      <li>\n        <p>Periodically searching for orphaned disks</p>\n      </li>\n      <li>\n        <p>Installing the latest security patches on VMs</p>\n      </li>\n      <li>\n        <p>Searching for and shutting down virtual machines in off hours</p>\n      </li>\n      <li>\n        <p>Running daily reports and producing a dashboard to report to senior management</p>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<h3 id=\"automate-development-environments\">Automate development environments</h3>\n\n<ul>\n  <li>Using automation to deploy VMs with all of the correct tools and repositories that your developers need</li>\n</ul>\n\n<h2 id=\"testing-strategies-for-your-application\">Testing strategies for your application</h2>\n\n<p>If automation gives DevOps the required speed and agility to deploy software quickly, only through extensive testing will those deployments achieve the required reliability that customers demand.</p>\n\n<p>Testing should occur on both application code and infrastructure code, and they should both be subject to the same quality controls.</p>\n\n<h3 id=\"automated-testing\">Automated Testing</h3>\n\n<ul>\n  <li>\n    <p>Unit Testing</p>\n\n    <ul>\n      <li>Unit tests are tests typically run by each new version of code that’s committed into your version-control system</li>\n    </ul>\n  </li>\n</ul>\n\n<p></p>\n<ul>\n  <li>\n    <p>Smoke Testing</p>\n\n    <ul>\n      <li>\n        <p>Smoke tests are more exhaustive than unit tests, but still not as much as integration tests</p>\n      </li>\n      <li>\n        <p>They verify that each component can be correctly built, and each component meets your criteria for expected functionality and performance</p>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<p></p>\n<ul>\n  <li>\n    <p>Integration Testing</p>\n\n    <ul>\n      <li>\n        <p>Integration testing determines whether your components can interact with each other as they should</p>\n      </li>\n      <li>\n        <p>They usually take longer than smoke testing, and consequently they’re sometimes executed less frequently</p>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<h3 id=\"manual-testing\">Manual Testing</h3>\n\n<ul>\n  <li>\n    <p>Acceptance Testing</p>\n\n    <ul>\n      <li>\n        <p>Blue/Green deployments</p>\n\n        <ul>\n          <li>When deploying a new application version, you can deploy it in parallel to the existing one</li>\n        </ul>\n      </li>\n    </ul>\n\n    <p></p>\n    <ul>\n      <li>\n        <p>Canary releases</p>\n\n        <ul>\n          <li>In this scenario, we’re talking about releasing functionality (via feature flags), and not necessarily about deploying a new version of the application</li>\n        </ul>\n      </li>\n    </ul>\n\n    <p></p>\n    <ul>\n      <li>\n        <p>A/B testing</p>\n\n        <ul>\n          <li>Similar to canary release testing, but while canary releases focus on mitigating risk, A/B testing focuses on evaluating the effectiveness of two versions of a functionality</li>\n        </ul>\n      </li>\n    </ul>\n\n    <p></p>\n    <ul>\n      <li>Consider collecting data on how your users are using your application</li>\n    </ul>\n  </li>\n</ul>\n\n<p></p>\n<ul>\n  <li>\n    <p>Stress tests</p>\n\n    <ul>\n      <li>\n        <p>Test whether your application and infrastructure code will both be able to adapt to changing load conditions</p>\n      </li>\n      <li>\n        <p>It’s critical that you monitor all the components of the system in order to identify whether there are any scale limitations</p>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<p></p>\n<ul>\n  <li>\n    <p>Fault injection</p>\n\n    <ul>\n      <li>\n        <p>Introducing faults in the underlying infrastructure and observing how your application behaves is fundamental for increasing the trust in your redundancy mechanisms, making it resilient to infrastructure failures</p>\n      </li>\n      <li>\n        <p>Can use automated frameworks for this or use a more controlled manual way</p>\n      </li>\n      <li>\n        <p>Possibly adopt chaos engineering where you purposefully make key pieces of infrastructure unavailable</p>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<p></p>\n<ul>\n  <li>\n    <p>Security tests</p>\n\n    <ul>\n      <li>\n        <p>Routinely test your application for security vulnerabilities</p>\n      </li>\n      <li>\n        <p>Can include automated security scans</p>\n      </li>\n      <li>\n        <p>Can also include red team exercises, where security teams attempt to compromise your application</p>\n      </li>\n    </ul>\n  </li>\n</ul>\n"
    } ,
  
    {
      "title"    : "Key Points To Architecturing Cloud Applications, Part 1: Cost",
      "category" : "cloud",
      "tags"     : "",
      "url"      : "/tech-blog/2022/12/14/key-points-to-arch-cloud-app-cost.html",
      "date"     : "2022-12-14 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/cloud-cost.png\" alt=\"\" /></p>\n\n<p>These are key points from the course I took recently on <a href=\"https://learn.microsoft.com/en-us/training/paths/azure-well-architected-framework/\">Build great solutions with the Microsoft Azure Well-Architected Framework</a>.  I think these points are applicable no matter which cloud provider you use.  This will be a 5-part series on cost, operations, performance, reliability and security considerations on architecturing cloud applications.</p>\n\n<p>Here are the links to the other parts:</p>\n<ul>\n  <li><a href=\"/tech-blog/2022/12/16/key-points-to-arch-cloud-app-ops.html\">Part 2: Operations</a></li>\n  <li><a href=\"/tech-blog/2023/01/16/key-points-to-arch-cloud-app-perf.html\">Part 3: Performance</a></li>\n  <li><a href=\"/tech-blog/2023/01/30/key-points-to-arch-cloud-app-reliab.html\">Part 4: Reliability</a></li>\n</ul>\n\n<p></p>\n<p><strong>This is Part 1: Cost</strong> and below are the key points to optimize cost for your cloud architecture.</p>\n\n<h2 id=\"plan-and-estimate-your-cloud-costs\">Plan and estimate your cloud costs</h2>\n\n<p>Like which services to select, which service tier or virtual machine (VM) size to choose, do you provision VMs for your workload?, or take advantage of higher-level (application) services that can reduce operational costs (e.g. Azure Functions/AWS Lambda/GCP Cloud Functions)</p>\n\n<ul>\n  <li>\n    <p>Make sure to capture business and technical requirements</p>\n  </li>\n  <li>\n    <p>Use pricing calculator from the cloud provider</p>\n  </li>\n  <li>\n    <p>Include future investments since no architecture is static</p>\n  </li>\n  <li>\n    <p>Organize resources into resource groups to enable control, reporting, and attribution of costs throughout your environment, e.g. to report on usage by product, business unit, or project</p>\n  </li>\n  <li>\n    <p>Budget for education to ensure your staff is properly trained to build and maintain resource on cloud</p>\n  </li>\n</ul>\n\n<h2 id=\"provision-with-optimization\">Provision with optimization</h2>\n\n<h3 id=\"select-appropriate-service-tiers-and-sizes\">Select appropriate service tiers and sizes</h3>\n\n<ul>\n  <li>\n    <p>Carefully evaluate workload/resource requirements for your application</p>\n  </li>\n  <li>\n    <p>How much CPU, memory and storage is required</p>\n  </li>\n</ul>\n\n<h3 id=\"pay-only-for-consumption\">Pay only for consumption</h3>\n\n<ul>\n  <li>Pay for only the amount of transactions, CPU time, or run time of your application</li>\n</ul>\n\n<h3 id=\"use-spot-instances-for-low-priority-workloads\">Use spot instances for low-priority workloads</h3>\n\n<ul>\n  <li>\n    <p>Take advantage of unused capacity on the cloud provider at a significant cost savings</p>\n  </li>\n  <li>\n    <p>Best for batch processing jobs and the like</p>\n  </li>\n</ul>\n\n<h3 id=\"use-managed-services-when-possible\">Use managed services when possible</h3>\n\n<ul>\n  <li>\n    <p>This avoids managing the underlying infrastructure or lower-level services</p>\n  </li>\n  <li>\n    <p>Managed services are the application and database services</p>\n  </li>\n</ul>\n\n<h2 id=\"take-advantage-of-reserved-instances\">Take advantage of reserved instances</h2>\n\n<ul>\n  <li>\n    <p>Committing yourself to 1 year or multi-year plans on multiple products instead of going for pay-for-what-you-use cost model might save you more</p>\n  </li>\n  <li>\n    <p>Best for consistent resource usage</p>\n  </li>\n</ul>\n\n<h2 id=\"use-monitoring-and-analytics-to-gain-cost-insights\">Use monitoring and analytics to gain cost insights</h2>\n\n<p>This ensures costs aren’t growing out of control and detects areas to improve efficiency.  Resource demands will shift over time and cloud services will evolve.</p>\n\n<h3 id=\"track-your-cloud-spend\">Track your cloud spend</h3>\n\n<ul>\n  <li>Track where your costs are going and how they’re allocated across your resources</li>\n</ul>\n\n<h3 id=\"conduct-cost-reviews\">Conduct cost reviews</h3>\n\n<ul>\n  <li>Regularly check your costs to track your cloud spending</li>\n</ul>\n\n<h3 id=\"respond-to-cost-alerts\">Respond to cost alerts</h3>\n\n<ul>\n  <li>Configure alerts that are based on spending, such as alerts on budget or department spending quota</li>\n</ul>\n\n<h3 id=\"report-anomalies\">Report anomalies</h3>\n\n<ul>\n  <li>Active engagement on cost can ensure that you identify a potential for cost overrun before it becomes problematic</li>\n</ul>\n\n<h2 id=\"maximize-efficiency-of-cloud-spend\">Maximize efficiency of cloud spend</h2>\n\n<p>By determining whether the increase is the result of natural, efficient growth, or whether the cost can be reduced by improving efficiency with the organization’s cloud resources.  But make sure maximizing efficiency doesn’t negatively affect the performance of your system (e.g. running a system at 100% utilization runs the risk of introducing performance issues)</p>\n\n<h3 id=\"optimize-iaas-costs\">Optimize IaaS costs</h3>\n\n<ul>\n  <li>\n    <p>Compute</p>\n\n    <ul>\n      <li>\n        <p>Choose a smaller size for the virtual machine instance</p>\n      </li>\n      <li>\n        <p>Reduce the number of hours a virtual machine runs (e.g. implementing shutdown schedules)</p>\n      </li>\n      <li>\n        <p>Use discounts for the compute costs if available</p>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<p></p>\n<ul>\n  <li>\n    <p>VM disk storage</p>\n\n    <ul>\n      <li>If performance is not required, go for a standard storage instead</li>\n    </ul>\n  </li>\n</ul>\n\n<h3 id=\"optimize-paas-costs\">Optimize PaaS costs</h3>\n\n<ul>\n  <li>\n    <p>Optimize database costs</p>\n\n    <ul>\n      <li>\n        <p>Single database server vs elastic pool of databases</p>\n      </li>\n      <li>\n        <p>Using elastic pool makes sense for multiple databases that have unpredictable bursts or spikes in activity because database transaction units (DTUs) or virtual cores (vCores) are shared among the databases in the pool, in essence you are provisioning resources for the entire pool</p>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<p></p>\n<ul>\n  <li>\n    <p>Optimize blob storage costs</p>\n\n    <ul>\n      <li>\n        <p>Blob storage is a good place to store all your unstructured data that can be accessed in massive scale</p>\n      </li>\n      <li>\n        <p>Take advantage of discounts based on access tier if available: does your data need to be accessed often, infrequently or rarely and explore options to move data from temporary storage to a more permanent storage</p>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<p></p>\n<ul>\n  <li>\n    <p>Consumption pricing models</p>\n\n    <ul>\n      <li>\n        <p>Moving to pay-for-what-you-use model can save you money</p>\n      </li>\n      <li>\n        <p>Services like Azure Functions/AWS Lambda/GCP Cloud Functions are billed on number of executions, length of execution time, and the amount of memory used</p>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<h2 id=\"links-to-architecture-from-azure-aws-and-google-cloud\">Links to architecture from Azure, AWS, and Google Cloud</h2>\n<ul>\n  <li><a href=\"https://learn.microsoft.com/en-us/azure/architecture/framework/\">Microsoft Azure Well-Architected Framework</a></li>\n  <li><a href=\"https://aws.amazon.com/architecture/well-architected\">AWS Well-Architected</a></li>\n  <li><a href=\"https://cloud.google.com/architecture/framework\">Google Cloud Architecture Framework</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "Ways Developer Can Secure An ASP.NET Application (Redux 2022)",
      "category" : "asp-net",
      "tags"     : "",
      "url"      : "/tech-blog/2022/12/13/securing-asp-net-2022.html",
      "date"     : "2022-12-13 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/secureaspnetlogo.png\" alt=\"\" /></p>\n\n<p>Updating my post back in 2015 <a href=\"/tech-blog/2015/11/02/ways-developer-can-secure-an-asp-net-application-part-1.html\">here</a> for year 2022.</p>\n\n<h2 id=\"cross-site-scripting-xss\">Cross-Site Scripting (XSS)</h2>\n\n<ul>\n  <li>\n    <p>According to <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP’s definition of XSS</a>, XSS is a type of injection that occurs when a web application uses input from a user within the output it generates without validating or encoding it</p>\n  </li>\n  <li>\n    <p>To avoid XSS in ASP.NET, use <a href=\"https://learn.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-7.0#expression-encoding\">Razor’s expression syntax</a> with the <code class=\"language-plaintext highlighter-rouge\">@</code> symbol preceeding variable names, e.g. <code class=\"language-plaintext highlighter-rouge\">@InputString</code>, as this will escape HTML characters in the input string by default</p>\n\n    <p>For example the following code:</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  @(\"&lt;span&gt;Hello World&lt;/span&gt;\")\n</code></pre></div>    </div>\n\n    <p>will render the following HTML:</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  &amp;lt;span&amp;gt;Hello World&amp;lt;/span&amp;gt;\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>Use the <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.web.httputility.htmlencode?view=net-7.0\">HttpUtility.HtmlEncode()</a> function inside your Razor code:</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  &lt;%= HttpUtility.HtmlEncode(UserInput) %&gt;\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>Avoid using <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.web.mvc.htmlhelper.raw?view=aspnet-mvc-5.2\">HtmlHelper.Raw()</a>, unless you validate and sanitize the input string variable</p>\n  </li>\n</ul>\n\n<h2 id=\"same-origin-policy-and-cross-origin-resource-sharing-cors\">Same Origin Policy and Cross Origin Resource Sharing (CORS)</h2>\n\n<ul>\n  <li>\n    <p>According to <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#:~:text=The%20same%2Dorigin%20policy%20is,documents%2C%20reducing%20possible%20attack%20vectors.\">MDN’s definition of same origin policy</a>, same origin policy restricts how a document or script loaded by one origin can interact with a resource from another origin</p>\n  </li>\n  <li>\n    <p>2 URLs have different origin if any of the following is different:</p>\n    <ul>\n      <li>protocol (<code class=\"language-plaintext highlighter-rouge\">http</code> vs <code class=\"language-plaintext highlighter-rouge\">https</code>)</li>\n      <li>domain (<code class=\"language-plaintext highlighter-rouge\">https://my-site.com</code> vs <code class=\"language-plaintext highlighter-rouge\">https://www.my-site.com</code>)</li>\n      <li>port (<code class=\"language-plaintext highlighter-rouge\">:443</code> vs <code class=\"language-plaintext highlighter-rouge\">:5000</code>)</li>\n    </ul>\n  </li>\n</ul>\n\n<p></p>\n<ul>\n  <li>\n    <p>CORS on the other hand, according to <a href=\"https://owasp.org/www-community/attacks/CORS_OriginHeaderScrutiny\">OWASP’s definition of CORS</a>, allows a web application to expose resources to all or restricted domain and allows a web client to make AJAX request for resource on other domain than its source domain</p>\n  </li>\n  <li>\n    <p>The process involves the browser sending the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin\">Origin</a> HTTP request header (with origin URL as its value) for cross domain request to the server.  The server then sending the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin\">Access-Control-Allow-Origin</a> HTTP response header (with origin URL as its value) to allow CORS.  Then lastly the browser checking if URL in <code class=\"language-plaintext highlighter-rouge\">Access-Control-Allow-Origin</code> header matches the origin URL.</p>\n  </li>\n  <li>\n    <p>To enable CORS per endpoint in ASP.NET:</p>\n    <ul>\n      <li>Use <a href=\"https://learn.microsoft.com/en-us/aspnet/core/security/cors?view=aspnetcore-7.0#attr\">[EnableCors]</a> attribute at the controller level</li>\n      <li>And call <a href=\"https://learn.microsoft.com/en-us/aspnet/web-api/overview/security/enabling-cross-origin-requests-in-web-api#enable-cors\">CorsHttpConfigurationExtensions.EnableCors()</a> on startup/configuration</li>\n    </ul>\n  </li>\n</ul>\n\n<p></p>\n<ul>\n  <li>\n    <p>You can enable CORS in <code class=\"language-plaintext highlighter-rouge\">web.config</code> using <a href=\"https://learn.microsoft.com/en-us/iis/configuration/system.webserver/httpprotocol/customheaders/\">&lt;customHeaders&gt;</a> but this will apply for all requests:</p>\n\n    <div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"nt\">&lt;system.webServer&gt;</span>\n      <span class=\"nt\">&lt;httpProtocol&gt;</span>\n          <span class=\"nt\">&lt;customHeaders&gt;</span>\n              <span class=\"nt\">&lt;add</span> <span class=\"na\">name=</span><span class=\"s\">\"Access-Control-Allow-Origin\"</span> <span class=\"na\">value=</span><span class=\"s\">\"https://...\"</span> <span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;/customHeaders&gt;</span>\n      <span class=\"nt\">&lt;/httpProtocol&gt;</span>\n  <span class=\"nt\">&lt;/system.webServer&gt;</span>\n</code></pre></div>    </div>\n  </li>\n</ul>\n\n<h2 id=\"sql-injection\">SQL Injection</h2>\n\n<ul>\n  <li>\n    <p>Avoid concatenating user input to SQL query statements</p>\n  </li>\n  <li>\n    <p>Use parameterized query or prepared statements</p>\n\n    <p>In your SQL query use <a href=\"https://learn.microsoft.com/en-us/sql/t-sql/language-elements/variables-transact-sql?view=sql-server-ver16\">SQL variables</a>:</p>\n\n    <div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">product</span> <span class=\"k\">WHERE</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"o\">@</span><span class=\"n\">id</span>\n</code></pre></div>    </div>\n\n    <p>And in your ASP.NET code, use <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlcommand.parameters?view=dotnet-plat-ext-7.0\">SQL command parameters</a>:</p>\n\n    <div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">Parameters</span><span class=\"p\">.</span><span class=\"nf\">AddWithValue</span><span class=\"p\">(</span><span class=\"s\">\"@id\"</span><span class=\"p\">,</span> <span class=\"n\">id</span><span class=\"p\">);</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>Additionally validate user input</p>\n  </li>\n  <li>\n    <p>Avoid execution of raw SQL even in Entity Framework 6 (EF6) - EF6 calls such as as <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.data.entity.database.sqlquery?view=entity-framework-6.2.0\">Database.SqlQuery()</a> and <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.data.entity.database.executesqlcommand?view=entity-framework-6.2.0\">Database.ExecuteSqlCommand()</a></p>\n  </li>\n  <li>\n    <p>For Entity Framework Core (EF Core), see <a href=\"https://learn.microsoft.com/en-us/ef/core/querying/sql-queries#passing-parameters\">Passing parameters in EF Core</a></p>\n  </li>\n  <li>\n    <p>Also, avoid returning <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.iqueryable?view=net-7.0\">IQueryable</a> in EF and instead call <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.tolist?view=net-7.0\">ToList()</a> before returning results</p>\n  </li>\n</ul>\n\n<h2 id=\"cross-site-request-forgery-csrf\">Cross-Site Request Forgery (CSRF)</h2>\n\n<ul>\n  <li>\n    <p>According to <a href=\"https://owasp.org/www-community/attacks/csrf\">OWASP’s definition of CSRF</a>, CSRF forces an end user to execute unwanted actions on a web application in which they are currently authenticated.</p>\n  </li>\n  <li>\n    <p>An example of CSRF is luring a user to visit the attacker’s site where the attacker is able to send an authenticated HTTP request to the server being attacked that the user has previously logged in</p>\n  </li>\n  <li>\n    <p>To prevent CSRF in ASP.NET, antiforgery tokens are used and they work because the malicious page cannot read the user’s tokens, due to same-origin policies</p>\n\n    <p>Use <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.web.mvc.htmlhelper.antiforgerytoken?view=aspnet-mvc-5.2\">HtmlHelper.AntiForgeryToken()</a> to add antiforgery token to a <code class=\"language-plaintext highlighter-rouge\">&lt;form&gt;</code> element:</p>\n\n    <div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"nf\">@using</span> <span class=\"p\">(</span><span class=\"n\">Html</span><span class=\"p\">.</span><span class=\"nf\">BeginForm</span><span class=\"p\">(</span><span class=\"s\">\"DeleteProduct\"</span><span class=\"p\">,</span> <span class=\"s\">\"Admin\"</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n      <span class=\"n\">@Html</span><span class=\"p\">.</span><span class=\"nf\">AntiForgeryToken</span><span class=\"p\">()</span>\n      <span class=\"p\">...</span>\n  <span class=\"p\">}</span>\n</code></pre></div>    </div>\n\n    <p>And add the <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.validateantiforgerytokenattribute?view=aspnetcore-7.0\">[ValidateAntiForgeryToken]</a> attribute to the controller action:</p>\n\n    <div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"p\">[</span><span class=\"n\">HttpPost</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"n\">ValidateAntiForgeryToken</span><span class=\"p\">]</span>\n  <span class=\"k\">public</span> <span class=\"n\">ActionResult</span> <span class=\"nf\">DeleteProduct</span><span class=\"p\">(...)</span>\n  <span class=\"p\">{</span>\n      <span class=\"p\">...</span>\n  <span class=\"p\">}</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>For ASP.NET Core, see <a href=\"https://learn.microsoft.com/en-us/aspnet/core/security/anti-request-forgery?view=aspnetcore-7.0\">Prevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core</a></p>\n  </li>\n</ul>\n\n<h2 id=\"webconfig\">Web.config</h2>\n\n<ul>\n  <li>\n    <p>ASP.NET or specifically IIS by default forbids downloading the <code class=\"language-plaintext highlighter-rouge\">web.config</code> file via HTTP as this is configured in it’s config under <a href=\"https://learn.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/bya7fh0a(v=vs.100)\">&lt;system.web&gt;/&lt;httpHandlers&gt;</a>:</p>\n\n    <div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"nt\">&lt;system.web&gt;</span>\n      <span class=\"nt\">&lt;httpHandlers&gt;</span>\n          <span class=\"nt\">&lt;add</span> <span class=\"na\">verb=</span><span class=\"s\">\"*\"</span> <span class=\"na\">path=</span><span class=\"s\">\"*.config\"</span> <span class=\"na\">type=</span><span class=\"s\">\"System.Web.HttpForbiddenHandler\"</span> <span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/httpHandlers&gt;</span>\n  <span class=\"nt\">&lt;/system.web&gt;</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>But still it should not contain sensitive information as this <code class=\"language-plaintext highlighter-rouge\">web.config</code> file can be stored in the project’s source control repository</p>\n  </li>\n  <li>\n    <p>You can store your app settings and connections strings in an external file which you can refer to in your <code class=\"language-plaintext highlighter-rouge\">web.config</code> (see <a href=\"https://learn.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/appsettings/appsettings-element-for-configuration#attribute\">&lt;appSettings&gt; file</a> attribute and <a href=\"https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/connection-strings-and-configuration-files\">&lt;connectionStrings&gt; configSource</a>  attribute):</p>\n  </li>\n</ul>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"nt\">&lt;appSettings</span> <span class=\"na\">file=</span><span class=\"s\">\"secrets.appSettings.config\"</span><span class=\"nt\">&gt;</span>\n        ...\n    <span class=\"nt\">&lt;/appSettings&gt;</span>\n</code></pre></div></div>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"nt\">&lt;connectionStrings</span> <span class=\"na\">configSource=</span><span class=\"s\">\"secrets.connectionStrings.config\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;/connectionStrings&gt;</span>\n</code></pre></div></div>\n\n<ul>\n  <li>\n    <p>Encrypt sections of your <code class=\"language-plaintext highlighter-rouge\">web.config</code> file (see <a href=\"https://learn.microsoft.com/en-us/previous-versions/aspnet/zhhddkxy(v=vs.100)\">Encrypting and Decrypting Configuration Sections</a>)</p>\n  </li>\n  <li>\n    <p>If you are using a cloud provider, use the <a href=\"https://learn.microsoft.com/en-us/azure/key-vault/general/basic-concepts\">Key Vault in Azure</a> or <a href=\"https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html\">Secrets Manager in AWS</a> to store sensitive information</p>\n  </li>\n</ul>\n\n<h2 id=\"password-hashing\">Password Hashing</h2>\n\n<ul>\n  <li>\n    <p>You can use <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.rfc2898derivebytes?view=net-7.0\">Rfc2898DeriveBytes</a> to hash password</p>\n  </li>\n  <li>\n    <p>Or use <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.identity.passwordhasher-1?view=aspnetcore-7.0\">ASP.NET Core Identity PasswordHasher</a> (see <a href=\"https://andrewlock.net/exploring-the-asp-net-core-identity-passwordhasher/\">Exploring the ASP.NET Core Identity PasswordHasher</a>)</p>\n  </li>\n</ul>\n\n<h2 id=\"cookies\">Cookies</h2>\n\n<ul>\n  <li>Secure cookies in ASP.NET code (see <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.web.httpcookie?view=netframework-4.8\">HttpCookie Class</a>) by setting the following properties:\n    <ul>\n      <li><a href=\"https://owasp.org/www-community/controls/SecureCookieAttribute\">Secure</a> - set to <code class=\"language-plaintext highlighter-rouge\">true</code> to only transmit cookie using SSL, that is over HTTPS</li>\n      <li><a href=\"https://owasp.org/www-community/HttpOnly\">HttpOnly</a> - set to <code class=\"language-plaintext highlighter-rouge\">true</code> to prevent client-side script from accessing the cookie</li>\n      <li><a href=\"https://owasp.org/www-community/SameSite\">SameSite</a> - set to <code class=\"language-plaintext highlighter-rouge\">strict</code> to prevent cookie from being sent in all cross-site browsing contexts or set to <code class=\"language-plaintext highlighter-rouge\">lax</code> for a more balanced approach between security and usability</li>\n    </ul>\n\n    <p></p>\n    <div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"n\">cookie</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">HttpCookie</span><span class=\"p\">(</span><span class=\"s\">\"NewCookie\"</span><span class=\"p\">);</span>\n  <span class=\"n\">cookie</span><span class=\"p\">.</span><span class=\"n\">Secure</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">;</span>\n  <span class=\"n\">cookie</span><span class=\"p\">.</span><span class=\"n\">HttpOnly</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">;</span>\n  <span class=\"n\">cookie</span><span class=\"p\">.</span><span class=\"n\">SameSite</span> <span class=\"p\">=</span> <span class=\"n\">SameSiteMode</span><span class=\"p\">.</span><span class=\"n\">Strict</span> <span class=\"c1\">// or SameSiteMode.Lax</span>\n</code></pre></div>    </div>\n  </li>\n</ul>\n\n<h2 id=\"sessions\">Sessions</h2>\n\n<ul>\n  <li>\n    <p>Secure sessions by setting properties in <code class=\"language-plaintext highlighter-rouge\">web.config</code> under <code class=\"language-plaintext highlighter-rouge\">&lt;system.web&gt;/&lt;sessionState&gt;</code> (see <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.web.configuration.sessionstatesection?view=netframework-4.8\">SessionStateSection Class</a>) and <code class=\"language-plaintext highlighter-rouge\">&lt;system.web&gt;/&lt;httpCookies&gt;</code> (see <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.web.configuration.httpcookiessection?view=netframework-4.8\">HttpCookiesSection Class</a>):</p>\n\n    <div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"nt\">&lt;system.web&gt;</span>\n      <span class=\"nt\">&lt;sessionState</span>\n          <span class=\"na\">cookieless=</span><span class=\"s\">\"false\"</span>\n          <span class=\"na\">regenerateExpiredSessionId=</span><span class=\"s\">\"false\"</span>\n          <span class=\"na\">timeout=</span><span class=\"s\">\"20\"</span>\n      <span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;httpCookies</span>\n          <span class=\"na\">httpOnlyCookies=</span><span class=\"s\">\"true\"</span>\n          <span class=\"na\">requireSSL=</span><span class=\"s\">\"true\"</span>\n          <span class=\"na\">sameSite=</span><span class=\"s\">\"Strict\"</span>\n      <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/system.web&gt;</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>Setting <code class=\"language-plaintext highlighter-rouge\">&lt;sessionState&gt; cookieless</code> attribute to <code class=\"language-plaintext highlighter-rouge\">false</code> will prevent encoding the session ID in the URL which is prone to a security attack and instead use a cookie to store the session ID</p>\n  </li>\n  <li>\n    <p>Setting <code class=\"language-plaintext highlighter-rouge\">&lt;sessionState&gt; regenerateExpiredSessionId</code> attribute to <code class=\"language-plaintext highlighter-rouge\">false</code> will prevent using the same session ID value when expired</p>\n  </li>\n  <li>\n    <p>Setting a <code class=\"language-plaintext highlighter-rouge\">&lt;sessionState&gt; timeout</code> is recommended to prevent a session running too long which make it more vulnerable to security attack</p>\n  </li>\n</ul>\n\n<h2 id=\"enforce-https\">Enforce HTTPS</h2>\n\n<ul>\n  <li>\n    <p>Enforce HTTPS in ASP.NET code by redirecting after checking <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.web.httprequest.issecureconnection?view=netframework-4.8\">HttpRequest.IsSecureConnection</a>:</p>\n\n    <div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"k\">if</span> <span class=\"p\">(!</span><span class=\"n\">HttpContext</span><span class=\"p\">.</span><span class=\"n\">Current</span><span class=\"p\">.</span><span class=\"n\">Request</span><span class=\"p\">.</span><span class=\"n\">IsSecureConnection</span><span class=\"p\">)</span>\n <span class=\"p\">{</span>\n      <span class=\"n\">Response</span><span class=\"p\">.</span><span class=\"nf\">Redirect</span><span class=\"p\">(</span><span class=\"s\">\"https://\"</span> <span class=\"p\">+</span> <span class=\"n\">Request</span><span class=\"p\">.</span><span class=\"n\">ServerVariables</span><span class=\"p\">[</span><span class=\"s\">\"HTTP_HOST\"</span><span class=\"p\">]</span> <span class=\"p\">+</span> <span class=\"n\">HttpContext</span><span class=\"p\">.</span><span class=\"n\">Current</span><span class=\"p\">.</span><span class=\"n\">Request</span><span class=\"p\">.</span><span class=\"n\">RawUrl</span><span class=\"p\">);</span>\n <span class=\"p\">}</span>    \n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>You can add a rewrite rule in <code class=\"language-plaintext highlighter-rouge\">web.config</code>:</p>\n\n    <div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"nt\">&lt;system.webServer&gt;</span>\n      <span class=\"nt\">&lt;rewrite&gt;</span>\n          <span class=\"nt\">&lt;rules&gt;</span>\n              <span class=\"nt\">&lt;rule</span> <span class=\"na\">name=</span><span class=\"s\">\"HTTP to HTTPS redirect\"</span> <span class=\"na\">stopProcessing=</span><span class=\"s\">\"true\"</span><span class=\"nt\">&gt;</span> \n                  <span class=\"nt\">&lt;match</span> <span class=\"na\">url=</span><span class=\"s\">\"(.*)\"</span> <span class=\"nt\">/&gt;</span> \n                  <span class=\"nt\">&lt;conditions&gt;</span> \n                      <span class=\"nt\">&lt;add</span> <span class=\"na\">input=</span><span class=\"s\">\"{HTTPS}\"</span> <span class=\"na\">pattern=</span><span class=\"s\">\"off\"</span> <span class=\"na\">ignoreCase=</span><span class=\"s\">\"true\"</span> <span class=\"nt\">/&gt;</span>\n                  <span class=\"nt\">&lt;/conditions&gt;</span> \n                  <span class=\"nt\">&lt;action</span> <span class=\"na\">type=</span><span class=\"s\">\"Redirect\"</span> <span class=\"na\">redirectType=</span><span class=\"s\">\"Permanent\"</span> <span class=\"na\">url=</span><span class=\"s\">\"https://{HTTP_HOST}/{R:1}\"</span> <span class=\"nt\">/&gt;</span>\n              <span class=\"nt\">&lt;/rule&gt;</span> \n          <span class=\"nt\">&lt;/rules&gt;</span>\n      <span class=\"nt\">&lt;/rewrite&gt;</span>\n  <span class=\"nt\">&lt;/system.webServer&gt;</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>Or you can add the HTTP <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security\">Strict-Transport-Security (HSTS)</a> header to the response</p>\n  </li>\n  <li>\n    <p>For ASP.NET Core, see <a href=\"https://learn.microsoft.com/en-us/aspnet/core/security/enforcing-ssl?view=aspnetcore-7.0&amp;tabs=visual-studio\">Enforce HTTPS in ASP.NET Core</a> for information on <code class=\"language-plaintext highlighter-rouge\">UseHttpsRedirection()</code> and <code class=\"language-plaintext highlighter-rouge\">UseHsts()</code></p>\n  </li>\n</ul>\n\n<h2 id=\"error-handling\">Error handling</h2>\n\n<ul>\n  <li>\n    <p>Having a custom error page allows you to tailor your error messages from displaying too much information or from displaying sensitive information that can lead to a security attack</p>\n  </li>\n  <li>\n    <p>In ASP.NET, you can add custom error handler in <code class=\"language-plaintext highlighter-rouge\">Global.asax</code> file under <code class=\"language-plaintext highlighter-rouge\">Application_Error()</code>:</p>\n\n    <div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"k\">protected</span> <span class=\"k\">void</span> <span class=\"nf\">Application_Error</span><span class=\"p\">(</span><span class=\"kt\">object</span> <span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">EventArgs</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n      <span class=\"n\">Exception</span> <span class=\"n\">exception</span> <span class=\"p\">=</span> <span class=\"n\">Server</span><span class=\"p\">.</span><span class=\"nf\">GetLastError</span><span class=\"p\">();</span>\n      <span class=\"n\">System</span><span class=\"p\">.</span><span class=\"n\">Diagnostics</span><span class=\"p\">.</span><span class=\"n\">Debug</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"n\">exception</span><span class=\"p\">);</span>\n      <span class=\"n\">Response</span><span class=\"p\">.</span><span class=\"nf\">Redirect</span><span class=\"p\">(</span><span class=\"s\">\"/Home/Error\"</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>  \n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>You can configure custom error messages/pages in <code class=\"language-plaintext highlighter-rouge\">web.config</code></p>\n\n    <p>For example you can add this to your <code class=\"language-plaintext highlighter-rouge\">web.config</code> file:</p>\n\n    <div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"nt\">&lt;customErrors</span> <span class=\"na\">mode=</span><span class=\"s\">\"On\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;error</span> <span class=\"na\">statusCode=</span><span class=\"s\">\"404\"</span> <span class=\"na\">redirect=</span><span class=\"s\">\"~/Home/MyCustomErrorPage\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/customErrors&gt;</span>\n</code></pre></div>    </div>\n\n    <p>Then in your <code class=\"language-plaintext highlighter-rouge\">HomeController</code> code, you would have this method defined:</p>\n\n    <div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"k\">public</span> <span class=\"n\">ActionResult</span> <span class=\"nf\">MyCustomErrorPage</span><span class=\"p\">(...)</span>\n  <span class=\"p\">{</span>\n      <span class=\"p\">...</span>\n  <span class=\"p\">}</span>\n</code></pre></div>    </div>\n\n    <p>And of course the corresponding view file <code class=\"language-plaintext highlighter-rouge\">MyCustomErrorPage.cshtml</code> should have been created as well</p>\n  </li>\n</ul>\n\n<h2 id=\"owasp-links\">OWASP Links</h2>\n<ul>\n  <li><a href=\"https://owasp.org/Top10/\">OWASP Top 10 2021</a></li>\n  <li><a href=\"https://owasp.org/www-project-top-ten/2017/\">OWASP Top 10 2017</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "Maintainable and Scalable Software: A Checklist",
      "category" : "general",
      "tags"     : "",
      "url"      : "/tech-blog/2022/11/15/maintainable-scalable-software-checklist.html",
      "date"     : "2022-11-15 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/swscale.png\" alt=\"\" /></p>\n\n<p>I think this serves as a good checklist to have when designing/developing software especially if this software is meant to grow as customer base grows.  I also included a definition of what software scalability means plus a list of current technologies that developers use to help tham scale their softwares.</p>\n\n<h2 id=\"software-scalability-definition\">Software Scalability Definition</h2>\n<p>Software scalability is a measure of how easy it is to grow or shrink a piece of software. In many cases it refers to the software’s ability to handle increased workloads while adding users and removing them with minimal cost impact. Often software scalability also refers to the software’s ability to perform and support growing amounts of data.</p>\n\n<p>The keys to software scalability include <strong>hardware infrastructure</strong>, <strong>software selection</strong> and <strong>cloud accessibility</strong></p>\n\n<h2 id=\"checklist\">Checklist</h2>\n<ul>\n  <li>Make software easy to change, update, or add features later on\n    <ul>\n      <li>Product flexibility from day one</li>\n    </ul>\n  </li>\n  <li>Keep things as simple as possible\n    <ul>\n      <li>Apply the K.I.S.S. principle (see <a href=\"https://dev.to/kwereutosu/the-k-i-s-s-principle-in-programming-1jfg\">The K.I.S.S Principle in Programming</a>)</li>\n    </ul>\n  </li>\n  <li>Keep your code clean and readable\n    <ul>\n      <li>Avoid overusing conditional statements</li>\n      <li>Keep variables and functions meaningful and descriptive</li>\n      <li>Use loops</li>\n    </ul>\n  </li>\n  <li>Create modular components with well-defined interfaces\n    <ul>\n      <li>Adopt the S.O.L.I.D. design principles (my post <a href=\"/tech-blog/2017/11/07/dont-confuse-dip-ioc-and-di-together-they-are-all-different-but-related.html\">here</a> defines what SOLID stands for)</li>\n    </ul>\n  </li>\n  <li>Adopt continuous integration practices\n    <ul>\n      <li>Automate building, testing, and deploying software</li>\n      <li>Test early and test often</li>\n      <li>Include performance and load testing</li>\n      <li>Option for canary or blue/green release strategies</li>\n    </ul>\n  </li>\n  <li>Make sure data storage solution is scalable\n    <ul>\n      <li>Option for multiple and distributed databases but synchronization will be a challenge</li>\n    </ul>\n  </li>\n  <li>Avoid storage\n    <ul>\n      <li>Rely on storage only for the most critical components</li>\n    </ul>\n  </li>\n  <li>Build stateless applications\n    <ul>\n      <li>Make sure application does not store any session data to use in another session</li>\n    </ul>\n  </li>\n  <li>Use asynchronous communication\n    <ul>\n      <li>Synchronous or serial tasks are a big bottleneck on scale</li>\n      <li>Run tasks in parallel</li>\n    </ul>\n  </li>\n  <li>Queue automation tasks\n    <ul>\n      <li>Avoid waiting on long running tasks by queueing them and get notified when done</li>\n    </ul>\n  </li>\n  <li>Use read replicas\n    <ul>\n      <li>Reduce load on primary DB by routing read queries from applications to the read replica</li>\n    </ul>\n  </li>\n  <li>Reduce write requests\n    <ul>\n      <li>Controlling or buffering write operations</li>\n    </ul>\n  </li>\n  <li>Scale servers appropriately\n    <ul>\n      <li>Scaling vertically (up/down) which means adding more servers as opposed to scaling horizontally which means adding more resources to one server</li>\n      <li>Decide based on application traffic how conservative or aggressive it needs to scale</li>\n    </ul>\n  </li>\n  <li>Use a robust caching engine and a good CDN provider\n    <ul>\n      <li>Multi-location caching</li>\n      <li>Edge computing platform</li>\n    </ul>\n  </li>\n  <li>Add observability (e.g. logging, monitoring and alerting) to operate at scale</li>\n</ul>\n\n<h2 id=\"technologies\">Technologies</h2>\n<p>Microservices, CQRS, event sourcing, ECS, Kubernetes, elastic storage, CDNs, load balancers, data lakes, Docker, Go, GraphQL, Snowflake, BigQuery, AWS elastic containers with auto-scaling, AWS DynamoDB, S3, Apache Zookeeper, Kafka, Apache Spark, AWS EMR, AWS Athena, Redshift, GCP autoscaling, Elixir, ZenMonitor, Manifold, Semaphore, ScyllaDB, Rust, Ansible, Terraform, JMeter and queries, BlazeMeter, Grafana dashboards, New Relic, Cassandra, Cloudfront, Elastic Beanstalk, Fargate, Sumo Logic, Datadog, Google’s Firebase toolset, Azure App Service, Azure SQL, Azure Cache for Redis, Promotheus, RDS, Thanos, ESLint, RuboCop, AWS Lambda, GitFlow, Docker Compose, AWS CodeBuild, Logz.io, gRPC, Airflow</p>\n\n<h2 id=\"references\">References</h2>\n<ul>\n  <li><a href=\"https://www.adservio.fr/post/how-to-design-maintainable-and-scalable-software#el4\">How to Design Maintainable and Scalable software</a></li>\n  <li><a href=\"https://www.snapt.net/blog/how-to-design-scalable-applications-in-10-steps\">How To Design Scalable Applications In 10 Steps</a></li>\n  <li><a href=\"https://www.cyberlinkasp.com/insights/what-is-software-scalability-and-why-is-it-important/\">WHAT IS SOFTWARE SCALABILITY AND WHY IS IT IMPORTANT?</a></li>\n  <li><a href=\"https://builtin.com/software-engineering-perspectives/what-is-scalability\">What Is Scalability and How Do You Build for It? 25 Engineers Weigh In</a></li>\n</ul>\n\n"
    } ,
  
    {
      "title"    : "Demystifying .NET Core apps, a quick walkthrough (.NET 6)",
      "category" : "net",
      "tags"     : "",
      "url"      : "/tech-blog/2022/10/23/demystifying-net-core-apps.html",
      "date"     : "2022-10-23 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/netcoreapps.png\" alt=\"\" /></p>\n\n<p>This is just an overview of what makes <strong>.NET Core</strong> apps work with links pointing to a much more in-depth coverage of these concepts.  There are several types of <strong>.NET Core</strong> apps but this only covers the common ones, or at least those I have worked with.  Hopefully this will give you a much better understanding of the scope involved in developing <strong>.NET Core</strong> apps.  Let’s go straight to it then.</p>\n\n<h2 id=\"net-generic-host\">.NET Generic Host</h2>\n\n<p><a href=\"https://learn.microsoft.com/en-us/dotnet/core/introduction\">.NET Core</a> apps uses this <strong>.NET Generic Host</strong> to handle the apps’ resources such as:</p>\n<ul>\n  <li><a href=\"https://learn.microsoft.com/en-us/dotnet/core/extensions/dependency-injection\">Dependency Injection (DI)</a></li>\n  <li><a href=\"https://learn.microsoft.com/en-us/dotnet/core/extensions/logging?tabs=command-line\">Logging</a></li>\n  <li><a href=\"https://learn.microsoft.com/en-us/dotnet/core/extensions/configuration\">Configuration</a></li>\n  <li>App shutdown</li>\n</ul>\n\n<p>They are 2 versions of this host and are created by these 2 builders:</p>\n<ul>\n  <li><a href=\"https://learn.microsoft.com/en-us/dotnet/core/extensions/generic-host\">HostBuilder</a></li>\n  <li><a href=\"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host?view=aspnetcore-6.0\">WebApplicationBuilder</a></li>\n</ul>\n\n<p><strong>.NET Core</strong> apps such as the <a href=\"https://learn.microsoft.com/en-us/dotnet/core/extensions/workers\">Worker Services</a> and even <a href=\"https://learn.microsoft.com/en-us/dotnet/core/tutorials/with-visual-studio-code?pivots=dotnet-6-0\">Console apps</a> use the <code class=\"language-plaintext highlighter-rouge\">HostBuilder</code> version while <a href=\"https://learn.microsoft.com/en-us/aspnet/core/introduction-to-aspnet-core?view=aspnetcore-6.0\">ASP.NET Core</a> apps such as <a href=\"https://learn.microsoft.com/en-us/aspnet/core/web-api/?view=aspnetcore-6.0\">Web APIs</a> and <a href=\"https://learn.microsoft.com/en-us/aspnet/core/mvc/overview?view=aspnetcore-6.0\">MVC apps</a> use the <code class=\"language-plaintext highlighter-rouge\">WebApplicationBuilder</code> version.</p>\n\n<p>Historically, this host was originally developed for <strong>ASP.NET Core</strong> apps but was extended for use with other types of <strong>.NET Core</strong> apps.</p>\n\n<p>Let’s look at the different <strong>.NET Core</strong> apps generated from templates provided in the <a href=\"https://visualstudio.microsoft.com/vs/community/\">Visual Studio 2022 Community Edition</a> and see what type of host they use and how it is used in it’s basic setup.</p>\n\n<h2 id=\"console-app\">Console App</h2>\n\n<p>Here is the generated code from the <code class=\"language-plaintext highlighter-rouge\">Console App</code> template with the usual startup code or entry point for any <strong>.NET Core</strong> app found in <code class=\"language-plaintext highlighter-rouge\">Program.cs</code> file.</p>\n\n<div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* Program.cs */</span>\n\n<span class=\"c1\">// See https://aka.ms/new-console-template for more information</span>\n<span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">\"Hello, World!\"</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>It does not actually contain code that uses a host.  You will have to add it yourself which is not that difficult once you looked at the generated <code class=\"language-plaintext highlighter-rouge\">Worker Service</code> code later on.</p>\n\n<p>What you will notice in the code is the missing <code class=\"language-plaintext highlighter-rouge\">Main</code> method.  This is the new form in <a href=\"https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-6\">.NET 6</a>.  See <a href=\"https://learn.microsoft.com/en-us/dotnet/core/tutorials/top-level-templates\">.NET 6 C# console app template generates top-level statements</a> for more information on this.</p>\n\n<h2 id=\"worker-service\">Worker Service</h2>\n\n<p>Here is the generated code from the <code class=\"language-plaintext highlighter-rouge\">Worker Service</code> template:</p>\n\n<div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* Program.cs */</span>\n\n<span class=\"k\">using</span> <span class=\"nn\">WorkerService1</span><span class=\"p\">;</span>\n\n<span class=\"n\">IHost</span> <span class=\"n\">host</span> <span class=\"p\">=</span> <span class=\"n\">Host</span><span class=\"p\">.</span><span class=\"nf\">CreateDefaultBuilder</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nf\">ConfigureServices</span><span class=\"p\">(</span><span class=\"n\">services</span> <span class=\"p\">=&gt;</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">services</span><span class=\"p\">.</span><span class=\"n\">AddHostedService</span><span class=\"p\">&lt;</span><span class=\"n\">Worker</span><span class=\"p\">&gt;();</span>\n    <span class=\"p\">})</span>\n    <span class=\"p\">.</span><span class=\"nf\">Build</span><span class=\"p\">();</span>\n\n<span class=\"k\">await</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"nf\">RunAsync</span><span class=\"p\">();</span>\n</code></pre></div></div>\n\n<div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* Worker.cs */</span>\n\n<span class=\"k\">namespace</span> <span class=\"nn\">WorkerService1</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">Worker</span> <span class=\"p\">:</span> <span class=\"n\">BackgroundService</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">private</span> <span class=\"k\">readonly</span> <span class=\"n\">ILogger</span><span class=\"p\">&lt;</span><span class=\"n\">Worker</span><span class=\"p\">&gt;</span> <span class=\"n\">_logger</span><span class=\"p\">;</span>\n\n        <span class=\"k\">public</span> <span class=\"nf\">Worker</span><span class=\"p\">(</span><span class=\"n\">ILogger</span><span class=\"p\">&lt;</span><span class=\"n\">Worker</span><span class=\"p\">&gt;</span> <span class=\"n\">logger</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">_logger</span> <span class=\"p\">=</span> <span class=\"n\">logger</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">protected</span> <span class=\"k\">override</span> <span class=\"k\">async</span> <span class=\"n\">Task</span> <span class=\"nf\">ExecuteAsync</span><span class=\"p\">(</span><span class=\"n\">CancellationToken</span> <span class=\"n\">stoppingToken</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">while</span> <span class=\"p\">(!</span><span class=\"n\">stoppingToken</span><span class=\"p\">.</span><span class=\"n\">IsCancellationRequested</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"n\">_logger</span><span class=\"p\">.</span><span class=\"nf\">LogInformation</span><span class=\"p\">(</span><span class=\"s\">\"Worker running at: {time}\"</span><span class=\"p\">,</span> <span class=\"n\">DateTimeOffset</span><span class=\"p\">.</span><span class=\"n\">Now</span><span class=\"p\">);</span>\n                <span class=\"k\">await</span> <span class=\"n\">Task</span><span class=\"p\">.</span><span class=\"nf\">Delay</span><span class=\"p\">(</span><span class=\"m\">1000</span><span class=\"p\">,</span> <span class=\"n\">stoppingToken</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In the <code class=\"language-plaintext highlighter-rouge\">Program.cs</code> file,</p>\n<ol>\n  <li>the <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.host.createdefaultbuilder?view=dotnet-plat-ext-6.0\">Host.CreateDefaultBuilder()</a> returns an instance of the <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.hostbuilder?view=dotnet-plat-ext-6.0\">HostBuilder</a> class.</li>\n  <li>From this host you can then add services to the (dependency injection) container via <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.hostbuilder.configureservices?view=dotnet-plat-ext-6.0#microsoft-extensions-hosting-hostbuilder-configureservices(system-action((microsoft-extensions-hosting-hostbuildercontext-microsoft-extensions-dependencyinjection-iservicecollection)))\">ConfigureServices()</a>.</li>\n  <li>Then you register your own <a href=\"https://learn.microsoft.com/en-us/dotnet/core/extensions/timer-service?source=recommendations\">implementation of an IHostedService</a> which in this case is the <code class=\"language-plaintext highlighter-rouge\">Worker</code> in the <code class=\"language-plaintext highlighter-rouge\">Worker.cs</code> file via <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.servicecollectionhostedserviceextensions.addhostedservice?view=dotnet-plat-ext-6.0#microsoft-extensions-dependencyinjection-servicecollectionhostedserviceextensions-addhostedservice-1(microsoft-extensions-dependencyinjection-iservicecollection)\">AddHostedService&lt;T&gt;()</a>.</li>\n  <li>Then you <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.hostbuilder.build?view=dotnet-plat-ext-6.0#microsoft-extensions-hosting-hostbuilder-build\">Build()</a> your host.</li>\n  <li>And lastly, call <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.hostingabstractionshostextensions.run?view=dotnet-plat-ext-6.0#microsoft-extensions-hosting-hostingabstractionshostextensions-run(microsoft-extensions-hosting-ihost)\">Run()</a> or <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.hostingabstractionshostextensions.runasync?view=dotnet-plat-ext-6.0#microsoft-extensions-hosting-hostingabstractionshostextensions-runasync(microsoft-extensions-hosting-ihost-system-threading-cancellationtoken)\">RunAsync()</a> on the host to run all registered hosted services, because you can have multiple hosted services running and not just one.</li>\n</ol>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">Worker.cs</code> file, on the otherhand, contains the <code class=\"language-plaintext highlighter-rouge\">Worker</code> class which inherits from <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.backgroundservice?view=dotnet-plat-ext-6.0\">BackgroundService</a> which is an implementation of an <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.ihostedservice?view=dotnet-plat-ext-6.0\">IHostedService</a>.</p>\n\n<p>Note that in the constructor method of the <code class=\"language-plaintext highlighter-rouge\">Worker</code> class, <code class=\"language-plaintext highlighter-rouge\">Worker()</code>, is passed, or shall we say is where an <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.ilogger-1?view=dotnet-plat-ext-6.0\">ILogger&lt;T&gt;</a> implementation is injected.  This is an example of how <strong>.NET Generic Host</strong> provides dependency injection for services such as the basic logging provided by <strong>.NET Core</strong>.</p>\n\n<p>Next the function <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.backgroundservice.executeasync?view=dotnet-plat-ext-6.0\">ExecuteAsync()</a> is called when the hosted service starts.  It accepts a <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.cancellationtoken?view=net-6.0&amp;viewFallbackFrom=dotnet-plat-ext-6.0\">CancellationToken</a> which means this long running operation should be cancellable.</p>\n\n<h2 id=\"aspnet-core-web-api\">ASP.NET Core Web API</h2>\n\n<p>Here is the generated code from the <code class=\"language-plaintext highlighter-rouge\">ASP.NET Core Web API</code> template:</p>\n\n<div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* Program.cs */</span>\n\n<span class=\"kt\">var</span> <span class=\"n\">builder</span> <span class=\"p\">=</span> <span class=\"n\">WebApplication</span><span class=\"p\">.</span><span class=\"nf\">CreateBuilder</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Add services to the container.</span>\n\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">Services</span><span class=\"p\">.</span><span class=\"nf\">AddControllers</span><span class=\"p\">();</span>\n<span class=\"c1\">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">Services</span><span class=\"p\">.</span><span class=\"nf\">AddEndpointsApiExplorer</span><span class=\"p\">();</span>\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">Services</span><span class=\"p\">.</span><span class=\"nf\">AddSwaggerGen</span><span class=\"p\">();</span>\n\n<span class=\"kt\">var</span> <span class=\"n\">app</span> <span class=\"p\">=</span> <span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"nf\">Build</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// Configure the HTTP request pipeline.</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">Environment</span><span class=\"p\">.</span><span class=\"nf\">IsDevelopment</span><span class=\"p\">())</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">UseSwagger</span><span class=\"p\">();</span>\n    <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">UseSwaggerUI</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">UseHttpsRedirection</span><span class=\"p\">();</span>\n\n<span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">UseAuthorization</span><span class=\"p\">();</span>\n\n<span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">MapControllers</span><span class=\"p\">();</span>\n\n<span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">Run</span><span class=\"p\">();</span>\n</code></pre></div></div>\n\n<div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* WeatherForecastController.cs */</span>\n\n<span class=\"k\">using</span> <span class=\"nn\">Microsoft.AspNetCore.Mvc</span><span class=\"p\">;</span>\n\n<span class=\"k\">namespace</span> <span class=\"nn\">ControllerWebAPI1.Controllers</span>\n<span class=\"p\">{</span>\n    <span class=\"p\">[</span><span class=\"n\">ApiController</span><span class=\"p\">]</span>\n    <span class=\"p\">[</span><span class=\"nf\">Route</span><span class=\"p\">(</span><span class=\"s\">\"[controller]\"</span><span class=\"p\">)]</span>\n    <span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">WeatherForecastController</span> <span class=\"p\">:</span> <span class=\"n\">ControllerBase</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">private</span> <span class=\"k\">static</span> <span class=\"k\">readonly</span> <span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">Summaries</span> <span class=\"p\">=</span> <span class=\"k\">new</span><span class=\"p\">[]</span>\n        <span class=\"p\">{</span>\n            <span class=\"s\">\"Freezing\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bracing\"</span><span class=\"p\">,</span> <span class=\"s\">\"Chilly\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cool\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mild\"</span><span class=\"p\">,</span> <span class=\"s\">\"Warm\"</span><span class=\"p\">,</span> <span class=\"s\">\"Balmy\"</span><span class=\"p\">,</span> <span class=\"s\">\"Hot\"</span><span class=\"p\">,</span> <span class=\"s\">\"Sweltering\"</span><span class=\"p\">,</span> <span class=\"s\">\"Scorching\"</span>\n        <span class=\"p\">};</span>\n\n        <span class=\"k\">private</span> <span class=\"k\">readonly</span> <span class=\"n\">ILogger</span><span class=\"p\">&lt;</span><span class=\"n\">WeatherForecastController</span><span class=\"p\">&gt;</span> <span class=\"n\">_logger</span><span class=\"p\">;</span>\n\n        <span class=\"k\">public</span> <span class=\"nf\">WeatherForecastController</span><span class=\"p\">(</span><span class=\"n\">ILogger</span><span class=\"p\">&lt;</span><span class=\"n\">WeatherForecastController</span><span class=\"p\">&gt;</span> <span class=\"n\">logger</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">_logger</span> <span class=\"p\">=</span> <span class=\"n\">logger</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"p\">[</span><span class=\"nf\">HttpGet</span><span class=\"p\">(</span><span class=\"n\">Name</span> <span class=\"p\">=</span> <span class=\"s\">\"GetWeatherForecast\"</span><span class=\"p\">)]</span>\n        <span class=\"k\">public</span> <span class=\"n\">IEnumerable</span><span class=\"p\">&lt;</span><span class=\"n\">WeatherForecast</span><span class=\"p\">&gt;</span> <span class=\"nf\">Get</span><span class=\"p\">()</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">Enumerable</span><span class=\"p\">.</span><span class=\"nf\">Range</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">5</span><span class=\"p\">).</span><span class=\"nf\">Select</span><span class=\"p\">(</span><span class=\"n\">index</span> <span class=\"p\">=&gt;</span> <span class=\"k\">new</span> <span class=\"n\">WeatherForecast</span>\n            <span class=\"p\">{</span>\n                <span class=\"n\">Date</span> <span class=\"p\">=</span> <span class=\"n\">DateTime</span><span class=\"p\">.</span><span class=\"n\">Now</span><span class=\"p\">.</span><span class=\"nf\">AddDays</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">),</span>\n                <span class=\"n\">TemperatureC</span> <span class=\"p\">=</span> <span class=\"n\">Random</span><span class=\"p\">.</span><span class=\"n\">Shared</span><span class=\"p\">.</span><span class=\"nf\">Next</span><span class=\"p\">(-</span><span class=\"m\">20</span><span class=\"p\">,</span> <span class=\"m\">55</span><span class=\"p\">),</span>\n                <span class=\"n\">Summary</span> <span class=\"p\">=</span> <span class=\"n\">Summaries</span><span class=\"p\">[</span><span class=\"n\">Random</span><span class=\"p\">.</span><span class=\"n\">Shared</span><span class=\"p\">.</span><span class=\"nf\">Next</span><span class=\"p\">(</span><span class=\"n\">Summaries</span><span class=\"p\">.</span><span class=\"n\">Length</span><span class=\"p\">)]</span>\n            <span class=\"p\">})</span>\n            <span class=\"p\">.</span><span class=\"nf\">ToArray</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In the <code class=\"language-plaintext highlighter-rouge\">Program.cs</code> file of an <strong>ASP.NET Core</strong> app such as <strong>Web API</strong> app,</p>\n<ol>\n  <li>the <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.webapplication.createbuilder?view=aspnetcore-6.0\">WebApplication.CreateBuilder()</a> is called to create an instance of the <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.webapplicationbuilder?view=aspnetcore-6.0\">WebApplicationBuilder</a> class.</li>\n  <li>Then the following services are added into it’s DI container, the <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.webapplicationbuilder.services?view=aspnetcore-6.0\">WebApplicationBuilder.Services</a>:\n    <ol>\n      <li>Adds MVC services for controllers via <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.mvcservicecollectionextensions.addcontrollers?view=aspnetcore-6.0#microsoft-extensions-dependencyinjection-mvcservicecollectionextensions-addcontrollers(microsoft-extensions-dependencyinjection-iservicecollection)\">AddControllers()</a></li>\n      <li>Configures <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.apiexplorer?view=aspnetcore-6.0\">ApiExplorer</a> using <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.endpoint.metadata?view=aspnetcore-6.0#microsoft-aspnetcore-http-endpoint-metadata\">Endpoint’s Metadata</a> via <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.endpointmetadataapiexplorerservicecollectionextensions.addendpointsapiexplorer?view=aspnetcore-6.0\">AddEndpointsApiExplorer()</a></li>\n      <li>Adds the <a href=\"https://learn.microsoft.com/en-us/aspnet/core/tutorials/web-api-help-pages-using-swagger?view=aspnetcore-6.0\">Swagger</a> generator via <code class=\"language-plaintext highlighter-rouge\">AddSwaggerGen()</code>.  See <a href=\"https://learn.microsoft.com/en-us/aspnet/core/tutorials/getting-started-with-swashbuckle?view=aspnetcore-6.0&amp;tabs=visual-studio\">Get started with Swashbuckle and ASP.NET Core</a>.</li>\n    </ol>\n  </li>\n  <li>Then you <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.webapplicationbuilder.build?view=aspnetcore-6.0#microsoft-aspnetcore-builder-webapplicationbuilder-build\">Build()</a> the host, the <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.webapplication?view=aspnetcore-6.0\">WebApplication</a>.</li>\n  <li>Next you configure the HTTP request pipeline or the middleware with the following calls:\n    <ol>\n      <li>Register the Swagger middleware via <code class=\"language-plaintext highlighter-rouge\">UseSwagger()</code></li>\n      <li>Register the SwaggerUI middleware via <code class=\"language-plaintext highlighter-rouge\">UseSwaggerUI()</code></li>\n      <li>Adds middleware for redirecting HTTP requests to HTTPS vi <a href=\"https://learn.microsoft.com/en-us/aspnet/core/security/enforcing-ssl?view=aspnetcore-6.0&amp;tabs=visual-studio\">UseHttpsRedirection()</a></li>\n      <li>Enables authorization capabilities via <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.authorizationappbuilderextensions.useauthorization?view=aspnetcore-6.0\">UseAuthorization()</a></li>\n      <li>Adds endpoints to controller actions via <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.controllerendpointroutebuilderextensions.mapcontrollers?view=aspnetcore-6.0\">MapControllers()</a>\n<br />\nSee <a href=\"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/middleware/?view=aspnetcore-6.0\">ASP.NET Core Middleware</a> for more information of what middleware is and what other built-in middleware components came with <strong>ASP.NET Core</strong>.  Briefly, they replace the HTTP handlers and modules in previous <strong>ASP.NET</strong> versions and come with <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.useextensions.use?view=aspnetcore-6.0\">Use</a>, <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.mapextensions.map?view=aspnetcore-6.0\">Map</a>, or <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.runextensions.run?view=aspnetcore-6.0\">Run</a> extension methods.\n<br /></li>\n    </ol>\n  </li>\n  <li>And lastly, runs the application via <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.webapplication.run?view=aspnetcore-6.0\">Run()</a> which blocks the calling thread until host shutdown</li>\n</ol>\n\n<h2 id=\"the-old-startupcs\">The Old Startup.cs</h2>\n<p>You will notice that all the configuration and setup is done in the <code class=\"language-plaintext highlighter-rouge\">Program.cs</code> file.  Before <strong>.NET 6</strong>, it used to be in 2 files: <code class=\"language-plaintext highlighter-rouge\">Program.cs</code> and <code class=\"language-plaintext highlighter-rouge\">Startup.cs</code> and it looks something like this:</p>\n\n<div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* Program.cs */</span>\n\n<span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">Program</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">Main</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"nf\">CreateWebHostBuilder</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">).</span><span class=\"nf\">Build</span><span class=\"p\">().</span><span class=\"nf\">Run</span><span class=\"p\">();</span>\n\t<span class=\"p\">}</span>\n\t   \n\t<span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"n\">IWebHostBuilder</span> <span class=\"nf\">CreateWebHostBuilder</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">IConfiguration</span> <span class=\"n\">config</span> <span class=\"p\">=</span> <span class=\"n\">Configuration</span><span class=\"p\">.</span><span class=\"nf\">CreateConfigurationContainer</span><span class=\"p\">();</span>\n\n\t\t<span class=\"k\">return</span> <span class=\"n\">WebHost</span><span class=\"p\">.</span><span class=\"nf\">CreateDefaultBuilder</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\t\t\t<span class=\"p\">.</span><span class=\"nf\">UseConfiguration</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n\t\t\t<span class=\"p\">.</span><span class=\"nf\">ConfigureLogging</span><span class=\"p\">(</span><span class=\"n\">logging</span> <span class=\"p\">=&gt;</span>\n\t\t\t<span class=\"p\">{</span>\n\t\t\t\t<span class=\"n\">logging</span><span class=\"p\">.</span><span class=\"nf\">ClearProviders</span><span class=\"p\">();</span>\n\t\t\t\t<span class=\"n\">logging</span><span class=\"p\">.</span><span class=\"nf\">AddConsole</span><span class=\"p\">();</span>\n\t\t\t<span class=\"p\">})</span>\n\t\t\t<span class=\"p\">.</span><span class=\"n\">UseStartup</span><span class=\"p\">&lt;</span><span class=\"n\">Startup</span><span class=\"p\">&gt;();</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* Startup.cs */</span>\n\n<span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">Startup</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">public</span> <span class=\"nf\">Startup</span><span class=\"p\">(</span><span class=\"n\">IConfiguration</span> <span class=\"n\">configuration</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">Configuration</span> <span class=\"p\">=</span> <span class=\"n\">configuration</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"k\">public</span> <span class=\"n\">IConfiguration</span> <span class=\"n\">Configuration</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n\t<span class=\"c1\">// This method gets called by the runtime. Use this method to add services to the container.</span>\n\t<span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">ConfigureServices</span><span class=\"p\">(</span><span class=\"n\">IServiceCollection</span> <span class=\"n\">services</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">services</span><span class=\"p\">.</span><span class=\"nf\">AddMvc</span><span class=\"p\">()</span>\n\t\t\t<span class=\"p\">.</span><span class=\"nf\">SetCompatibilityVersion</span><span class=\"p\">(</span><span class=\"n\">CompatibilityVersion</span><span class=\"p\">.</span><span class=\"n\">Version_2_1</span><span class=\"p\">);</span>\n\t\t<span class=\"c1\">// etc.</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"c1\">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span>\n\t<span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">Configure</span><span class=\"p\">(</span><span class=\"n\">IApplicationBuilder</span> <span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">IHostingEnvironment</span> <span class=\"n\">env</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"nf\">IsDevelopment</span><span class=\"p\">())</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">UseDeveloperExceptionPage</span><span class=\"p\">();</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"k\">else</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">UseHsts</span><span class=\"p\">();</span>\n\t\t<span class=\"p\">}</span>\n\n\t\t<span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">UseHttpsRedirection</span><span class=\"p\">();</span>\n\t\t<span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">UseMvc</span><span class=\"p\">();</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>You have the <code class=\"language-plaintext highlighter-rouge\">Program.cs</code> file where you create the host and call <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.hosting.webhostbuilderextensions.usestartup?view=aspnetcore-6.0\">UseStartup&lt;TStartup&gt;()</a> to use a separate file containing the startup code.</p>\n\n<p>In the <code class=\"language-plaintext highlighter-rouge\">Startup.cs</code> file, you implement the following 2 methods that are called by the runtime:</p>\n<ul>\n  <li><strong>ConfigureServices(IServiceCollection)</strong> - to add services to the container</li>\n  <li><strong>Configure(IApplicationBuilder app, IHostingEnvironment env)</strong> - to configure the HTTP request pipeline</li>\n</ul>\n\n<p>As you can see there is more boilerplate code you need to add compared to the new minimal hosting model in <strong>.NET 6</strong>.</p>\n\n<h2 id=\"minimal-api\">Minimal API</h2>\n\n<p><strong>Minimal API</strong> is a new type of <strong>.NET Core</strong> application in <strong>.NET 6</strong>.  You can generate the code from the same <code class=\"language-plaintext highlighter-rouge\">ASP.NET Core Web API</code> template but unselecting the checkbox besides <code class=\"language-plaintext highlighter-rouge\">Use controllers (uncheck to use minimal APIs)</code>.  Below is the generated code:</p>\n\n<div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* Program.cs */</span>\n\n<span class=\"kt\">var</span> <span class=\"n\">builder</span> <span class=\"p\">=</span> <span class=\"n\">WebApplication</span><span class=\"p\">.</span><span class=\"nf\">CreateBuilder</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Add services to the container.</span>\n<span class=\"c1\">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">Services</span><span class=\"p\">.</span><span class=\"nf\">AddEndpointsApiExplorer</span><span class=\"p\">();</span>\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">Services</span><span class=\"p\">.</span><span class=\"nf\">AddSwaggerGen</span><span class=\"p\">();</span>\n\n<span class=\"kt\">var</span> <span class=\"n\">app</span> <span class=\"p\">=</span> <span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"nf\">Build</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// Configure the HTTP request pipeline.</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">Environment</span><span class=\"p\">.</span><span class=\"nf\">IsDevelopment</span><span class=\"p\">())</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">UseSwagger</span><span class=\"p\">();</span>\n    <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">UseSwaggerUI</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">UseHttpsRedirection</span><span class=\"p\">();</span>\n\n<span class=\"kt\">var</span> <span class=\"n\">summaries</span> <span class=\"p\">=</span> <span class=\"k\">new</span><span class=\"p\">[]</span>\n<span class=\"p\">{</span>\n    <span class=\"s\">\"Freezing\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bracing\"</span><span class=\"p\">,</span> <span class=\"s\">\"Chilly\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cool\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mild\"</span><span class=\"p\">,</span> <span class=\"s\">\"Warm\"</span><span class=\"p\">,</span> <span class=\"s\">\"Balmy\"</span><span class=\"p\">,</span> <span class=\"s\">\"Hot\"</span><span class=\"p\">,</span> <span class=\"s\">\"Sweltering\"</span><span class=\"p\">,</span> <span class=\"s\">\"Scorching\"</span>\n<span class=\"p\">};</span>\n\n<span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">MapGet</span><span class=\"p\">(</span><span class=\"s\">\"/weatherforecast\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">var</span> <span class=\"n\">forecast</span> <span class=\"p\">=</span> <span class=\"n\">Enumerable</span><span class=\"p\">.</span><span class=\"nf\">Range</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">5</span><span class=\"p\">).</span><span class=\"nf\">Select</span><span class=\"p\">(</span><span class=\"n\">index</span> <span class=\"p\">=&gt;</span>\n        <span class=\"k\">new</span> <span class=\"nf\">WeatherForecast</span>\n        <span class=\"p\">(</span>\n            <span class=\"n\">DateTime</span><span class=\"p\">.</span><span class=\"n\">Now</span><span class=\"p\">.</span><span class=\"nf\">AddDays</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">),</span>\n            <span class=\"n\">Random</span><span class=\"p\">.</span><span class=\"n\">Shared</span><span class=\"p\">.</span><span class=\"nf\">Next</span><span class=\"p\">(-</span><span class=\"m\">20</span><span class=\"p\">,</span> <span class=\"m\">55</span><span class=\"p\">),</span>\n            <span class=\"n\">summaries</span><span class=\"p\">[</span><span class=\"n\">Random</span><span class=\"p\">.</span><span class=\"n\">Shared</span><span class=\"p\">.</span><span class=\"nf\">Next</span><span class=\"p\">(</span><span class=\"n\">summaries</span><span class=\"p\">.</span><span class=\"n\">Length</span><span class=\"p\">)]</span>\n        <span class=\"p\">))</span>\n        <span class=\"p\">.</span><span class=\"nf\">ToArray</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"n\">forecast</span><span class=\"p\">;</span>\n<span class=\"p\">})</span>\n<span class=\"p\">.</span><span class=\"nf\">WithName</span><span class=\"p\">(</span><span class=\"s\">\"GetWeatherForecast\"</span><span class=\"p\">);</span>\n\n<span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">Run</span><span class=\"p\">();</span>\n\n<span class=\"k\">internal</span> <span class=\"n\">record</span> <span class=\"nf\">WeatherForecast</span><span class=\"p\">(</span><span class=\"n\">DateTime</span> <span class=\"n\">Date</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">TemperatureC</span><span class=\"p\">,</span> <span class=\"kt\">string</span><span class=\"p\">?</span> <span class=\"n\">Summary</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"kt\">int</span> <span class=\"n\">TemperatureF</span> <span class=\"p\">=&gt;</span> <span class=\"m\">32</span> <span class=\"p\">+</span> <span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)(</span><span class=\"n\">TemperatureC</span> <span class=\"p\">/</span> <span class=\"m\">0.5556</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>So it does not have controller code like in the regular <strong>Web API</strong> but it makes a call to <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.endpointroutebuilderextensions.mapget?view=aspnetcore-6.0\">MapGet()</a>.  I won’t go over too much on this but feel free to look at <a href=\"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-6.0\">Minimal APIs overview</a> for more information.  Also <a href=\"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/routing?view=aspnetcore-6.0#routing-basics\">Routing basics</a> in <strong>ASP.NET Core</strong>.</p>\n\n<h2 id=\"aspnet-core-empty\">ASP.NET Core Empty</h2>\n\n<p>And just to show you how many lines of code is required to get yourself a bare minimum, no content <strong>ASP.NET Core</strong> web application up and running, you can use the <code class=\"language-plaintext highlighter-rouge\">ASP.NET Core Empty</code> template to generate this code for you:</p>\n\n<div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">var</span> <span class=\"n\">builder</span> <span class=\"p\">=</span> <span class=\"n\">WebApplication</span><span class=\"p\">.</span><span class=\"nf\">CreateBuilder</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">);</span>\n<span class=\"kt\">var</span> <span class=\"n\">app</span> <span class=\"p\">=</span> <span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"nf\">Build</span><span class=\"p\">();</span>\n\n<span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">MapGet</span><span class=\"p\">(</span><span class=\"s\">\"/\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"s\">\"Hello World!\"</span><span class=\"p\">);</span>\n\n<span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">Run</span><span class=\"p\">();</span>\n</code></pre></div></div>\n\n<h2 id=\"adding-host-to-a-console-app\">Adding Host to a Console App</h2>\n\n<p>As previously mentioned, you need to add the <strong>.NET Generic Host</strong> to the console app because the generated code does not expose it.  You will need to add a NuGet package for <a href=\"https://www.nuget.org/packages/Microsoft.Extensions.Hosting\">Microsoft.Hosting.Extensions</a> before you can use the host.  See this video showing you how to do this.</p>\n\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/I6SzqpoQ-Gw\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p><br />\nAnd below is the code to use host in a console app after adding the NuGet package:</p>\n\n<div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">using</span> <span class=\"nn\">Microsoft.Extensions.DependencyInjection</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"nn\">Microsoft.Extensions.Hosting</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"nn\">Microsoft.Extensions.Logging</span><span class=\"p\">;</span>\n\n<span class=\"kt\">var</span> <span class=\"n\">host</span> <span class=\"p\">=</span> <span class=\"n\">Host</span><span class=\"p\">.</span><span class=\"nf\">CreateDefaultBuilder</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">).</span><span class=\"nf\">Build</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// See https://aka.ms/new-console-template for more information</span>\n<span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">\"Hello, World!\"</span><span class=\"p\">);</span>\n\n<span class=\"kt\">var</span> <span class=\"n\">logger</span> <span class=\"p\">=</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">Services</span><span class=\"p\">.</span><span class=\"n\">GetRequiredService</span><span class=\"p\">&lt;</span><span class=\"n\">ILogger</span><span class=\"p\">&lt;</span><span class=\"n\">Program</span><span class=\"p\">&gt;&gt;();</span>\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">LogInformation</span><span class=\"p\">(</span><span class=\"s\">\"Host created.\"</span><span class=\"p\">);</span>\n\n<span class=\"k\">await</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"nf\">RunAsync</span><span class=\"p\">();</span>\n</code></pre></div></div>\n\n<p>And as an added bonus, it also shows you how to get the host’s default logger service to log messages.</p>\n\n<h2 id=\"whats-next\">What’s Next</h2>\n<p>There’s still a lot more to cover but this is only part 1.  In the next part or so, I like to get more into .NET Generic Host’s features such as dependency injection, logging, and configuration; some of the framework provided sevices; some of ASP.NET Core’s built-in HTTP middleware like authentication and authorization; and how to create a custom HTTP middleware.</p>\n\n<h2 id=\"additional-references\">Additional References</h2>\n<ul>\n  <li><a href=\"https://learn.microsoft.com/en-us/dotnet/\">.NET documentation</a></li>\n  <li><a href=\"https://learn.microsoft.com/en-us/dotnet/fundamentals/\">.NET Fundamentals</a></li>\n  <li><a href=\"https://learn.microsoft.com/en-us/aspnet/core/?view=aspnetcore-6.0\">ASP.NET documentation</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "Tic-Tac-Toe in Angular, React, and Lit",
      "category" : "front-end",
      "tags"     : "",
      "url"      : "/tech-blog/2022/10/02/tictactoe-ng-rx-lit.html",
      "date"     : "2022-10-02 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/tictactoe-ng-rx-lit.png\" alt=\"\" /></p>\n\n<p>I created a quick and simple tic-tac-toe game in <a href=\"https://angular.io/\">Angular</a>, <a href=\"https://reactjs.org/\">React</a>, and <a href=\"https://lit.dev/\">Lit</a> to show the similarities between these 3 frontend frameworks.  You can see they all share pretty much the same HTML, CSS and <a href=\"https://www.typescriptlang.org/\">TypeScript</a> code.</p>\n\n<p>Check them out there:</p>\n\n<ul>\n  <li><a href=\"https://stackblitz.com/edit/angular-ivy-5qjdvt?file=src%2Fapp%2Ftictactoe.component.html,src%2Fapp%2Ftictactoe.component.css,src%2Fapp%2Ftictactoe.component.ts\">Tic-tac-toe in Angular</a></li>\n  <li><a href=\"https://codepen.io/rodansotto/pen/mdLLwMm\">Tic-tac-toe in React</a></li>\n  <li><a href=\"https://lit.dev/playground/#gist=3002ab6bc851dae0493a970eb8c4a6f6\">Tic-tac-toe in Lit</a></li>\n</ul>\n\n"
    } ,
  
    {
      "title"    : "My notes on Angular (Redux 14)",
      "category" : "front-end",
      "tags"     : "",
      "url"      : "/tech-blog/2022/09/25/my-notes-on-angular-redux-14.html",
      "date"     : "2022-09-25 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/angularbanner.png\" alt=\"\" /></p>\n\n<p>I was going over my Angular post back in 2017, <a href=\"/tech-blog/2017/11/23/my-notes-on-angular-2-0.html\">My notes on Angular (2.0+)</a>, and thought I should provide code examples from my Angular product catalog application demo that you can check out <a href=\"https://rodansotto.github.io/productcatalogdemo-angular14/products\">here</a> with the full source code <a href=\"https://github.com/rodansotto/productcatalogdemo-angular14\">here</a>.</p>\n\n<p>This post can serve as a quick refresher to the basic concepts we need to know to build a full running Angular application.</p>\n\n<p>I do think that these are the concepts that you can easily transfer to any modern front-end framework especially any web component based framework.</p>\n\n<p>Without further ado, let’s get down to it…</p>\n\n<h2 id=\"root-module\">Root module</h2>\n\n<p>Following Angular’s default directory structure, our root module would be in <a href=\"https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/app/app.module.ts\">/src/app/app.module.ts</a>:</p>\n\n<div class=\"language-ts highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">@</span><span class=\"nd\">NgModule</span><span class=\"p\">({</span>\n  <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"nx\">AppComponent</span><span class=\"p\">,</span>\n  <span class=\"p\">],</span>\n  <span class=\"na\">bootstrap</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">AppComponent</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppModule</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>What this code does is export a class named <code class=\"language-plaintext highlighter-rouge\">AppModule</code> and decorate it with Angular directive <code class=\"language-plaintext highlighter-rouge\">@NgModule</code> to indicate that this is an <a href=\"https://angular.io/guide/architecture-modules\">Angular module</a>.</p>\n\n<p>In <a href=\"https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/main.ts\">/src/main.ts</a>, our <code class=\"language-plaintext highlighter-rouge\">AppModule</code> is loaded at startup via call to <code class=\"language-plaintext highlighter-rouge\">bootstrapModule()</code>:</p>\n\n<div class=\"language-ts highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">platformBrowserDynamic</span><span class=\"p\">().</span><span class=\"nx\">bootstrapModule</span><span class=\"p\">(</span><span class=\"nx\">AppModule</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">err</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">));</span>\n</code></pre></div></div>\n\n<p>We also declare in our root module our root component <code class=\"language-plaintext highlighter-rouge\">AppComponent</code> via the <code class=\"language-plaintext highlighter-rouge\">declarations</code> property and we set it to load at startup via the <code class=\"language-plaintext highlighter-rouge\">bootstrap</code> property.  Note that the <code class=\"language-plaintext highlighter-rouge\">declarations</code> property is where you declare all Angular components that an Angular module requires.</p>\n\n<h2 id=\"root-component\">Root component</h2>\n\n<p>Our root component would be in <a href=\"https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/app/app.component.ts\">/src/app/app.component.ts</a>:</p>\n\n<div class=\"language-ts highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">app-root</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">templateUrl</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">./app.component.html</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">styleUrls</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">./app.component.css</span><span class=\"dl\">'</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">{</span>\n  <span class=\"nx\">title</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">productcatalogdemo-angular14</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>What this code does is export a class named <code class=\"language-plaintext highlighter-rouge\">AppComponent</code> with a property <code class=\"language-plaintext highlighter-rouge\">title</code> and decorate the class with Angular directive <code class=\"language-plaintext highlighter-rouge\">@Component</code> to indicate that this is an <a href=\"https://angular.io/guide/component-overview\">Angular component</a>.</p>\n\n<p>An Angular component is where we define our HTML and CSS, the UI for our application, and also the custom HTML tag name which in this case is <code class=\"language-plaintext highlighter-rouge\">&lt;app-root&gt;</code>.  Note that this follows the concept of <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\">Web Components</a>.</p>\n\n<p>If we look at the <a href=\"https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/index.html\">/src/index.html</a> file of our Angular application, the <code class=\"language-plaintext highlighter-rouge\">&lt;app-root&gt;</code> is added under the <code class=\"language-plaintext highlighter-rouge\">&lt;body&gt;</code> tag:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;body&gt;</span>\n  <span class=\"nt\">&lt;app-root&gt;&lt;/app-root&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre></div></div>\n\n<p>Note that I loosely called it root component because this will be the only entry point to our Angular application.  But we can have multiple entries if we declare and boostrap more than one component in our root module and add them in the <code class=\"language-plaintext highlighter-rouge\">index.html</code> file.  See <a href=\"https://angular.io/guide/bootstrapping#the-bootstrap-array\">The bootstrap array</a> for more info.</p>\n\n<h2 id=\"interpolation\">Interpolation</h2>\n\n<p><a href=\"https://angular.io/guide/interpolation\">Interpolation</a> is a way to embed values or expressions in an Angular component template.  It uses the double curly braces <code class=\"language-plaintext highlighter-rouge\">{{</code> and <code class=\"language-plaintext highlighter-rouge\">}}</code> as delimiters.</p>\n\n<p>Remember in our root component class <code class=\"language-plaintext highlighter-rouge\">AppComponent</code> we defined a property called <code class=\"language-plaintext highlighter-rouge\">title</code>?  We can embed this property inside the the component’s template in <code class=\"language-plaintext highlighter-rouge\">/src/app/app.component.html</code>:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div&gt;</span>{{ title }}<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<h2 id=\"template-variable\">Template Variable</h2>\n\n<p>There is also such thing as <a href=\"https://angular.io/guide/template-reference-variables\">template variable</a> in Angular which we don’t have an example in our Angular application.  Basically you can assign a variable to any HTML element (.e.g input, div, or even our own custom element) in a template using the hash symbol <code class=\"language-plaintext highlighter-rouge\">#</code> and refer to it from another part of the template.</p>\n\n<h2 id=\"property-binding\">Property binding</h2>\n\n<p>Good examples of <a href=\"https://angular.io/guide/property-binding\">property binding</a> can be found in our <code class=\"language-plaintext highlighter-rouge\">ProductListComponent</code>’s template in <a href=\"https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/app/product-list/product-list.component.html\">/src/app/product-list/product-list.component.html</a>:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;mat-paginator</span>\n  <span class=\"na\">[length]=</span><span class=\"s\">\"totalRecords\"</span>\n  <span class=\"na\">[pageSize]=</span><span class=\"s\">\"pageSize\"</span>\n  <span class=\"na\">[pageSizeOptions]=</span><span class=\"s\">\"pageSizeOptions\"</span>\n  <span class=\"na\">[pageIndex]=</span><span class=\"s\">\"page-1\"</span>\n  <span class=\"na\">(page)=</span><span class=\"s\">\"pageEvent($event)\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/mat-paginator&gt;</span>\n</code></pre></div></div>\n\n<p>Here we are setting the value of the <code class=\"language-plaintext highlighter-rouge\">length</code> attribute, among other things, of <code class=\"language-plaintext highlighter-rouge\">&lt;mat-paginator&gt;</code>.  Basically we enclose the attribute with the square brackets <code class=\"language-plaintext highlighter-rouge\">[</code> and <code class=\"language-plaintext highlighter-rouge\">]</code>:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[length]=\"totalRecords\"\n</code></pre></div></div>\n\n<p>to bind it to the value of <code class=\"language-plaintext highlighter-rouge\">totalRecords</code> where <code class=\"language-plaintext highlighter-rouge\">totalRecords</code> is a property in our <code class=\"language-plaintext highlighter-rouge\">ProductListComponent</code> in <a href=\"https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/app/product-list/product-list.component.ts\">/src/app/product-list/product-list.component.ts</a>.</p>\n\n<h2 id=\"event-binding\">Event binding</h2>\n\n<p>Similarly for <a href=\"https://angular.io/guide/event-binding\">event binding</a>, we enclose the event attribute, in this case the <code class=\"language-plaintext highlighter-rouge\">page</code> event attribute in our code example above, with the parentheses <code class=\"language-plaintext highlighter-rouge\">(</code> and <code class=\"language-plaintext highlighter-rouge\">)</code>:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(page)=\"pageEvent($event)\"\n</code></pre></div></div>\n\n<p>to bind it to the function <code class=\"language-plaintext highlighter-rouge\">pageEvent()</code> defined in our <code class=\"language-plaintext highlighter-rouge\">ProductListComponent</code>.  <code class=\"language-plaintext highlighter-rouge\">$event</code> is Angular’s event object that we need to pass to the function.</p>\n\n<h2 id=\"two-way-binding\">Two-way binding</h2>\n\n<p>We don’t have an example of <a href=\"https://angular.io/guide/two-way-binding\">two-way binding</a> in our Angular application.  One thing to note is that when doing two-way binding with form elements, the built-in attribute directive <a href=\"https://angular.io/guide/built-in-directives#ngModel\">NgModel</a> is used instead.</p>\n\n<p>So let’s say we have a form for editing our product in our catalog and to allow editing a product’s name we can use two-way binding on an <code class=\"language-plaintext highlighter-rouge\">&lt;input&gt;</code> element:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span> <span class=\"na\">[(ngModel)]=</span><span class=\"s\">\"product.Name\"</span><span class=\"nt\">&gt;</span>\n</code></pre></div></div>\n\n<p>, where <code class=\"language-plaintext highlighter-rouge\">product</code> is an object  defined in our product component and <code class=\"language-plaintext highlighter-rouge\">Name</code> is one of product’s properties.</p>\n\n<p>With two-way binding, we enclose the attribute with <code class=\"language-plaintext highlighter-rouge\">[(</code> and <code class=\"language-plaintext highlighter-rouge\">)]</code>.</p>\n\n<h2 id=\"built-in-attribute-directives\">Built-in attribute directives</h2>\n\n<p>We also don’t have examples of <a href=\"https://angular.io/guide/built-in-directives#built-in-attribute-directives\">built-in attribute directives</a> in our Angular application.  But one such attribute is the <code class=\"language-plaintext highlighter-rouge\">NgModel</code> mentioned above.  The other commonly used ones are: <code class=\"language-plaintext highlighter-rouge\">NgClass</code> and <code class=\"language-plaintext highlighter-rouge\">NgStyle</code>.</p>\n\n<h2 id=\"built-in-structural-directives\">Built-in structural directives</h2>\n\n<p>Our <code class=\"language-plaintext highlighter-rouge\">ProductListComponent</code>’s template in <a href=\"https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/app/product-list/product-list.component.html\">/src/app/product-list/product-list.component.html</a> has examples of some of Angular’s <a href=\"https://angular.io/guide/built-in-directives#built-in-structural-directives\">built-in structural directives</a>.</p>\n\n<p>One such built-in structural directive is <code class=\"language-plaintext highlighter-rouge\">*ngIf</code>:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;mat-progress-spinner</span>\n  <span class=\"na\">style=</span><span class=\"s\">\"margin-left: 10px;\"</span>\n  <span class=\"na\">*ngIf=</span><span class=\"s\">\"!productsLoaded\"</span>\n  <span class=\"na\">mode=</span><span class=\"s\">\"indeterminate\"</span>\n  <span class=\"na\">diameter=</span><span class=\"s\">\"25\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/mat-progress-spinner&gt;</span>\n</code></pre></div></div>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">*ngIf</code> directive here tells Angular to display or render the <code class=\"language-plaintext highlighter-rouge\">&lt;mat-progress-spinner&gt;</code> component if products have not been loaded yet or has not finished loading yet.  Note that <code class=\"language-plaintext highlighter-rouge\">productsLoaded</code> is a property of our <code class=\"language-plaintext highlighter-rouge\">ProductListComponent</code> in <a href=\"https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/app/product-list/product-list.component.ts\">/src/app/product-list/product-list.component.ts</a>.</p>\n\n<p>Another commonly used built-in structural directive is the <code class=\"language-plaintext highlighter-rouge\">*ngFor</code>:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">*ngFor=</span><span class=\"s\">\"let product of products\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;mat-card&gt;</span>\n    <span class=\"nt\">&lt;mat-card-content&gt;</span>\n      <span class=\"nt\">&lt;p&gt;</span>\n        {{product.ProductNumber}}\n        | {{product.ProductCategory}}\n        | {{product.ProductModel}}\n        | {{product.Color}}\n        | Sz {{product.Size}}\n        | Wt {{product.Weight}}\n      <span class=\"nt\">&lt;/p&gt;</span>\n    <span class=\"nt\">&lt;/mat-card-content&gt;</span>\n  <span class=\"nt\">&lt;/mat-card&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">*ngFor</code> directive iterates/loops over the containing HTML code, and in our example above, it iterates for each <code class=\"language-plaintext highlighter-rouge\">product</code> in the <code class=\"language-plaintext highlighter-rouge\">products</code> propery of our <code class=\"language-plaintext highlighter-rouge\">ProductListComponent</code> and displays a <code class=\"language-plaintext highlighter-rouge\">&lt;mat-card-content&gt;</code> component showing each product’s informations such as <code class=\"language-plaintext highlighter-rouge\">ProductNumber</code>, <code class=\"language-plaintext highlighter-rouge\">ProductCategory</code>, etc.</p>\n\n<h2 id=\"pipes\">Pipes</h2>\n\n<p>We use the character <code class=\"language-plaintext highlighter-rouge\">|</code> to indicate a pipe operation in Angular.  In our <code class=\"language-plaintext highlighter-rouge\">ProductListComponent</code>’s template, the <a href=\"https://angular.io/api/common/CurrencyPipe\">CurrencyPipe</a> is used to display all dollar amount values to currency format:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;mat-card-subtitle&gt;</span>{{product.ListPrice | currency}}<span class=\"nt\">&lt;/mat-card-subtitle&gt;</span>\n</code></pre></div></div>\n\n<h2 id=\"parent-to-child-component-interaction\">Parent to child component interaction</h2>\n\n<p>We don’t have an example of <a href=\"https://angular.io/guide/inputs-outputs#sending-data-to-a-child-component\">passing data from parent component to child component</a> in our Angular application.  But let’s say we decided to create our own card component for our single product named <code class=\"language-plaintext highlighter-rouge\">&lt;product-card&gt;</code> and we wanted to iterate over them, we could have the following modified template on our <code class=\"language-plaintext highlighter-rouge\">ProductListComponent</code>’s template:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">*ngFor=</span><span class=\"s\">\"let product of products\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;product-card</span> <span class=\"na\">[product]=</span><span class=\"s\">\"product\"</span><span class=\"nt\">&gt;&lt;/product-card&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>, where we are binding the <code class=\"language-plaintext highlighter-rouge\">product</code> attribute of the the <code class=\"language-plaintext highlighter-rouge\">&lt;product-card&gt;</code> to the iterated products of our <code class=\"language-plaintext highlighter-rouge\">*ngFor</code> directive.</p>\n\n<p>To add the <code class=\"language-plaintext highlighter-rouge\">product</code> attribute to our <code class=\"language-plaintext highlighter-rouge\">ProductCard</code> component, we use the <code class=\"language-plaintext highlighter-rouge\">@Input</code> decorator:</p>\n\n<div class=\"language-ts highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">product-card</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">templateUrl</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">./product-card.component.html</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">styleUrls</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">./product-card.component.css</span><span class=\"dl\">'</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">ProductCard</span> <span class=\"p\">{</span>\n  <span class=\"p\">@</span><span class=\"nd\">Input</span><span class=\"p\">()</span> <span class=\"nx\">product</span><span class=\"p\">:</span> <span class=\"nx\">Product</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This is like passing a custom property to our component.</p>\n\n<h2 id=\"child-to-parent-component-interaction\">Child to parent component interaction</h2>\n\n<p>To <a href=\"https://angular.io/guide/inputs-outputs#sending-data-to-a-parent-component\">pass data or information back to parent from a child component</a>, we use <code class=\"language-plaintext highlighter-rouge\">EventEmmitter</code> in Angular to expose an event from child that the parent can listen to.  To define an event, we use the <code class=\"language-plaintext highlighter-rouge\">@Output</code> decorator.</p>\n\n<p>For example, if we wanted to have a list of liked products in our product list page (our parent component) and everytime the <strong>Like</strong> button is clicked in our product card component (our child component), we would use the <code class=\"language-plaintext highlighter-rouge\">@Output</code> decorator to define our <code class=\"language-plaintext highlighter-rouge\">EventEmitter</code>.</p>\n\n<p>Back to our <code class=\"language-plaintext highlighter-rouge\">ProductCard</code> component (our child component), we would add the <code class=\"language-plaintext highlighter-rouge\">@Output</code> statement and the code to emit the event:</p>\n\n<div class=\"language-ts highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">ProductCard</span> <span class=\"p\">{</span>\n  <span class=\"p\">@</span><span class=\"nd\">Output</span><span class=\"p\">()</span> <span class=\"nx\">likedEventEmitter</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">EventEmitter</span><span class=\"o\">&lt;</span><span class=\"nx\">Product</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n\n  <span class=\"nx\">likeButtonClicked</span><span class=\"p\">(</span><span class=\"nx\">product</span><span class=\"p\">:</span> <span class=\"nx\">Product</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">likedEventEmitter</span><span class=\"p\">.</span><span class=\"nx\">emit</span><span class=\"p\">(</span><span class=\"nx\">product</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Then on our <code class=\"language-plaintext highlighter-rouge\">ProductListComponent</code>’s template (our parent component), we listen to the event emitted by our child component using event binding:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">*ngFor=</span><span class=\"s\">\"let product of products\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;product-card</span> \n    <span class=\"na\">[product]=</span><span class=\"s\">\"product\"</span>\n    <span class=\"na\">(likedEventEmitter)=</span><span class=\"s\">\"addLikedProduct($event)\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/product-card&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>, where <code class=\"language-plaintext highlighter-rouge\">addLikedProduct()</code> is a function defined in our <code class=\"language-plaintext highlighter-rouge\">ProductListComponent</code>.</p>\n\n<h2 id=\"lifecycle-hooks\">Lifecycle hooks</h2>\n\n<p>You will notice in our <code class=\"language-plaintext highlighter-rouge\">ProductListComponent</code> in <a href=\"https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/app/product-list/product-list.component.ts\">/src/app/product-list/product-list.component.ts</a> in its declaration that it’s implementing an interface called <code class=\"language-plaintext highlighter-rouge\">OnInit</code>:</p>\n\n<div class=\"language-ts highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">ProductListComponent</span> <span class=\"k\">implements</span> <span class=\"nx\">OnInit</span> <span class=\"p\">{</span>\n</code></pre></div></div>\n\n<p>That is to say we would like our component to implement the <code class=\"language-plaintext highlighter-rouge\">ngOnInit()</code> method:</p>\n\n<div class=\"language-ts highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"nx\">ngOnInit</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getProducts</span><span class=\"p\">();</span> <span class=\"c1\">// load products on load</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">ngOnInit()</code> is one of the most common <a href=\"https://angular.io/guide/lifecycle-hooks\">lifecycle hooks</a> available in Angular that we can use.  Other commons ones are: <code class=\"language-plaintext highlighter-rouge\">ngOnChanges()</code> and <code class=\"language-plaintext highlighter-rouge\">ngOnDestroy()</code>.</p>\n\n<h2 id=\"service\">Service</h2>\n<p><a href=\"https://angular.io/guide/architecture-services\">Angular service</a> is a way to separate logic from view, from Angular component.  It is decorated as <code class=\"language-plaintext highlighter-rouge\">@Injectable</code>, declared in Angular module as a provider, and injected to an Angular component.</p>\n\n<p>An example of an Angular service in our Angular application is the <code class=\"language-plaintext highlighter-rouge\">ProductService</code> in <a href=\"https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/app/product-service/product.service.ts\">/src/app/product-service/product.service.ts</a>:</p>\n\n<div class=\"language-ts highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">ProductService</span> <span class=\"p\">{</span>\n  <span class=\"k\">async</span> <span class=\"nx\">getProducts</span><span class=\"p\">(...)</span> <span class=\"p\">{</span>\n    <span class=\"p\">...</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">orderBy</span><span class=\"p\">(...)</span> <span class=\"p\">{</span>\n    <span class=\"p\">...</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In our <code class=\"language-plaintext highlighter-rouge\">AppModule</code> in <a href=\"https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/app/app.module.ts\">/src/app/app.module.ts</a> we list our <code class=\"language-plaintext highlighter-rouge\">ProductService</code> as a provider via the <code class=\"language-plaintext highlighter-rouge\">providers</code> property:</p>\n\n<div class=\"language-ts highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">@</span><span class=\"nd\">NgModule</span><span class=\"p\">({</span>\n  <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"nx\">AppComponent</span><span class=\"p\">,</span>\n    <span class=\"nx\">ProductListComponent</span><span class=\"p\">,</span>\n  <span class=\"p\">],</span>\n  <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">ProductService</span><span class=\"p\">],</span>\n  <span class=\"na\">bootstrap</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">AppComponent</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppModule</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Then our <code class=\"language-plaintext highlighter-rouge\">ProductService</code> is injected to the <code class=\"language-plaintext highlighter-rouge\">ProductListComponent</code>’s constructor in <a href=\"https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/app/product-list/product-list.component.ts\">/src/app/product-list/product-list.component.ts</a> so our product list component can call functions of our product service such as <code class=\"language-plaintext highlighter-rouge\">getProducts()</code>.</p>\n\n<div class=\"language-ts highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">ProductListComponent</span><span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"k\">private</span> <span class=\"nx\">_productService</span><span class=\"p\">:</span> <span class=\"nx\">ProductService</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n  <span class=\"p\">...</span>\n   <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">_productService</span><span class=\"p\">.</span><span class=\"nx\">getProducts</span><span class=\"p\">(...);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"routing\">Routing</h2>\n<p>Routing enables us to build a single page application where you can navigate from one view to the next without requesting a whole new page from the server.  The <a href=\"https://angular.io/guide/routing-overview\">Angular router</a> provides us such feature.</p>\n\n<p>We have routing in our Angular application and they are defined in the routing module in <a href=\"https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/app/app-routing.module.ts\">/src/app/app-routing.module.ts</a>:</p>\n\n<div class=\"language-ts highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">RouterModule</span><span class=\"p\">,</span> <span class=\"nx\">Routes</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@angular/router</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">routes</span><span class=\"p\">:</span> <span class=\"nx\">Routes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"p\">{</span> <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">products</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"na\">component</span><span class=\"p\">:</span> <span class=\"nx\">ProductListComponent</span> <span class=\"p\">},</span>\n  <span class=\"p\">{</span> <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">**</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"na\">component</span><span class=\"p\">:</span> <span class=\"nx\">PageNotFoundComponent</span> <span class=\"p\">}</span>\n<span class=\"p\">];</span>\n\n<span class=\"p\">@</span><span class=\"nd\">NgModule</span><span class=\"p\">({</span>\n  <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">RouterModule</span><span class=\"p\">.</span><span class=\"nx\">forRoot</span><span class=\"p\">(</span><span class=\"nx\">routes</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">useHash</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">})],</span>\n  <span class=\"na\">exports</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">RouterModule</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppRoutingModule</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The variable <code class=\"language-plaintext highlighter-rouge\">routes</code> contains our route definitions and basically we are saying that for any url path (including the base path <code class=\"language-plaintext highlighter-rouge\">'/'</code>) other than <code class=\"language-plaintext highlighter-rouge\">/products</code> we show the <code class=\"language-plaintext highlighter-rouge\">Page Not Found</code> component, as indicated by the wildcard route <code class=\"language-plaintext highlighter-rouge\">'**'</code>.  Only the url path <code class=\"language-plaintext highlighter-rouge\">/products</code> will show our product list component, our Angular product catalog application.</p>\n\n<p>The routed view is then shown on the template of our root component AppComponent in <a href=\"https://github.com/rodansotto/productcatalogdemo-angular14/blob/main/src/app/app.component.html\">/src/app/app.component.html</a>.  In Angular, the routed views render in the <code class=\"language-plaintext highlighter-rouge\">&lt;router-outlet&gt;</code>.</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">style=</span><span class=\"s\">\"padding:20px\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;router-outlet&gt;&lt;/router-outlet&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<h2 id=\"forms\">Forms</h2>\n\n<p>We don’t have forms on our Angular application.  But if you are having forms in you web application, you have the option to use <a href=\"https://angular.io/guide/forms-overview\">Angular forms</a>.  Maybe I will do a separate post on this when I add forms in our Angular application.  But for now just be aware that in Angular, there are two approaches to implementing forms: the more simplistic <code class=\"language-plaintext highlighter-rouge\">template-driven forms</code> and the more robust and scalable <code class=\"language-plaintext highlighter-rouge\">reactive forms</code>.</p>\n\n<h2 id=\"additional-reference\">Additional Reference</h2>\n\n<p>There is this Youtube video that I watched (here is the <a href=\"https://www.youtube.com/watch?v=IYI0em-xT28\">link</a>) that goes through these concepts.  It’s a long video, like 4 hours, but it’s totally worth it.  For just a quick refresher you can set the playback to 2x which I totally did and still understandable.</p>\n"
    } ,
  
    {
      "title"    : "Multi-threading in C#: Task-Based Asynchronous Pattern (TAP)",
      "category" : "c-sharp",
      "tags"     : "",
      "url"      : "/tech-blog/2022/09/06/task-based-async-pattern.html",
      "date"     : "2022-09-06 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/csthread.png\" alt=\"\" /></p>\n\n<table>\n  <tbody>\n    <tr>\n      <td>[DEMO CODE](https://dotnetfiddle.net/xer6Iv)</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Since .NET Framework 4, <a href=\"https://docs.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap?source=recommendations\">Task-Based Asynchronous Pattern (TAP)</a> is Microsoft’s recommended way of developing multi-threaded applications in C#.  Before that, it was <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.threading?view=net-6.0\">Threads</a>.  I’ve briefly covered the basics of threads and provided links to them in my 2017 post <a href=\"/tech-blog/2017/11/16/multi-threading-in-c-a-must-have-in-your-programming-arsenal-imo.html\">Multi-threading in C#: A must have in your programming arsenal (IMO)</a>.  In fact all of the links there are still valid and still serve as a good refresher.  <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks?view=net-6.0\">Tasks</a> are part of Microsoft’s <a href=\"https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/task-parallel-library-tpl\">Task Parallel Libray (TPL)</a> which also covers parallel programming.  For a complete guide to .NET’s parallel programming, visit <a href=\"https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/\">Parallel programming in .NET</a>.</p>\n\n<p>I created a demo code on my .NET Fiddle library, <a href=\"https://dotnetfiddle.net/xer6Iv\">Threads vs Tasks</a>, illustrating how to program both threads and tasks in C#.  Tasks in C# is akin to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promises in JavaScript</a>.  It is much easier to code with tasks than with threads but with threads of course we have more control.  We do get code running faster with threads over tasks but threads are less scalable in terms of memory.  With tasks, thread pooling is automatic thereby reducing chance of running out of memory when scaling to a large number of running tasks.  We can implement thread pooling in threads but that complicates our code and thus much harder to understand.</p>\n\n<p>Check out the sample output below from running the demo code on my .NET Fiddle library:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Running Threads...\nWorker 01 Thread Id 04: Running...\nWorker 02 Thread Id 05: Running...\nWorker 03 Thread Id 06: Running...\nWorker 04 Thread Id 07: Running...\nWorker 05 Thread Id 08: Running...\nWorker 06 Thread Id 09: Running...\nWorker 07 Thread Id 10: Running...\nWorker 08 Thread Id 11: Running...\nWorker 09 Thread Id 12: Running...\nWorker 10 Thread Id 13: Running...\nWorker 03 Thread Id 06: Done 100ms\nWorker 01 Thread Id 04: Done 100ms\nWorker 04 Thread Id 07: Done 100ms\nWorker 02 Thread Id 05: Done 100ms\nWorker 05 Thread Id 08: Done 100ms\nWorker 06 Thread Id 09: Done 100ms\nWorker 07 Thread Id 10: Done 100ms\nWorker 08 Thread Id 11: Done 100ms\nWorker 09 Thread Id 12: Done 100ms\nWorker 10 Thread Id 13: Done 100ms\nAll Threads Completed 105ms\n\nRunning Tasks Using New, Start, and Wait...\nWorker 02 Thread Id 16: Running...\nWorker 01 Thread Id 14: Running...\nWorker 03 Thread Id 18: Running...\nWorker 04 Thread Id 17: Running...\nWorker 02 Thread Id 16: Done 100ms\nWorker 01 Thread Id 14: Done 100ms\nWorker 03 Thread Id 18: Done 100ms\nWorker 05 Thread Id 14: Running...\nWorker 06 Thread Id 18: Running...\nWorker 07 Thread Id 16: Running...\nWorker 04 Thread Id 17: Done 100ms\nWorker 08 Thread Id 17: Running...\nWorker 05 Thread Id 14: Done 100ms\nWorker 06 Thread Id 18: Done 100ms\nWorker 10 Thread Id 18: Running...\nWorker 09 Thread Id 14: Running...\nWorker 07 Thread Id 16: Done 100ms\nWorker 08 Thread Id 17: Done 100ms\nWorker 10 Thread Id 18: Done 100ms\nWorker 09 Thread Id 14: Done 100ms\nAll Tasks Completed 304ms\n\n</code></pre></div></div>\n\n<p>You will notice we spawned <code class=\"language-plaintext highlighter-rouge\">10 threads</code> that run the same block of code that takes <code class=\"language-plaintext highlighter-rouge\">100ms</code> to finish.  And all <code class=\"language-plaintext highlighter-rouge\">10 threads</code> completed in a span of just <code class=\"language-plaintext highlighter-rouge\">105ms</code>.</p>\n\n<p>With tasks however, when we spawned <code class=\"language-plaintext highlighter-rouge\">10 tasks</code>, only <code class=\"language-plaintext highlighter-rouge\">4 threads</code> were created and were reused to complete all our tasks.  And thus it took a span of <code class=\"language-plaintext highlighter-rouge\">304ms</code> for all <code class=\"language-plaintext highlighter-rouge\">10 tasks</code> to complete.</p>\n\n<p>This goes to show that with tasks, threads and thread pooling are being handled for you.  See <a href=\"https://docs.microsoft.com/en-us/dotnet/standard/threading/the-managed-thread-pool\">The managed thread pool</a> to learn more.</p>\n\n<p>Tasks or not, we still need to be aware though of the synchronization primitives and how to use them properly for when our tasks or threads need to share a resource or coordinate interaction.  In my next post or maybe my next demo code I will illustrate the use of these synchronization primitives.  For the meantime you can check <a href=\"https://docs.microsoft.com/en-us/dotnet/standard/threading/overview-of-synchronization-primitives\">Overview of synchronization primitives</a> for a list of these synchronization primitives in C#.</p>\n"
    } ,
  
    {
      "title"    : "How I Trained A Simple Neural Network In C# To Recognize Numbers 0-9",
      "category" : "ai",
      "tags"     : "",
      "url"      : "/tech-blog/2022/08/07/how-i-trained-my-csharp-neural-network.html",
      "date"     : "2022-08-07 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/ann/ann-number-recognizer.png\" alt=\"\" /></p>\n\n<p>[Looking for the code? Find it <a href=\"https://dotnetfiddle.net/0aI8Ea\">here</a>.  You can run the code as well]</p>\n\n<p>As promised in my previous post <a href=\"/tech-blog/2022/07/06/a-simple-neural-network-in-c-sharp.html\">here</a>, I was able to come up with a very simple and very specific problem that our simple neural network in C# can solve just to show in it’s very basic implementation how artificial neural network works.</p>\n\n<p>For our problem, I went with recognizing a number from <strong>0</strong> to <strong>9</strong> in an image. And to scale our problem down further in order to simplify things, I went with a <strong>5 pixels wide and 7 pixels high image</strong> with just <strong>black and white</strong> color, a <strong>0</strong> or <strong>1</strong> in value.  Trying to avoid the complexities brought by having a full RGB image, thus no need for any convolutional processing as we are just testing a very simple neural network.</p>\n\n<p>Here is our image of the numbers 0-9 that we would like our neural network to recognize.  Note that we are not doing any classifying here, just recognizing these numbers in it’s exact layout/format for simplicity.</p>\n\n<p><img src=\"/tech-blog/assets/images/ann/numbers-in-grid.png\" alt=\"\" /></p>\n\n<p>Next thing we want to decide  is what kind of output do we want our neural network to return when training with this input data.  I decided to have the neural network to output these values corresponding to the numbers in its the input.  I also have to divide them by 10 as our neural network apparently only works with values between 0 and 1 (inclusive).</p>\n\n<p>Expected output: $ [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.0 ] $</p>\n\n<p>We also need to decide how to represent the input image to our neural network.  We have to transform our 2D image data into 1D array of decimal values.  Since we have 7 pixels high in the image representing 7 rows, I decided to have <strong>7 decimal values in our 1D array</strong>.  In the image below for number 5, I assigned the first row with a decimal value of 14 which corresponds to the binary value 01110 which is the bit representation of our 5 pixel row.</p>\n\n<p><img src=\"/tech-blog/assets/images/ann/number-5-input.png\" alt=\"\" /></p>\n\n<p>So below is what our input for all numbers will be like.  Note that we need to transform these values so they lie in the range from 0 to 1.  I had to divide them by 31 before feeding them to the neural network.  Why 31?  It is because since we have 5 pixels in a row, the maximum value that we can have for a row is where all bits are set to 1 which is 11111, a binary value that converts to 31 in decimal.</p>\n<div class=\"language-cs highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"p\">{</span> <span class=\"m\">4</span><span class=\"p\">,</span> <span class=\"m\">12</span><span class=\"p\">,</span> <span class=\"m\">4</span><span class=\"p\">,</span> <span class=\"m\">4</span><span class=\"p\">,</span> <span class=\"m\">4</span><span class=\"p\">,</span> <span class=\"m\">4</span><span class=\"p\">,</span> <span class=\"m\">4</span> <span class=\"p\">},</span>       <span class=\"c1\">// number 1</span>\n    <span class=\"p\">{</span> <span class=\"m\">6</span><span class=\"p\">,</span> <span class=\"m\">9</span><span class=\"p\">,</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">2</span><span class=\"p\">,</span> <span class=\"m\">4</span><span class=\"p\">,</span> <span class=\"m\">8</span><span class=\"p\">,</span> <span class=\"m\">15</span> <span class=\"p\">},</span>       <span class=\"c1\">// number 2</span>\n    <span class=\"p\">{</span> <span class=\"m\">6</span><span class=\"p\">,</span> <span class=\"m\">9</span><span class=\"p\">,</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">6</span><span class=\"p\">,</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">9</span><span class=\"p\">,</span> <span class=\"m\">6</span> <span class=\"p\">},</span>        <span class=\"c1\">// number 3</span>\n    <span class=\"p\">{</span> <span class=\"m\">3</span><span class=\"p\">,</span> <span class=\"m\">5</span><span class=\"p\">,</span> <span class=\"m\">5</span><span class=\"p\">,</span> <span class=\"m\">9</span><span class=\"p\">,</span> <span class=\"m\">15</span><span class=\"p\">,</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">1</span> <span class=\"p\">},</span>       <span class=\"c1\">// number 4</span>\n    <span class=\"p\">{</span> <span class=\"m\">14</span><span class=\"p\">,</span> <span class=\"m\">8</span><span class=\"p\">,</span> <span class=\"m\">8</span><span class=\"p\">,</span> <span class=\"m\">14</span><span class=\"p\">,</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">14</span> <span class=\"p\">},</span>     <span class=\"c1\">// number 5</span>\n    <span class=\"p\">{</span> <span class=\"m\">6</span><span class=\"p\">,</span> <span class=\"m\">9</span><span class=\"p\">,</span> <span class=\"m\">16</span><span class=\"p\">,</span> <span class=\"m\">14</span><span class=\"p\">,</span> <span class=\"m\">17</span><span class=\"p\">,</span> <span class=\"m\">17</span><span class=\"p\">,</span> <span class=\"m\">14</span> <span class=\"p\">},</span>   <span class=\"c1\">// number 6</span>\n    <span class=\"p\">{</span> <span class=\"m\">14</span><span class=\"p\">,</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">2</span><span class=\"p\">,</span> <span class=\"m\">2</span><span class=\"p\">,</span> <span class=\"m\">4</span><span class=\"p\">,</span> <span class=\"m\">4</span> <span class=\"p\">},</span>       <span class=\"c1\">// number 7</span>\n    <span class=\"p\">{</span> <span class=\"m\">6</span><span class=\"p\">,</span> <span class=\"m\">9</span><span class=\"p\">,</span> <span class=\"m\">9</span><span class=\"p\">,</span> <span class=\"m\">6</span><span class=\"p\">,</span> <span class=\"m\">9</span><span class=\"p\">,</span> <span class=\"m\">9</span><span class=\"p\">,</span> <span class=\"m\">6</span> <span class=\"p\">},</span>        <span class=\"c1\">// number 8</span>\n    <span class=\"p\">{</span> <span class=\"m\">6</span><span class=\"p\">,</span> <span class=\"m\">9</span><span class=\"p\">,</span> <span class=\"m\">9</span><span class=\"p\">,</span> <span class=\"m\">9</span><span class=\"p\">,</span> <span class=\"m\">7</span><span class=\"p\">,</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">6</span> <span class=\"p\">},</span>        <span class=\"c1\">// number 9</span>\n    <span class=\"p\">{</span> <span class=\"m\">6</span><span class=\"p\">,</span> <span class=\"m\">9</span><span class=\"p\">,</span> <span class=\"m\">9</span><span class=\"p\">,</span> <span class=\"m\">9</span><span class=\"p\">,</span> <span class=\"m\">9</span><span class=\"p\">,</span> <span class=\"m\">9</span><span class=\"p\">,</span> <span class=\"m\">6</span> <span class=\"p\">},</span>        <span class=\"c1\">// number 0</span>\n</code></pre></div></div>\n\n<p>Now that we have our input and expected output defined, we now have to decide how our neural network would look like.  Definitely our <strong>input layer will have 7 neurons</strong> as our input data is an array of 7 decimal values.  Our <strong>output layer will have 1 neuron</strong>.  As for the hidden layers, I opted for only <strong>1 hidden layer with 4 neurons</strong>.  And I used the <strong>Sigmoid function</strong> as the activation function for our hidden and output layers.</p>\n\n<p><img src=\"/tech-blog/assets/images/ann/ann-layout.png\" alt=\"\" /></p>\n<blockquote>\n  <p>*schematic generated using <a href=\"https://alexlenail.me/NN-SVG/index.html\">NN-SVG</a></p>\n</blockquote>\n\n<p>Once we have our layout, we are ready to train.  I left the <strong>number of epochs</strong> for our training to <strong>10000</strong>.  By the  way, I also found myself making the following code changes to make this work:</p>\n<ul>\n  <li>One of them is having a static instance of a <code class=\"language-plaintext highlighter-rouge\">Random</code> object instead of creating multiple of them to make sure our initial weight values are randomly generated.</li>\n  <li>Another is changing the calculation of delta in <code class=\"language-plaintext highlighter-rouge\">HandleOutputLayer()</code> and <code class=\"language-plaintext highlighter-rouge\">HandleHiddenLayers()</code> to not multiply by <code class=\"language-plaintext highlighter-rouge\">-1</code> as it will not work otherwise.</li>\n  <li>Lastly, bumping the <code class=\"language-plaintext highlighter-rouge\">_learningRate</code> to a high value of <code class=\"language-plaintext highlighter-rouge\">20</code>.</li>\n</ul>\n\n<p>Please note I have to play around with the input and output data, learning rate, number of epochs, etc. to arrive at these decisions and get it to work.  It was a learning experience to me.  So the instant I got the result below, I was so ecstatic that I couldn’t believe that I would be able to do it, in C#!.  I was actually about to give up and go with Python instead.  But I persisted.</p>\n\n<p><img src=\"/tech-blog/assets/images/ann/test-results2.png\" alt=\"\" /></p>\n\n<p><strong>So what is next for this?</strong>  Well if you notice you have to run the code couple more times or so to get it to recognize the number properly.  That’s because you have to train it everytime you run it as it does not store the trained state/model of our neural network.  So saving a model would be the next step definitely.  And maybe implement a basic convolutional neural network might be in the works too depending on time and difficulty.  Was also thinking of incorporating speech, etc. but that is looking ahead too far.  For now we will see how it goes.  But just happy I was able to do this, and in C#, not in Python :).</p>\n"
    } ,
  
    {
      "title"    : "From CloudFormation To Serverless Framework To Cloud Development Kit?",
      "category" : "cloud",
      "tags"     : "",
      "url"      : "/tech-blog/2022/08/02/from-cloudformation-to-serverless-to-cdk.html",
      "date"     : "2022-08-02 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/cloud.png\" alt=\"\" /></p>\n\n<h3 id=\"aws-cloudformation\">AWS CloudFormation</h3>\n\n<p>Had the chance to work on <a href=\"https://aws.amazon.com/cloudformation/\">AWS CloudFormation</a> in my job.  And I did not like it actually.  Had a hard time reading it honestly.  For those who is not familiar with CloudFormation, it’s AWS’s way of provisioning infrastructure in the cloud as code.</p>\n\n<p>Coming from a programming background, having to write and understand a CloudFormation script is a steep learning curve for me.  I call it a script because it does behave like a script that you run but instead of running code it creates your cloud infrastructure for you.  AWS actually calls it a <strong>CloudFormation template</strong>.</p>\n\n<h4 id=\"yaml\">YAML</h4>\n<p>Below is how a CloudFormation template looks.  It’s just a snippet and it’s in YAML format.</p>\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">Resources</span><span class=\"pi\">:</span> \n  <span class=\"na\">MyInstance</span><span class=\"pi\">:</span> \n    <span class=\"na\">Type</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">AWS::EC2::Instance\"</span>\n    <span class=\"na\">Properties</span><span class=\"pi\">:</span> \n      <span class=\"na\">ImageId</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">ami-0ff8a91507f77f867\"</span>\n      <span class=\"na\">SecurityGroups</span><span class=\"pi\">:</span> <span class=\"kt\">!If</span> <span class=\"pi\">[</span><span class=\"nv\">CreateNewSecurityGroup</span><span class=\"pi\">,</span> <span class=\"kt\">!Ref</span> <span class=\"nv\">NewSecurityGroup</span><span class=\"pi\">,</span> <span class=\"kt\">!Ref</span> <span class=\"nv\">ExistingSecurityGroup</span><span class=\"pi\">]</span>\n  <span class=\"na\">NewSecurityGroup</span><span class=\"pi\">:</span> \n    <span class=\"na\">Type</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">AWS::EC2::SecurityGroup\"</span>\n    <span class=\"na\">Condition</span><span class=\"pi\">:</span> <span class=\"s\">CreateNewSecurityGroup</span>\n    <span class=\"na\">Properties</span><span class=\"pi\">:</span> \n      <span class=\"na\">GroupDescription</span><span class=\"pi\">:</span> <span class=\"s\">Enable HTTP access via port </span><span class=\"m\">80</span>\n      <span class=\"na\">SecurityGroupIngress</span><span class=\"pi\">:</span> \n        <span class=\"pi\">-</span> \n          <span class=\"na\">IpProtocol</span><span class=\"pi\">:</span> <span class=\"s\">tcp</span>\n          <span class=\"na\">FromPort</span><span class=\"pi\">:</span> <span class=\"m\">80</span>\n          <span class=\"na\">ToPort</span><span class=\"pi\">:</span> <span class=\"m\">80</span>\n          <span class=\"na\">CidrIp</span><span class=\"pi\">:</span> <span class=\"s\">0.0.0.0/0</span>\n</code></pre></div></div>\n\n<h4 id=\"json\">JSON</h4>\n<p>You can also write the template in JSON.  Below is a snippet:</p>\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"w\">  </span><span class=\"nl\">\"Resources\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"S3Bucket\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"Type\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"AWS::S3::Bucket\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"Properties\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"AccessControl\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"PublicRead\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"WebsiteConfiguration\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n          </span><span class=\"nl\">\"IndexDocument\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"index.html\"</span><span class=\"p\">,</span><span class=\"w\">\n          </span><span class=\"nl\">\"ErrorDocument\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"error.html\"</span><span class=\"w\">\n         </span><span class=\"p\">}</span><span class=\"w\">\n      </span><span class=\"p\">},</span><span class=\"w\">\n      </span><span class=\"nl\">\"DeletionPolicy\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Retain\"</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"err\">,</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<h3 id=\"serverless-framework\">Serverless Framework</h3>\n\n<p>Then came the <a href=\"https://www.serverless.com/\">Serverless Framework</a> which I also had the opportunity to use in my job.  This is an open source project and it’s similar to AWS Cloudformation in that you can write the instructions to provision your cloud infrastructure in a plain text file.  I found this more easier to write and read probably because it’s less typing involved and less verbose?</p>\n\n<p>Serverless framework is popular among developers for deploying AWS Lambda functions, which is probably why I like this better than AWS CloudFormation.  It will build, package and deploy code for you with one simple command: <code class=\"language-plaintext highlighter-rouge\">serverless deploy</code>.</p>\n\n<h4 id=\"yaml-1\">YAML</h4>\n<p>Below is a sample serverless yaml (<strong>serverless.yml</strong>) file:</p>\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">service</span><span class=\"pi\">:</span> <span class=\"s\">users</span>\n\n<span class=\"na\">functions</span><span class=\"pi\">:</span> <span class=\"c1\"># Your \"Functions\"</span>\n  <span class=\"na\">usersCreate</span><span class=\"pi\">:</span>\n    <span class=\"na\">events</span><span class=\"pi\">:</span> <span class=\"c1\"># The \"Events\" that trigger this function</span>\n      <span class=\"pi\">-</span> <span class=\"na\">httpApi</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">POST</span><span class=\"nv\"> </span><span class=\"s\">/users/create'</span>\n  <span class=\"na\">usersDelete</span><span class=\"pi\">:</span>\n    <span class=\"na\">events</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">httpApi</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">DELETE</span><span class=\"nv\"> </span><span class=\"s\">/users/delete'</span>\n\n<span class=\"na\">resources</span><span class=\"pi\">:</span> <span class=\"c1\"># The \"Resources\" your \"Functions\" use. Raw AWS CloudFormation goes in here.</span>\n</code></pre></div></div>\n\n<p>It can be written in JSON format as well (<strong>serverless.json</strong>) just like in AWS CloudFormation.  In addition, which I didn’t know until now, you can write it in JavaScript (<strong>serverless.js</strong>) and TypeScript (<strong>serverless.ts</strong>) too.  Man, this is getting better.</p>\n\n<h4 id=\"javascript\">JavaScript</h4>\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"dl\">'</span><span class=\"s1\">use strict</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// serverless.js</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">users</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">functions</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">usersCreate</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">events</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n          <span class=\"na\">httpApi</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">POST /users/create</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n      <span class=\"p\">],</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\">// ...</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">resources</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<h4 id=\"typescript\">TypeScript</h4>\n<div class=\"language-ts highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Requiring @types/serverless in your project package.json</span>\n<span class=\"k\">import</span> <span class=\"kd\">type</span> <span class=\"p\">{</span> <span class=\"nx\">Serverless</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">serverless/aws</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// serverless.ts</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">serverlessConfiguration</span><span class=\"p\">:</span> <span class=\"nx\">Serverless</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">users</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">functions</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">usersCreate</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">events</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n          <span class=\"na\">httpApi</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">POST /users/create</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n      <span class=\"p\">],</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\">// ...</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">resources</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n<span class=\"p\">};</span>\n\n<span class=\"kr\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">serverlessConfiguration</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<h3 id=\"aws-cloud-development-kit\">AWS Cloud Development Kit</h3>\n<p>Now with <a href=\"https://aws.amazon.com/cdk/\">AWS Cloud Development Kit</a>, or CDK, (I think it’s the newer kid in this group if I’m not mistaken), you can write the instructions using familiar programming languages like <strong>Python</strong>, <strong>Java</strong>, and <strong>C#</strong>.  Yeah you read that right.  I’m a C# developer so maybe I can use this instead.</p>\n\n<h4 id=\"c\">C#</h4>\n<p>So below is what a cloud stack in C# looks like.  With CDK, you create a cloud stack in your programming language.</p>\n<div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">using</span> <span class=\"nn\">Amazon.CDK</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"nn\">Amazon.CDK.AWS.S3</span><span class=\"p\">;</span>\n\n<span class=\"k\">namespace</span> <span class=\"nn\">HelloCdk</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">HelloCdkStack</span> <span class=\"p\">:</span> <span class=\"n\">Stack</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">public</span> <span class=\"nf\">HelloCdkStack</span><span class=\"p\">(</span><span class=\"n\">App</span> <span class=\"n\">scope</span><span class=\"p\">,</span> <span class=\"kt\">string</span> <span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">IStackProps</span> <span class=\"n\">props</span><span class=\"p\">=</span><span class=\"k\">null</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"k\">base</span><span class=\"p\">(</span><span class=\"n\">scope</span><span class=\"p\">,</span> <span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">new</span> <span class=\"nf\">Bucket</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"s\">\"MyFirstBucket\"</span><span class=\"p\">,</span> <span class=\"k\">new</span> <span class=\"n\">BucketProps</span>\n            <span class=\"p\">{</span>\n                <span class=\"n\">Versioned</span> <span class=\"p\">=</span> <span class=\"k\">true</span>\n            <span class=\"p\">});</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Then you run the <code class=\"language-plaintext highlighter-rouge\">cdk synth</code> command to output the below CloudFormation template for you:</p>\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">Resources</span><span class=\"pi\">:</span>\n  <span class=\"na\">MyFirstBucketB8884501</span><span class=\"pi\">:</span>\n    <span class=\"na\">Type</span><span class=\"pi\">:</span> <span class=\"s\">AWS::S3::Bucket</span>\n    <span class=\"na\">Properties</span><span class=\"pi\">:</span>\n      <span class=\"na\">VersioningConfiguration</span><span class=\"pi\">:</span>\n        <span class=\"na\">Status</span><span class=\"pi\">:</span> <span class=\"s\">Enabled</span>\n    <span class=\"na\">UpdateReplacePolicy</span><span class=\"pi\">:</span> <span class=\"s\">Retain</span>\n    <span class=\"na\">DeletionPolicy</span><span class=\"pi\">:</span> <span class=\"s\">Retain</span>\n    <span class=\"s\">Metadata:...</span>\n</code></pre></div></div>\n\n<p>To deploy, you just run the <code class=\"language-plaintext highlighter-rouge\">cdk deploy</code> command.  I’m really liking this more than AWS CloudFormation for sure.  But compared to Serverless framework?  Well I have yet to use CDK before I can decide.</p>\n\n<p>So which one do you prefer?  Whichever one you choose, I hope it’s right for you.  I am just glad that we have these options, don’t you think?</p>\n\n<h3 id=\"references\">References</h3>\n<ul>\n  <li><a href=\"https://aws.amazon.com/cloudformation/\">AWS CloudFormation</a></li>\n  <li><a href=\"https://www.serverless.com/\">Serverless Framework</a></li>\n  <li><a href=\"https://aws.amazon.com/cdk/\">AWS Cloud Development Kit</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "Branches of Mathematics, Solving Equations and Calculating Derivatives",
      "category" : "math",
      "tags"     : "",
      "url"      : "/tech-blog/2022/07/14/math-equations-derivatives.html",
      "date"     : "2022-07-14 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/math.png\" alt=\"\" /></p>\n\n<p>The need for Math is real when diving deep into AI which I found myself scrambling.  Thus I made it my mission to brush up on my math.</p>\n\n<h3 id=\"branches-of-mathematics\">Branches of Mathematics</h3>\n\n<h4 id=\"traditional-branches\">Traditional Branches</h4>\n<p>I do recall the following traditional branches of Math being taught in school but could not say I still know them all:</p>\n\n<ul>\n  <li><strong>Arithmetic</strong> - study of numbers using various operations on them such as addition, subtraction, multiplication, and division</li>\n  <li><strong>Algebra</strong> - study of variables, expressions and equations such as linear equations and quadratic equations</li>\n  <li><strong>Geometry</strong> - study of shapes such as points, lines, angles, surfaces, and solids</li>\n  <li><strong>Trigonometry</strong> - study of triangles specifically side lengths and angles</li>\n  <li><strong>Calculus</strong> - study of continuous change or rate of change</li>\n</ul>\n\n<p>And those are just touching the fundamentals as there are also advanced topics within those branches.  There is a whole swat of other fields in Math that I do not know.  It’s actually so hard to categorize them, classify them, divide them into parts so that it would be easy to navigate between them.  I am basically thrown into the ocean or into the <a href=\"/tech-blog/assets/images/math/mathematics_trench.jpg\">math trench</a> on my own, and it’s up to me to navigate them.</p>\n\n<h4 id=\"advanced-branches\">Advanced Branches</h4>\n<p>There are other branches that maybe worth looking into beyond Calculus to further widen your knowledge in Math, explore the math trench as I would say.  Here are some of them:</p>\n\n<ul>\n  <li><strong>Discrete Math</strong> - antithesis of Calculus; a broad field involving anything that can be separated into discrete objects, with topics like <strong>Formal Logic</strong>, <strong>Counting Problems</strong>, and <strong>Graph Theory</strong></li>\n  <li><strong>Real Analysis</strong> - heart of Calculus; an important field that provides justification for all of Calculus; studies the behavior of real numbers, sequences and series of real numbers, and real functions</li>\n  <li><strong>Complex Analysis</strong> - analysis that takes real functions and extends them to the complex plane; investigates functions of complex numbers</li>\n  <li><strong>Modern/Abstract Algebra</strong> - an advanced field in Algebra;  the study of algebraic structures such as groups, rings, fields, modules, vector spaces, lattices, and algebras</li>\n  <li><strong>Linear Algebra</strong> - study involving linear equations; of lines and planes, vector spaces and mappings that are required for linear transforms</li>\n  <li><strong>Differential Geometry</strong> - studies the geometry of smooth shapes and smooth spaces, otherwise known as smooth manifolds using differential calculus, integral calculus, linear algebra and multilinear algebra</li>\n  <li><strong>Probability and Statistics</strong> - <strong>Probability</strong> deals with predicting the likelihood of future events, while <strong>Statistics</strong> involves the analysis of the frequency of past events</li>\n  <li><strong>Numerical Methods</strong> -  a mathematical tool designed to solve numerical problems in <strong>Numerical Analysis</strong>, which is the study of algorithms that use numerical approximation for the problems of mathematical analysis</li>\n  <li><strong>Information Theory and Signal Processing</strong> - <strong>Information Theory</strong> is the scientific study of the quantification, storage, and communication of digital information while <strong>Signal Processing</strong> is analyzing, modifying, and synthesizing signals such as sound, images, and scientific measurements</li>\n</ul>\n\n<h4 id=\"branches-for-ai\">Branches for AI</h4>\n<p>And there are these branches of Math that you will need when diving deep into AI.  Besides <strong>Linear Algebra</strong>, the following are some of them:</p>\n\n<ul>\n  <li><strong>Analytic Geometry</strong> - also known as coordinate geometry or <strong>Cartesian geometry</strong>, is the study of geometry using a coordinate system</li>\n  <li><strong>Matric Decompositions</strong> - in linear algebra, a matrix decomposition or matrix factorization is a factorization of a matrix into a product of matrices</li>\n  <li><strong>Vector Calculus</strong> - or vector analysis, is concerned with differentiation and integration of vector fields, primarily in 3-dimensional Euclidean space $ R^3 $</li>\n  <li><strong>Probability and Distributions</strong> - in <strong>Probability and Statistics</strong>, a <strong>probability distribution</strong> is a statistical function that describes all the possible values and likelihoods that a random variable can take within a given range</li>\n  <li><strong>Continuous Optimization</strong> - as opposed to <strong>Discrete Optimization</strong>, the variables used in the objective function are required to be continuous variables—that is, to be chosen from a set of real values between which there are no gaps</li>\n</ul>\n\n<h4 id=\"specific-concepts-for-ai\">Specific Concepts for AI</h4>\n<p>To be more specific, the following are some of the concepts you will need:</p>\n<ul>\n  <li>In <strong>Algebra</strong>, they are the <em>Exponents</em>, <em>Radicals</em>, <em>Factorials</em>, <em>Summations</em>, <em>Scientific Notations</em></li>\n  <li>In <strong>Linear Algebra</strong>, they are the <em>Scalars</em>, <em>Vectors</em>, <em>Matrices</em>, <em>Tensors</em>, <em>Eigenvectors &amp; Eigenvalues</em>, <em>Singular Value Decomposition</em>, <em>Principal Component Analysis (PCA)</em></li>\n  <li>In <strong>Calculus</strong>, they are the <em>Derivatives</em>, <em>Vector/Matrix Calculus</em>, <em>Gradient Algorithms</em></li>\n  <li>In <strong>Probability and Statistics</strong>, they are the <em>Basic Statistics</em>, <em>Basic rules in probability</em>, <em>Random variables</em>, <em>Bayes’ Theorem</em>, <em>Maximum Likelihood Estimation (MLE)</em>, <em>Common Distributions</em></li>\n  <li>In <strong>Information Theory</strong>, they are the <em>Entropy</em>, <em>Cross-Entropy</em>, <em>Kullback Leibler Divergence</em>, <em>Viterbi Algorithm</em>, <em>Encoder-Decoder</em></li>\n</ul>\n\n<p>To learn more about these concepts, check this article <a href=\"https://www.freecodecamp.org/news/all-the-math-you-need-in-artificial-intelligence/\">All the Math You Need to Know in Artificial Intelligence</a>.</p>\n\n<p>As you can see now, it’s really daunting how much math you need to know when getting into AI.  I don’t expect to know them all at once but at least I know for now what they are which I can get into more depth as needed.</p>\n\n<h3 id=\"solving-equations\">Solving Equations</h3>\n<p>For now it would be wise to know how to solve equations as I find this will help in understanding the formulas, computations, or calculations that abound in AI.</p>\n\n<h4 id=\"techniques\">Techniques</h4>\n<p>To solve equations, you need to know some basic techniques and these techniques are:</p>\n<ul>\n  <li><a href=\"https://www.mathsisfun.com/algebra/introduction.html\">Add or Subtract</a> the same value from both sides (the balancing method)\n<img src=\"/tech-blog/assets/images/math/addsubvalbothsides.png\" alt=\"\" /></li>\n  <li>Clear out any fractions by <a href=\"https://www.mathsisfun.com/algebra/introduction-multiply.html\">Multiplying</a> every term by the bottom parts, and in case of multiple fractions multiplying by their <a href=\"https://www.cuemath.com/numbers/least-common-denominator-lcd/\">LCD</a>\n<img src=\"/tech-blog/assets/images/math/multeverytermbybottompart.png\" alt=\"\" /></li>\n  <li>If there are decimals, multiply both sides of the equation by the lowest <a href=\"https://www.cuemath.com/numbers/powers-of-10/\">power of 10</a> to convert them into whole numbers</li>\n  <li>Divide every term by the same nonzero value\n<img src=\"/tech-blog/assets/images/math/diveveryterm.png\" alt=\"\" /></li>\n  <li><a href=\"https://www.mathsisfun.com/algebra/like-terms.html\">Combine Like Terms</a>\n<img src=\"/tech-blog/assets/images/math/combineliketerms.png\" alt=\"\" /></li>\n  <li><a href=\"https://www.mathsisfun.com/algebra/factoring.html\">Factoring</a> and using <a href=\"https://www.cuemath.com/numbers/distributive-property/\">Distributive Property</a>\n<img src=\"/tech-blog/assets/images/math/factor.png\" alt=\"\" /></li>\n  <li><a href=\"https://www.mathsisfun.com/algebra/expanding.html\">Expanding</a> (the opposite of factoring) may also help\n<img src=\"/tech-blog/assets/images/math/expand.png\" alt=\"\" /></li>\n  <li>Recognizing a pattern, such as the <a href=\"https://www.mathsisfun.com/algebra/special-binomial-products.html\">difference of squares</a>\n<img src=\"/tech-blog/assets/images/math/diffofsq.png\" alt=\"\" /></li>\n  <li>Sometimes we can apply a function to both sides (e.g. square both sides)\n<img src=\"/tech-blog/assets/images/math/sqbothsides.png\" alt=\"\" /></li>\n</ul>\n\n<h4 id=\"rules-formulas--properties\">Rules, Formulas,  Properties</h4>\n<p>The rules, formulas, and properties in the different fields of Mathematics are tools for solving equations. You need to know them as well.  The following infographics lists some of them.</p>\n\n<h5 id=\"algebra\">Algebra</h5>\n<p>In <strong>Algebra</strong> you have: associative, commutative, and distributive properties; arithmetic operations rules; properties of exponents, radicals, inequalities, absolute values, complex numbers, logarithms, and polynomials; common factoring techniques; quadratic equation formula.</p>\n\n<p><img src=\"/tech-blog/assets/images/math/algebra.webp\" alt=\"\" /></p>\n\n<h5 id=\"geometry\">Geometry</h5>\n<p>In <strong>Geometry</strong> you have:  circumference and area formulas for square, rectangle, circle, triangle, parallelogram, and trapezoid; area of a circular ring as well as the area and segment length of a circular sector; area and volume of rectangular box, cube, and cylinder; area, side length, and volume of a right circular cone, as well as the volume of a frustum of a cone; pythagorean theorem.</p>\n\n<p><img src=\"/tech-blog/assets/images/math/geometry-shapes-solids.webp\" alt=\"\" /></p>\n\n<h5 id=\"trigonometry\">Trigonometry</h5>\n\n<p>In <strong>Trigonometry</strong> you have: right triangle definitions for sine, cosine, tangent, cosecant, secant, and cotangent; unit circle definitions for all trig functions; range, domain and period for each of the trig functions; inverse trig function notation as well as domain and range.</p>\n\n<p><img src=\"/tech-blog/assets/images/math/trigonometry-definition.webp\" alt=\"\" /></p>\n\n<p>And you have trigonometry laws and identities such as: law of cosines, law of sines, and law of tangents; tangent identities, reciprocal identities, Pythagorean identities, periodic identities, even/odd identities, double angle identities, half angle identities, product to sum identities, sum to product identities, sum/difference identities, and cofunction identities; Mollweide’s formula.</p>\n\n<p><img src=\"/tech-blog/assets/images/math/trigonometry-laws-and-identities.webp\" alt=\"\" /></p>\n\n<h5 id=\"calculus\">Calculus</h5>\n<p>In <strong>Calculus Derivatives and Limits</strong> you have: mean value theorem, derivative’s basic properties; common derivative formulas; product rule, quotient rule, power rule, chain rule, and L’Hopital’s rule; properties of limits, limit evaluations at infinity; limit evaluation method for factoring and cancelling.</p>\n\n<p><img src=\"/tech-blog/assets/images/math/calculus-derivatives-limits.webp\" alt=\"\" /></p>\n\n<p>In <strong>Calculus Integrals</strong> you have: fundamental theorem of calculus, integration properties, methods for approximating definite integrals such as left hand rectangle, right hand rectangle, midpoint rule, trapezoid rule, and Simpson’s rule; common integrals; trigonometric substitution when using integrals; integration by substitution as well as the integration by parts.</p>\n\n<p><img src=\"/tech-blog/assets/images/math/calculus-integrals.webp\" alt=\"\" /></p>\n\n<h3 id=\"calculating-derivatives\">Calculating Derivatives</h3>\n<p>I wanted to focus here on how to get the derivative of the composition of two or more functions as you will need this in understanding the backpropagation algorithm used in machine learning</p>\n\n<p>A <strong>composition of function</strong> is defined as:</p>\n\n<p>$ h(x) = f(g(x)) $</p>\n\n<p>The <strong>derivative</strong> then is defined as, using the <strong>chain rule</strong> depicted in the previous infographic for the calculus derivatives and limits:</p>\n\n<p>$ \\frac{d}{dx}(f(g(x))) =  f’(g(x)){\\cdot}g’(x) = \\frac{df}{dg}{\\cdot}\\frac{dg}{dx} $</p>\n\n<p>Let’s use a simple example.  Say you have this function:</p>\n\n<p>$ A = 1 + B^2 $</p>\n\n<p>And $ B $ is also another function:</p>\n\n<p>$ B = \\frac{1}{1 + C} $</p>\n\n<p>And $ C $ is yet another function (we will be using a composition of three functions for this example):</p>\n\n<p>$ C = 2x $, where $ x $ has a value of $ 5 $.</p>\n\n<p>Get the derivative of $ A $ <strong>with respect to</strong> $ x $, in other words, what’s the <strong>effect on the output</strong> $ A $ <strong>given a change in variable</strong> $ x $?</p>\n\n<p>Using substitution, you will end up with this all encompassing single function:</p>\n\n<p>$ A(x) = 1 + {\\frac{1}{1 + {2x}}}^2 $</p>\n\n<p>You can try to get the derivative of this function straight away, but in cases where you have a more complex looking function it might be difficult.  This is where the <strong>chain rule</strong> can be useful.  Using the <strong>chain rule</strong>, we can have:</p>\n\n<p>$ \\frac{dA}{dx} = A’(B(C(x))){\\cdot}B’(C(x)){\\cdot}C’(x) $</p>\n\n<p>$ = \\frac{dA}{dB}{\\cdot}\\frac{dB}{dC}{\\cdot}\\frac{dC}{dx} $</p>\n\n<p>Then we get the derivatives for $ A $, $ B $, and $ C $ separately.</p>\n\n<p>For the first derivative,</p>\n\n<p>$ \\frac{dA}{dB} = \\frac{d}{dB}(1 + B^2) $</p>\n\n<p>, since <strong>derivative of a constant is 0</strong> and using <strong>power rule</strong> you get</p>\n\n<p>$ = 0 + 2B = 2B $</p>\n\n<p>For the second derivative,</p>\n\n<p>$ \\frac{dB}{dC} = \\frac{d}{dC}(\\frac{1}{1 + C}) $</p>\n\n<p>, using <strong>quotient rule</strong> you get</p>\n\n<p>$ = \\frac{0{\\cdot}(1 + C) - 1{\\cdot}1}{(1 + C)^2} = \\frac{-1}{(1 + C)^2} $</p>\n\n<p>And for the third derivative,</p>\n\n<p>$ \\frac{dC}{dx} = \\frac{d}{dx}(2x) = 2{\\cdot}C’(x) = 2 $</p>\n\n<p>Multiplying them all together, we have:</p>\n\n<p>$ A’(x) = 2B{\\cdot}(\\frac{-1}{(1 + C)^2}){\\cdot}2 $</p>\n\n<p>You can simplify that equation further or substitute with values to get the derivative, since we know $ x = 5 $.</p>\n\n<p>So there you go.  Having been able to get the derivative is a step closer to appreciating Math again, at least for me.  And having a good knowledge of different Maths will definitely serve you well not just in the area of AI, but in games, financial, blockchain and metaverse.</p>\n\n<h3 id=\"references\">References</h3>\n<ul>\n  <li><a href=\"https://www.cantorsparadise.com/beyond-calculus-the-math-classes-you-didnt-take-d0365ac42e41\">Beyond Calculus: The Math Classes You Didn’t Take</a></li>\n  <li><a href=\"https://mml-book.github.io/book/mml-book.pdf\">Mathematics For Machine Learning (PDF)</a></li>\n  <li><a href=\"https://www.freecodecamp.org/news/all-the-math-you-need-in-artificial-intelligence/\">All the Math You Need to Know in Artificial Intelligence</a></li>\n  <li><a href=\"https://www.mathsisfun.com/algebra/equations-solving.html\">Solving Equations from MathIsFun</a></li>\n  <li><a href=\"https://www.cuemath.com/algebra/solving-an-equation/\">Solving Equations from CueMath</a></li>\n  <li><a href=\"http://www.sosmath.com/algebra/solve/solve0/solve0.html\">Solving Equations from S.O.S. Math</a></li>\n  <li><a href=\"https://sites.austincc.edu/tsiprep/math-review/\">Math Review</a></li>\n  <li><a href=\"https://www.eeweb.com/tools/math-help/\">Math Reference Sheets</a></li>\n  <li><a href=\"https://www.rapidtables.com/math/symbols/index.html\">Mathematical Symbols</a></li>\n  <li><a href=\"https://www.khanacademy.org/math/calculus-1/cs1-derivatives-definition-and-basic-rules\">Derivatives: definition and basic rules</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "A Simple Neural Network In C#",
      "category" : "ai",
      "tags"     : "",
      "url"      : "/tech-blog/2022/07/06/a-simple-neural-network-in-c-sharp.html",
      "date"     : "2022-07-06 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/aibloglogo.png\" alt=\"\" /></p>\n\n<p><em>(Note: I have the code up on my .NET C# Fiddle libray <a href=\"https://dotnetfiddle.net/0aI8Ea\">here</a> where you can check it and run it online)</em></p>\n\n<p>There is definitely no good time to explore this than now and it just so happens I stumbled upon this really great article <a href=\"https://rubikscode.net/2022/07/04/implementing-simple-neural-network-in-c/\">here</a> talking about creating a simple neural network in C#.</p>\n\n<p>As I’ve mentioned in my 2017 post <a href=\"/tech-blog/2017/10/27/ai-anyone.html\">here</a>, I have been wanting to explore this avenue on AI, this <strong>Artificial Neural Network</strong> (<strong>ANN</strong>).  Why I picked ANN is because truth be told I had my first rodeo with AI back in my University days when I was assisting someone doing his Master’s thesis on ANN which he implemented in C++ language (just to be clear, I was completing my Bachelor and not Master at the time).  Yeah, ANN has been around for a while now.</p>\n\n<p>To give a brief explanation of it as I can, <strong>Artificial Neural Network</strong> is patterned after our own biological neural network the nervous system, which is why it’s called ANN.  It has the same smallest building units as the <strong>neurons</strong>, with simulated connections like the <strong>synapses</strong>, and with <strong>weighted inputs</strong> and outputs for receiving and sending (or <strong>propagating</strong>) signals (or values), from and to neighboring neurons.  The neurons in ANN are grouped into <strong>layers</strong> and connections are made between these layers.  And on top of it, a <a href=\"https://rubikscode.net/2018/01/22/backpropagation-algorithm-in-artificial-neural-networks/\">backpropagation algorithm</a> is usually used as the fastest way to update weights in the ANNs when <strong>training/error correcting</strong>.  This backpropagation algorithm is complex and maybe I can dive into this more next time.</p>\n\n<p>But it does seem easy to understand the basic structure of an ANN, right.  Don’t be fooled but the complexity lies in the functions that handle/process input and what weights they come in and to come up with an output or not and what the output value is and how error correction is handled and back propagating it, meaning how much to change the input weights so next time it is trained again it gets closer and closer to the desired output.  So there is a lot of math involved here.  And plus how many neurons to place in a layer and how many layers to setup also affect how good the ANN learns.  Don’t quote me on this yet, as I have not really dived deep into this, but that is based on what I understood during that time in my University days and it actually makes sense if you think about it.</p>\n\n<p>For now, I pulled this code into my .NET C# Fiddle libray <a href=\"https://dotnetfiddle.net/0aI8Ea\">here</a> where I can play with it and run it online (e.g. train ANN) and get to understand how ANN works really, if I’m near to what my initial understanding is.  However, the provided initial training model does not actually do anything (e.g. what is it learning to solve the problem).  But it’s a good start for a neural network C# implementation that I can work on and improve on.  Really excited I came across this, can’t wait to play with it.</p>\n\n<p>By the way, the original code (from the author of the article) is actually available in GitHub <a href=\"https://github.com/NMZivkovic/SimpleNeuralNetworkInCSharp\">here</a>.</p>\n\n<p><strong>References:</strong></p>\n<ul>\n  <li><a href=\"https://rubikscode.net/2018/02/19/artificial-neural-networks-series/\">Artificial Neural Networks Series</a> - this is actually the home page that contains a list of links to other great articles on AI, Deep Learning, and Neural Networks in their site</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "Back to the Roots with Algorithms",
      "category" : "algorithms",
      "tags"     : "",
      "url"      : "/tech-blog/2022/07/04/back-to-the-roots-with-algorithms.html",
      "date"     : "2022-07-04 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/my-net-fiddle.png\" alt=\"\" /></p>\n\n<h3 id=\"data-structures\">Data Structures</h3>\n<p>This is about algorithms but data structures are also important and one cannot do without the other.  So first a refresher on data structures.</p>\n\n<ul>\n  <li><strong>Data structure</strong> is the organization of data in the computer</li>\n  <li>The following are the basic data structures in computer programming: <strong>Array</strong>, <strong>Linked</strong> <strong>List</strong>, <strong>Stack</strong>, <strong>Queue</strong>, <strong>Tree</strong>, and <strong>Graph</strong>.</li>\n  <li><strong>Array</strong> is pretty much the most common and basic one of them all that software developers used often.  It is used to store multiple items together in contiguous memory locations.</li>\n  <li><strong>Linked List</strong> stores multiple items as well but in separate locations and are linked using pointers that tells you where the next item is.  Some applications are:\n    <ol>\n      <li>Implement dynamic memory management functions of operating system</li>\n      <li>Polynomial implementation for mathematical operations</li>\n      <li>As circular linked list to implement OS or application functions that require round robin execution of tasks</li>\n      <li>When a user uses the alt+tab key combination to browse through the opened application to select a desired application</li>\n      <li>As circular queue to maintain the playing sequence of multiple players in a game</li>\n    </ol>\n  </li>\n  <li><strong>Stack</strong> is a linear data structure that dictates the order in which operations are performed.  It’s a last in first out (<strong>LIFO</strong>) or first in last out (<strong>FILO</strong>) operation.  Some applications are:\n    <ol>\n      <li>Manage function calls including nested operations, recursive operations</li>\n      <li>Checking, evaluating, converting expressions in various programming languages</li>\n      <li>In all the problems solutions based on backtracking</li>\n      <li>Used in depth first search in graph and tree traversal</li>\n      <li>Operating system functions</li>\n      <li>Undo and redo functions in an editor</li>\n    </ol>\n  </li>\n  <li><strong>Queue</strong> is similar to stack but it’s a first in first out (<strong>FIFO</strong>) operation.  Some applications are:\n    <ol>\n      <li>Used in breadth search operation in graphs</li>\n      <li>Job scheduling, CPU scheduling, disk scheduling, printer buffer, keyboard buffer in operating systems</li>\n      <li>Data transfer between peripheral devices and CPU</li>\n      <li>Interrupts generated by the user applications for CPU</li>\n      <li>Calls handled by the customers</li>\n    </ol>\n  </li>\n  <li><strong>Tree</strong> is a non-linear data structure whose elements can have more than 1 children. One kind of tree that is commonly referred to as <strong>Binary Tree</strong> has at most 2 children.  Binary tree node contains the data, a pointer to the left child and a pointer to the right child.  Some applications of a tree data structure are:\n    <ol>\n      <li>Implementing the hierarchical structures in computer systems like directory and file system</li>\n      <li>Decision making in gaming applications</li>\n      <li>Parsing of expressions and statements in programming language compilers</li>\n      <li>Hash trees</li>\n      <li>Path-finding algorithm to implement in AI, robotics and video games applications</li>\n    </ol>\n  </li>\n  <li><strong>Graph</strong> is a non-linear data structure consisting of a finite set of vertices (or nodes) and set of edges which connect a pair of nodes.  Some applications are:\n    <ol>\n      <li>Representing networks and routes in communication, transportation and travel applications</li>\n      <li>Interconnections in social networks and other network based applications</li>\n      <li>Mapping applications</li>\n      <li>Resource utilization and availability in an organization</li>\n      <li>Robotic motion and neural networks</li>\n    </ol>\n  </li>\n  <li>There are some more data structures out there but the above is enough to start with.  And having listed the applications they can be used for gives them much deserving appreciation and importance.</li>\n  <li>You can check <a href=\"https://docs.microsoft.com/en-us/dotnet/standard/collections\">.NET Collections and Data Structures</a> from Microsoft for the data structures available in .NET and their complexities as well.</li>\n  <li>Additionally look at <a href=\"https://dev.to/adavidoaiei/fundamental-data-structures-and-algorithms-in-c-4ocf\">Fundamental Data Structures and Algorithms in C#</a> to get a visual explanation and C# code example of the above data structures.</li>\n  <li>For Javascript, check <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\">JavaScript data types and data structures</a> from Mozilla.  It has in ECMAScript 6 new data structures such as <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a>.</li>\n  <li>And for visual explanation and Javascript code example check <a href=\"https://www.freecodecamp.org/news/data-structures-in-javascript-with-examples/\">Data Structures in JavaScript – With Code Examples</a>.</li>\n</ul>\n\n<h3 id=\"algorithms\">Algorithms</h3>\n<p>Now that we got the data structures out of the way, let’s get on with algorithms.</p>\n\n<ul>\n  <li><strong>Algorithm</strong> is a set of instructions to solve a class of specific problems or to perform a computation.</li>\n  <li>In <strong>Asymptotic Analysis</strong>, the <strong>performance (or complexity) of an algorithm is evaluated in terms of input size</strong> (not the actual running time). It’s calculated by <strong>how the time (or space) taken by an algorithm increases with the input size</strong>.</li>\n  <li>One of 3 asymptotic anotations is the <strong>Big O notation</strong> (e.g. $ O(N) $) which defines an upper bound of an algorithm (worst case).</li>\n  <li>\n    <p>The following are the common <strong>Order-of-growth classifications</strong>, from fastest to slowest:</p>\n\n    <table>\n      <thead>\n        <tr>\n          <th>name</th>\n          <th>order of growth</th>\n          <th>description</th>\n          <th>example</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>Constant</td>\n          <td>$ 1 $</td>\n          <td>statement</td>\n          <td>add 2 numbers</td>\n        </tr>\n        <tr>\n          <td>Logarithmic</td>\n          <td>$ log \\ N $ (barely slower than constant)</td>\n          <td>divide in half</td>\n          <td>binary search</td>\n        </tr>\n        <tr>\n          <td>Linear</td>\n          <td>$ N $</td>\n          <td>loop</td>\n          <td>find the maximum</td>\n        </tr>\n        <tr>\n          <td>Linearithmic</td>\n          <td>$ N \\ log \\ N $</td>\n          <td>divide and conquer</td>\n          <td>mergesort</td>\n        </tr>\n        <tr>\n          <td>Quadratic</td>\n          <td>$ N ^ {2} $</td>\n          <td>double loop</td>\n          <td>check all pairs</td>\n        </tr>\n        <tr>\n          <td>Cubic</td>\n          <td>$ N ^ {3} $</td>\n          <td>triple loop</td>\n          <td>check all triples</td>\n        </tr>\n        <tr>\n          <td>Exponential</td>\n          <td>$ 2 ^ {N} $</td>\n          <td>exhaustive search</td>\n          <td>check all subsets</td>\n        </tr>\n      </tbody>\n    </table>\n  </li>\n  <li>There is also this <strong>Amortized Analysis</strong> that is used for algorithms where an occasional operation is very slow, but most of the other operations are faster. In Amortized Analysis, a sequence of operations is analyzed and guarantees a worst-case average time that is lower than the worst-case time of a particularly expensive operation.</li>\n  <li>Following are some types of algorithms based on their implementation:\n    <ul>\n      <li><strong>Brute force</strong> is a direct and straightforward technique of solving problems in which all possible ways to a given problem is enumerated.  Best for solving small and simple problems.</li>\n      <li><strong>Recursive</strong> involves a function calling itself directly or indirectly, performing same operations multiple times with different inputs, and with a base condition to stop recursion.</li>\n      <li><strong>Divide and Conquer</strong> involves dividing the problem into smaller sub-problems, solving them recursively, then combining them to get final solution of the whole problem.</li>\n      <li><strong>Dynamic programming</strong> is also known as the <strong>memoization technique</strong> because in this, the idea is to store the previously calculated result to avoid calculating it again and again.</li>\n      <li><strong>Greedy Algorithm</strong> is where the solution is built part by part. The decision to choose the next part is done on the basis that it gives the immediate benefit. It never considers the choices that had taken previously. E.g. <strong>Dijkstra shortest path algorithm</strong>.</li>\n      <li><strong>Backtracking</strong> solves the problem in an incremental way i.e. it is an algorithmic-technique for solving problems recursively by trying to build a solution incrementally, one piece at a time, removing those solutions that fail to satisfy the constraints of the problem at any point of time.</li>\n    </ul>\n  </li>\n  <li>And you have other types of algorithms based on their purpose:\n    <ul>\n      <li><strong>Sorting Algorithm</strong> is used to rearrange a given array or list elements according to a comparison operator on the elements.  And following are the known sorting algorithms around:\n        <ul>\n          <li><strong>Selection Sort</strong></li>\n          <li><strong>Bubble Sort</strong></li>\n          <li><strong>Insertion Sort</strong></li>\n          <li><strong>Merge Sort</strong></li>\n          <li><strong>Quicksort</strong></li>\n          <li><strong>Heapsort</strong></li>\n          <li><strong>Iterative Heapsort</strong></li>\n          <li><strong>Counting Sort</strong></li>\n          <li><strong>Radix Sort</strong></li>\n          <li><strong>Bucket Sort</strong></li>\n        </ul>\n      </li>\n      <li><strong>Searching Algorithm</strong> is designed to check for an element or retrieve an element from any data structure where it is stored.  They are further classified into:\n        <ul>\n          <li>Sequential Search (e.g. <strong>Linear Search</strong>)</li>\n          <li>Interval Search (e.g. <strong>Binary Search</strong>)</li>\n        </ul>\n      </li>\n      <li><strong>Pattern Search Algorithm</strong> also known as <strong>String Search Algorithm</strong> is designed for searching a string within another string</li>\n      <li><strong>Mathematical Algorithm</strong> (e.g. <strong>Fibonacci</strong>, <strong>Greatest Common Denominator</strong>)</li>\n      <li><strong>Geometric Algorithm</strong> is designed to solve Geometric Problems and require in-depth knowledge of different mathematical subjects like combinatorics, topology, algebra, differential geometry etc. (e.g. <strong>Lines</strong>, <strong>Triangles</strong>, <strong>3D Objects</strong>, <strong>Polygons</strong>)</li>\n      <li><strong>Graph Algorithm</strong> (e.g. <strong>Breadth First Search</strong>, <strong>Depth First Search</strong>, <strong>Cycle</strong>, <strong>Shortest Paths</strong>)</li>\n    </ul>\n  </li>\n</ul>\n\n<h3 id=\"whats-next\">What’s Next</h3>\n<p>There’s a ton more things to know about algorithms (and data structures) and what best way to be familiar with them is to implement them using your favorite programming language.  So I started implementing my own solutions to some of the algorithm problems out there, the code you can see and run on <a href=\"https://dotnetfiddle.net/Authors/224214/Rodan%20Sotto\">My .NET C# Fiddle library</a>.</p>\n\n<p>So far at the time of this posting, I managed to work on these algorithm problems: <strong>Robot Bounded in Circle</strong>, <strong>Maximize Score After N Operations</strong>, <strong>All Combination of Numbers Sum to Target</strong>, and <strong>Fractional Knapsack</strong>.  I will be building that library as I continue implementing different kinds of algorithms.  And that I feel is the best way to learn and make them stick longer.  I am also planning on implementing them on Javascript and Python, so really I’m excited about this journey.</p>\n\n<h3 id=\"references\">References</h3>\n<ul>\n  <li><a href=\"https://csveda.com/data-structure/applications-of-data-structures\">Applications of Data Structures from CSVeda</a></li>\n  <li><a href=\"https://www.geeksforgeeks.org/data-structures\">Data Structures from GeeksForGeeks</a></li>\n  <li><a href=\"https://www.geeksforgeeks.org/fundamentals-of-algorithms\">Algorithms from GeeksForGeeks</a></li>\n  <li><a href=\"https://algs4.cs.princeton.edu/home\">Algorithms, 4th Edition from Sedgewick and Wayne</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "Is This Still Working In 2022 ?!?!",
      "category" : "general",
      "tags"     : "",
      "url"      : "/tech-blog/2022/06/19/is-this-still-working-in-2022.html",
      "date"     : "2022-06-19 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/hello-verse.png\" alt=\"\" /></p>\n\n<p>I haven’t made a post for almost 5 years now since I took this job which I’m still at right now.  I’m going 5 years in this job pretty soon.  Part of the reason is of course the pandemic.  The other is it just kept me busy and kept me learning… and I learned a lot.  But what’s with the title then?  I thought of posting this on LinkedIn and see if that title catches attention.</p>\n\n<p>Anyways, that aside, I just wanted to share that I put up my web site again (as it was down for while now) and this time hosted on GitHub at <a href=\"https://rodansotto.github.io\">rodansotto.github.io</a>.  I thought it makes sense for my web site which features coding projects I did in my spare time, to live besides their source code.  Yes I have uploaded my source code to GitHub and this will be my code repository moving forward.  You can see my repositories at <a href=\"https://github.com/rodansotto\">github.com/rodansotto</a>.  Also, I migrated my technical blog from WordPress to GitHub and it’s now at <a href=\"https://rodansotto.github.io/tech-blog\">rodansotto.github.io/tech-blog</a>.  So if you are reading this now, then you are reading this on GitHub.</p>\n\n<p>Enough of the intro, let’s get down to business.  I wanted to share in this post what I learned as a software developer in the last almost 5 years and anything else I want to learn further moving forward.  I will not go into details on each one of them as I want to keep this post from getting too long.  Just going to list them out for now.</p>\n\n<p>As far as back end technologies goes, here is a list of things I learned:</p>\n<ul>\n  <li><a href=\"https://servicestack.net/\">Servicestack</a> on C# .NET Framework for creating RESTful APIs for the front end to call (before ASP.Net MVC API and ASP.Net Core were available)</li>\n  <li><a href=\"https://swagger.io/\">Swagger</a> (came with Servicestack) for viewing those APIs and trying them out in a browser</li>\n  <li><a href=\"https://aws.amazon.com/\">Amazon Web Services (AWS)</a>: EC2, S3, Athena, CloudFront, CloudWatch, Elasticsearch,  RDS, SES, SNS, SQS, CloudFormation, IAM, Lambda, Management Console, Systems Manager - App Management</li>\n  <li><a href=\"https://cloud.google.com/\">Google Cloud Platform</a>: BigQuery, Cloud Storage, Cloud Functions, Cloud Scheduler, IAM,</li>\n  <li>3rd Party API Integrations: <a href=\"https://www.lever.co/\">Lever</a>, <a href=\"https://www.smartsheet.com/\">Smartsheet</a>, <a href=\"https://www.manageengine.com/products/service-desk/\">ServiceDeskPlus</a>, <a href=\"https://slack.com/\">Slack</a></li>\n  <li>Databases: <a href=\"https://www.postgresql.org/\">PostgreSQL</a>, <a href=\"https://www.mongodb.com/atlas/database\">MongoDB</a> / <a href=\"https://www.mongodb.com/docs/drivers/csharp/\">MongoDB C#/.NET Driver</a></li>\n  <li><a href=\"https://nunit.org/\">NUnit</a> for unit-testing .NET code</li>\n  <li>Others: <a href=\"https://www.puppeteersharp.com/\">Puppeteer</a> for scraping LinkedIn profiles, <a href=\"https://www.elastic.co/elasticsearch/\">Elasticsearch</a> (here is the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html\">reference</a>), <a href=\"https://www.elastic.co/guide/en/kibana/current/index.html\">Kibana</a></li>\n</ul>\n\n<p>And for front end technologies:</p>\n<ul>\n  <li><a href=\"https://mithril.js.org/\">Mithril</a> a not so new Javascript framework for building single page applications in MVC style</li>\n  <li><a href=\"https://www.typescriptlang.org/\">Typescript</a> for coding with type checking in Javascript</li>\n  <li><a href=\"https://lit.dev/\">Lit</a> a library for building fast, lightweight <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\">web components</a></li>\n  <li><a href=\"https://vaadin.com/router\">Vaadin Router</a> for client-side routing of web components</li>\n  <li><a href=\"https://redux.js.org/\">Redux</a> for managing state in Javascript applications</li>\n  <li><a href=\"https://github.com/carbon-design-system/carbon-web-components\">Carbon Web Components</a> a variant of <a href=\"https://carbondesignsystem.com/\">Carbon Design System</a> implemented as web components</li>\n  <li><a href=\"https://storybook.js.org/\">StoryBook</a> for documenting UI components but also for developing and testing UI components in isolation</li>\n</ul>\n\n<p>What I would look to try or learn next are:</p>\n<ul>\n  <li><a href=\"https://reactjs.org/\">React</a> or <a href=\"https://vuejs.org/\">Vue</a> (just one of them for now).  Maybe create a to do list app which will be a part of like a mail or calendar app similar to Google Mail or Google Calendar.</li>\n  <li><a href=\"https://angular.io/\">Angular</a>. Actually continue learning it (it’s a big framework btw) by building more features on this Angular project I worked on last time, the product catalog, to maybe make it more like an Amazon online store, right?.</li>\n  <li><a href=\"https://docs.microsoft.com/en-us/aspnet/core/introduction-to-aspnet-core?view=aspnetcore-6.0\">ASP.NET Core</a>. Probably only for it’s <a href=\"https://docs.microsoft.com/en-us/aspnet/core/web-api/?view=aspnetcore-6.0\">Web API</a> and <a href=\"https://docs.microsoft.com/en-us/aspnet/core/signalr/introduction?view=aspnetcore-6.0\">SignalR</a>.  I’m still interested with ASP.Net Core.  I’m thinking of getting a free <a href=\"https://azure.microsoft.com/en-ca/\">Azure</a> account to play with these and maybe try out the other free stuff there.</li>\n  <li><a href=\"https://www.python.org/\">Phython</a> / <a href=\"https://en.wikipedia.org/wiki/Machine_learning\">Machine Learning</a>.  Yes machine learning has been in my radar for a while now.  It’s a pretty big scope and it’s very technical if I may say.  There are so many stuff out there being put out with how to make machines learn.  I’m interested in using Phython for this.  I recently read about this article \n<a href=\"https://www.analyticsinsight.net/top-100-machine-learning-project-ideas-for-tech-enthusiasts/\">Top 100 Machine Learning Project Ideas for Tech Enthusiasts</a> and it can definitely be a source of motivation.</li>\n  <li>Metaverse Application Development.  Technologies surrounding this really piqued my interest.  I’m hoping they would be useful outside of social networking, like maybe in the medical fields or somewhere else.  This article <a href=\"https://simpleprogrammer.com/skills-metaverse-developer/\">The Skills You Need To Become a Metaverse Developer</a> lists out those technologies.</li>\n  <li>Blockchain Application Development.  I’m interested on blockchain technologies for non-financial applications though.  This article \n<a href=\"https://www.section.io/engineering-education/the-complete-roadmap-to-blockchain-development/\">A Complete Roadmap to Blockchain Development</a> will serve as an introduction and guide.</li>\n</ul>\n\n<p>Now we’ve come to the end of this post.  Writing a blog really takes time, for me at least.  I would prefer to spend it coding on my projects than blogging. But I will make it to a point to put one every month.  So that’s it, all 5 years worth in one post, well just in summary.</p>\n"
    } ,
  
    {
      "title"    : "Welcome to My Jekyll-Powered Tech Blog!",
      "category" : "general",
      "tags"     : "",
      "url"      : "/tech-blog/2022/06/05/welcome-to-jekyll.html",
      "date"     : "2022-06-05 00:55:09 +0000",
      "content": "<p>I just migrated my technical blog from WordPress to\nJekyll on GitHub Pages.  And here’s how I did it:</p>\n\n<ol>\n  <li>Exported my blog site in WordPress to XML.  See <a href=\"https://wordpress.com/support/export/\">https://wordpress.com/support/export/</a>.</li>\n  <li>Used <a href=\"https://github.com/lonekorean/wordpress-export-to-markdown\">wordpress-export-to-markdown</a> to convert Wordpress export XML file into Markdown files suitable for Jekyll.</li>\n  <li>Created GitHub Pages site with Jekyll.  Found this <a href=\"https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll\">site</a> really helpful.</li>\n  <li>Installed a different theme other than the default one that came with Jekyll.  I’m using <a href=\"https://github.com/jeffreytse/jekyll-theme-yat\">jeffreytse/jekyll-theme-yat</a>.</li>\n</ol>\n"
    } ,
  
    {
      "title"    : "Learning Python for Numeric and Scientific Applications",
      "category" : "ai",
      "tags"     : "",
      "url"      : "/tech-blog/2017/12/29/learning-python-for-numeric-and-scientific-applications.html",
      "date"     : "2017-12-29 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/pybloglogo.png\" alt=\"\" /></p>\n\n<p>My purpose in learning Python is mainly for numeric and scientific applications, such as AI deep learning.  So my notes will focus mainly on using Python for these types of applications.</p>\n\n<p>The code below demonstrates a little about Python such as some variables and types; lists; subsetting and slicing lists; adding, removing and copying lists; some of its built-in functions and built-in object methods.  Then it demonstrates how to use the NumPy package specifically the NumPy array, some NumPy statistical methods, and how to generate your own sample data.  You can run this code online and I recommend using <a href=\"https://repl.it/languages/python3\">repl.it</a>.</p>\n\n<script src=\"https://gist.github.com/9051a1e538c2a5ca213f50dd18e0a5f1.js\"> </script>\n\n<p> </p>\n\n<p><strong>Additional References:</strong></p>\n\n<ul>\n  <li><a href=\"https://www.python.org/\">Python.org</a></li>\n  <li><a href=\"https://wiki.python.org/moin/NumericAndScientific\">Numeric and Scientific Python Modules, Libraries, Tools, and Frameworks</a></li>\n  <li><a href=\"https://docs.python.org/3/library/index.html\">The Python Standard Library</a></li>\n  <li><a href=\"https://docs.python.org/3/installing/index.html\">Installing Python Modules</a></li>\n  <li><a href=\"http://www.numpy.org/\">NumPy</a></li>\n  <li><a href=\"https://www.datacamp.com/community/tutorials/data-science-python-ide\">Top 5 Python IDEs For Data Science</a></li>\n  <li><a href=\"http://jupyter.org/index.html\">Jupyter</a></li>\n  <li><a href=\"http://pythonhosted.org/spyder/\">Spyder - Documentation</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "LINQ Exercises Using Both Query and Fluent Syntaxes",
      "category" : "c-sharp",
      "tags"     : "",
      "url"      : "/tech-blog/2017/12/09/linq-exercises-using-both-query-and-fluent-syntaxes.html",
      "date"     : "2017-12-09 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/linqbloglogo.png\" alt=\"\" /></p>\n\n<p>Query syntax:</p>\n\n<script src=\"https://gist.github.com/743544a69c2ab450bea0fcd3067b14d5.js\"> </script>\n\n<p> </p>\n\n<p>Fluent syntax:</p>\n\n<script src=\"https://gist.github.com/eb44d5d0dfcaf25f4b70dce188ab140c.js\"> </script>\n\n<p> </p>\n\n<p><strong>Resources:</strong></p>\n\n<ul>\n  <li><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/\">Language Integrated Query (LINQ)</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "Product Catalog: An Angular and Material Demo",
      "category" : "javascript",
      "tags"     : "",
      "url"      : "/tech-blog/2017/12/04/product-catalog-an-angular-and-material-demo.html",
      "date"     : "2017-12-04 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/productcatalogangulardemob.jpg\" alt=\"\" /></p>\n\n<table>\n  <tbody>\n    <tr>\n      <td>[DEMO (unavailable)](#)</td>\n      <td>[CODE](https://github.com/rodansotto/productcatalogdemo-angular2)</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>This is my first Angular app but not the first time creating the product list for the AdventureWorks products database.  I previously created one using MVC 4 (check my post <a href=\"https://rodansotto.github.io/tech-blog/2015/10/19/a-custom-webgrid-my-1st-iteration.html\">here</a> but this time around it has an image view besides the list view and it uses Web API to communicate to the back-end.  I initially used Bootstrap as my UI framework but decided to use Angular Material as I found it to be more easy to integrate with Angular.</p>\n\n<p>It was an adventure and really worth going through it.  I was thinking of using VS Code but when I tried it hoping it should be similar to the full-featured VS IDE but it’s not.  Since I don’t want to spend another time familiarizing myself with VS Code, I went with VS IDE, for now.</p>\n\n<p>So how did I make VS IDE work?  Well I only used VS IDE as a glorified editor really.  I depended on angular CLI pretty much for generating my initial angular app and scaffolding.  With VS IDE, I created a blank ASP.NET application and just opened my angular app files from there.</p>\n\n<p>In this first iteration, I only have one module and one component that displays the product catalog.  I did setup a route for the component.  As I refactor and/or improve on this app, it will eventually have a proper navigation.  And of course, I had to rewrite rules for the URL so it uses the main angular app’s base href.</p>\n\n<p>I have an angular service that calls a web API to retrieve the products data.  I had to pass some paging, sorting, and search info to the web API and I thought I can pass them in the request body but unfortunately Angular’s HttpClient does not allow it so I ended up passing them as URL parameters.  I only have one web API method on the backed.  And I only request for images/photos if the image view is active.</p>\n\n<p>There is not much code on the component side that really needs explanation, it’s pretty straightforward.  Much of the effort is in making the angular material components work.  For this app, I used the following angular material components: table, paginator, sort, input, button, icon, card, tooltip, and progress spinner.  I really enjoy working on UI so this was worth the time and I think it’s a good UI and good thing I went for angular material.</p>\n\n<p>So what’s next?  I still have to do the product detail view.  As for long-term goal, I am thinking of making this an angular module that you can just plug in in your projects, maybe thinking of creating an angular product catalog and ordering module, something like that.  Also might add in some product management module.</p>\n\n<p> </p>\n\n<p><strong>Additional Resources:</strong></p>\n\n<ul>\n  <li><a href=\"https://material.angular.io/\">Angular Material</a></li>\n  <li><a href=\"https://material.io/icons/\">Material Design Icons</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : ".NET Code Documentation And Testing:  They Are There, Why Not Use It?",
      "category" : "net",
      "tags"     : "",
      "url"      : "/tech-blog/2017/11/28/net-code-documentation-and-testing-they-are-there-why-not-use-it-4.html",
      "date"     : "2017-11-28 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/xmldoccomments_01d.jpg\" alt=\"\" /></p>\n\n<p>Remember the “///”?  They are the C# XML documentation comments and they are pretty useful when you are building your APIs and frameworks so other developers who use your code can at least see some useful information on your classes and methods through the intellisense provided by the Visual Studio IDE.</p>\n\n<p>Take the following sample code below.  I have a constructor and a method decorated with XML comments.</p>\n\n<script src=\"https://gist.github.com/2b0818cb3279e065d9fc6e18a89d2950.js\"> </script>\n\n<p>And on the code where they are used, when I hover over them I will see my comments displayed.</p>\n\n<p><img src=\"/tech-blog/assets/images/xmldoccomments_01.jpg\" alt=\"xmldoccomments_01\" /></p>\n\n<p><img src=\"/tech-blog/assets/images/xmldoccomments_02b.jpg\" alt=\"xmldoccomments_02b\" /></p>\n\n<p>So how about code testing?  .NET or more accurately Visual Studio comes with the Microsoft unit test framework.  It’s so easy to add one to your new project or existing project.  Once you have the stubs created for you, you can start coding your tests.</p>\n\n<p>Below is a sample unit testing code I created.</p>\n\n<script src=\"https://gist.github.com/9f607d9b76a910caefc4211c94340c7e.js\"> </script>\n\n<p>So every time you make changes to your code, and I say you will always need to change or refactor code, running these tests will make sure you didn’t break anything.  So it is a pretty useful tool and I see the benefit in this.  And it’s so nice to see so many green check marks on your Test Explorer.</p>\n\n<p><img src=\"/tech-blog/assets/images/unittesting_01.jpg\" alt=\"unittesting_01\" /></p>\n\n<p><strong>For more information, check out these links:</strong></p>\n\n<ul>\n  <li><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/recommended-tags-for-documentation-comments\">Recommended Tags for Documentation Comments (C# Programming Guide)</a></li>\n  <li><a href=\"https://docs.microsoft.com/en-us/visualstudio/test/unit-test-your-code\">Unit Test Your Code</a></li>\n  <li><a href=\"https://msdn.microsoft.com/en-us/library/jj159345.aspx\">Testing for Continuous Delivery with Visual Studio 2012</a> - this might seem old but it contains best practices and fundamentals that still apply today</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "I&#39;m familiar with .NET Framework, so what is .NET Standard and .NET Core?",
      "category" : "net",
      "tags"     : "",
      "url"      : "/tech-blog/2017/11/25/im-familiar-with-net-framework-so-what-is-net-standard-and-net-core.html",
      "date"     : "2017-11-25 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/netbloglogo.png\" alt=\"\" />Basically .NET Framework is an implementation of .NET, much like <a href=\"http://www.mono-project.com/\">Mono</a> if you know Mono.  .NET Core is a newer implementation of .NET that is dubbed as cross-platform and designed for cloud.  Now .NET Standard is what is common among these .NET implementations and if your .NET app targets .NET Standard, it would mean that it can run on any .NET implementations.  That is all there is to it.  See <a href=\"https://docs.microsoft.com/en-us/dotnet/standard/frameworks\">Target frameworks</a></p>\n\n<p>.</p>\n"
    } ,
  
    {
      "title"    : "My notes on Angular (2.0+)",
      "category" : "javascript",
      "tags"     : "",
      "url"      : "/tech-blog/2017/11/23/my-notes-on-angular-2-0.html",
      "date"     : "2017-11-23 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/angularbloglogo1.png\" alt=\"\" />I’ve been following Angular for a while now and decided recently to develop Angular 2.0+ applications (skipped the previous version, AngularJS, as it’s totally different)</p>\n\n<p>.  My initial impression: it does make developing SPA easy and opens the door to the world of open-source frameworks and libraries.  So here are some notes I gathered.</p>\n\n<ul>\n  <li>An angular application is composed of one or more modules (see <a href=\"https://angular.io/guide/ngmodule\">NgModules</a> and <a href=\"https://angular.io/guide/bootstrapping\">Bootstrapping</a>).  It has one root module and any number of feature modules.</li>\n  <li>An angular module contains one or more components (see <a href=\"https://angular.io/api/core/Component\">@Component</a>).</li>\n  <li>An angular component is comprised of a template (the view), class (the data) and metadata (<a href=\"https://angular.io/tutorial/toh-pt1#create-the-heroes-component\">this</a> is what an angular component code looks like).</li>\n  <li>An angular <a href=\"https://angular.io/guide/template-syntax\">template</a> represents the view and displays data.  Use <a href=\"https://angular.io/guide/template-syntax#interpolation----\">interpolation</a> to bind data and the <a href=\"https://angular.io/guide/template-syntax#built-in-structural-directives\">common built-in structural directives</a> to shape/reshape the DOM’s structure. See <a href=\"https://angular.io/guide/structural-directives\">Structural Directives</a> to learn more about them.</li>\n  <li>Other types of data binding are: <a href=\"https://angular.io/guide/template-syntax#property-binding--property-\">property binding</a>, <a href=\"https://angular.io/guide/template-syntax#event-binding---event-\">event binding</a>, and <a href=\"https://angular.io/guide/template-syntax#two-way-binding---\">two-way binding</a>, the banana in a box ;).</li>\n  <li>To edit, transform or format the data binded to the view, angular <a href=\"https://angular.io/guide/pipes\">pipes</a> are used.  Angular comes with <a href=\"https://angular.io/guide/pipes#built-in-pipes\">built-in pipes</a> but <a href=\"https://angular.io/guide/pipes#custom-pipes\">custom pipes</a> can be created.</li>\n  <li>Angular provides <a href=\"https://angular.io/guide/lifecycle-hooks\">lifecycle hooks</a> for the component to act on, much like event-driven programming.</li>\n  <li>More than one components can make up the UI.  These components can be separate components, or nested components - components that are inside another component, also called shared components.</li>\n  <li>Any component can be nested in a container component by using the nested component’s directive (the component’s selector property) in the container’s template.</li>\n  <li>Angular provides interactions between components where information between components need to be shared.  Use the <a href=\"https://angular.io/guide/component-interaction#pass-data-from-parent-to-child-with-input-binding\">Input decorator</a> to pass data from parent to child via property binding.  Use the <a href=\"https://angular.io/guide/component-interaction#parent-listens-for-child-event\">Output decorator</a> to pass data from child to parent via event binding.  See <a href=\"https://angular.io/guide/component-interaction#component-interaction\">Component Interaction</a> for more information.</li>\n  <li>Angular components contain logic to support the view.  For any other logic that is not tied to the view, they are usually declared as angular services (or service providers), well technically speaking declared as <a href=\"https://angular.io/guide/dependency-injection#injectable\">@Injectable</a>, because they are injected to components that need them.  Services created need to be registered first before injected.  See <a href=\"https://angular.io/guide/dependency-injection#angular-dependency-injection\">Angular Dependency Injection</a> for more details.</li>\n  <li><a href=\"https://angular.io/guide/http#httpclient\">HttpClient</a> is one of the built-in services in Angular used to communicate over HTTP.  Since calls to HttpClient is asynchronous, the caller needs to subscribe to an <a href=\"http://reactivex.io/documentation/observable.html\">observable</a>.  Angular uses <a href=\"http://reactivex.io/\">Reactive Extensions Library</a> for this.</li>\n  <li>To implement navigation from one view to the next, angular routers are used.  The basics require 1) <a href=\"https://angular.io/guide/router#configuration\">configuring the routes</a> where the path and the component (or view) to go to are specified, 2) adding the <a href=\"https://angular.io/guide/router#router-outlet\">router outlet</a> to the host view’s HTML where the routed views are placed, and 3) adding the <a href=\"https://angular.io/guide/router#router-links\">router links</a> usually on anchor tag clicks.</li>\n  <li>Parameters can be passed to a route by configuring a <a href=\"https://angular.io/guide/router#route-definition-with-a-parameter\">route with a parameter</a>, and <a href=\"https://angular.io/guide/router#setting-the-route-parameters-in-the-list-view\">setting the the route parameters in the view</a> using the <a href=\"https://angular.io/guide/router#appendix-link-parameters-array\">link parameters array</a>.</li>\n  <li>To activate route in code, use the router service injected to the component and call it’s navigate method (<a href=\"https://angular.io/guide/router#query-parameters-and-fragments\">this</a> shows how to activate route in code).</li>\n  <li>In cases where a check needs to be made or some work needs to be done before routing, use <a href=\"https://angular.io/guide/router#milestone-5-route-guards\">angular route guards</a>.  Basically create a service (an injectable class) that implements CanActivate and update the configured routes with a canActivate property that references it.</li>\n  <li><a href=\"https://angular.io/guide/router#routing--navigation\">Routing and Navigation</a> contains the complete information on this topic.</li>\n</ul>\n\n<p> </p>\n\n<p><strong>Resource Links:</strong></p>\n\n<ul>\n  <li><a href=\"https://angular.io/docs\">Angular Docs</a></li>\n  <li><a href=\"https://docs.npmjs.com/\">npm Docs</a></li>\n  <li><a href=\"https://github.com/angular/angular-cli/wiki\">Angular CLI Wiki</a></li>\n  <li><a href=\"https://www.typescriptlang.org/docs/home.html\">TypeScript Docs</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "Multi-threading in C#: A must have in your programming arsenal (IMO)",
      "category" : "c-sharp",
      "tags"     : "",
      "url"      : "/tech-blog/2017/11/16/multi-threading-in-c-a-must-have-in-your-programming-arsenal-imo.html",
      "date"     : "2017-11-16 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/csbloglogo21.png\" alt=\"\" /></p>\n\n<p>You might not need to use multi-threading in all of your C# applications but as a modern software developer, you should make this part of your toolkit.</p>\n\n<ul>\n  <li>Wikipedia best explains what <a href=\"https://en.wikipedia.org/wiki/Thread_(computing)\">thread</a> is.  It also explains the difference between threads and processes and delves into the topic of multi-threading as well, which is what thread is for.</li>\n  <li>Benefits of using multi-threading:\n    <ul>\n      <li>To maintain a responsive user interface.</li>\n      <li>To perform CPU bound work while waiting for I/O operations to complete.</li>\n      <li>To scale the application using parallel execution.</li>\n    </ul>\n  </li>\n  <li>Price to pay for  using multi-threading:\n    <ul>\n      <li>Slower execution time on single-processor machines due to context switching.</li>\n      <li>Added program complexity.</li>\n    </ul>\n  </li>\n  <li><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/threading/index\">Threading (C#)</a> at Microsoft docs describes the basic concurrency and synchronization mechanisms provided by the .NET Framework, but not much example C# code though.</li>\n  <li><a href=\"http://www.albahari.com/threading/\">Threading in C# by Joseph Albahari</a> is a good one as it provides example C# code.  It goes through the basics of threading and synchronization in C# which would help you get started writing C# code.  Then it talks about the event-based asynchronous pattern (EAP) and lastly about parallel programming.</li>\n  <li><a href=\"http://www.sanfoundry.com/csharp-programming-examples-on-threads/\">C# Programming Examples on Threads</a> is the simplest C# codes I found on C# threading.</li>\n  <li>Microsoft recommends using the <a href=\"https://docs.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap\">task-based asynchronous pattern (TAP)</a> though.  The <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/async\">async</a> and <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/await\">await</a> keywords in C# support TAP.  So I think it would be best to focus on this instead of the older patterns like the event-based asynchronous pattern (EAP) and the asynchronous programming model (APM).</li>\n  <li><a href=\"https://docs.microsoft.com/en-us/dotnet/standard/parallel-processing-and-concurrency\">Parallel Processing and Concurrency in the .NET Framework</a> in Microsoft docs contains links to information about threading, asynchronous programming patterns (both legacies and new) and parallel programming.</li>\n  <li>For parallel programming, the <a href=\"https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/task-parallel-library-tpl\">Task Parallel Library (TPL)</a> is the center of it all and would be wise to get familiar on this library.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "A chat app that receives SMS and sends HTTP messages (A Xamarin Android App Preview)",
      "category" : "android",
      "tags"     : "",
      "url"      : "/tech-blog/2017/11/13/a-chat-app-that-receives-sms-and-sends-http-messages-a-xamarin-android-app-preview2.html",
      "date"     : "2017-11-13 00:00:00 +0000",
      "content": "<p><a href=\"https://rodansotto.github.io/projects/mysmswebchatpreview.html\">PREVIEW</a></p>\n\n<p><img src=\"/tech-blog/assets/images/mysmswebchat021.jpg\" alt=\"MySMSWebChat02\" />A while back, I delved into Android development using Android Studio and Java (in this <a href=\"https://rodansotto.github.io/tech-blog/2014/03/18/android-development-main-method-application-lifecycle-and-event-handling.html\">article</a>).  It was a little bit difficult for me as I need to familiarize myself with Android Studio and relearn Java.  But with Xamarin now part of Visual Studio, it became easier.  All I need to concern myself is the Android development itself.  So in just a few days, I created my first usable Android mobile application.  This app can now receive SMS messages but the sending of HTTP messages is still in the works (which is why it’s still in a preview).</p>\n\n<p>Anyways, what did I do to make this SMS work?  The app registers a broadcast receiver for SMS messages.  This broadcast receiver then sends an ordered broadcast to the app where it has 2 more broadcast receivers: one broadcast receiver to update the UI with the SMS message received when the app is running, and another one to display a notification when the app is not running.  When the notification is clicked, the app will launch and the chat will start.</p>\n\n<p>I see a potential in this mobile development space for me, and for this app which I will continually build on.  There are still a lot of work in progress here.  One takeaway for me on this is that Xamarin does really help you develop Android apps using your favorite language C# and your favorite IDE Visual Studio.</p>\n\n<p><strong>Resources and Tools:</strong></p>\n\n<ul>\n  <li><a href=\"https://developer.xamarin.com/guides/android/\">Xamarin.Android Guides</a></li>\n  <li><a href=\"https://developer.android.com/develop/index.html\">Android Developer Guides</a></li>\n  <li><a href=\"https://romannurik.github.io/AndroidAssetStudio/index.html\">Android Asset Studio</a></li>\n  <li><a href=\"https://material.io/\">Material Design</a></li>\n  <li><a href=\"https://www.sessions.edu/color-calculator/\">Color Wheel Calculator From Sessions College</a></li>\n  <li><a href=\"https://www.iconshock.com/\">Iconshock</a></li>\n  <li><a href=\"https://www.sendatext.co/Canada\">SendaText - Free SMS Messages</a></li>\n  <li><a href=\"https://developer.android.com/distribute/marketing-tools/device-art-generator.html\">Android Device Art Generator</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "Some Visual Studio Productivity Tips",
      "category" : "asp-net-mvc",
      "tags"     : "",
      "url"      : "/tech-blog/2017/11/09/some-visual-studio-productivity-tips.html",
      "date"     : "2017-11-09 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/vsbloglogo.png\" alt=\"\" /></p>\n\n<ul>\n  <li>Use <a href=\"https://docs.microsoft.com/en-us/aspnet/visual-studio/overview/2013/using-browser-link\">Browser Link</a> which uses SignalR to refresh browsers linked to your project.</li>\n  <li><a href=\"https://stackoverflow.com/questions/20037365/how-to-create-custom-scaffold-templates-in-asp-net-mvc5\">Create your own Scaffolded Item</a>.  When you <em>Add -&gt; New Item…</em>, there is also option <em>New Scaffolded Item….</em>  You can add your new scaffolded item as one of the options.  You can copy and modify existing scaffolded items found at <em>C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\Extensions\\Microsoft\\Web\\Mvc\\Scaffolding\\Templates</em> <em>(for Visual Studio 2017)</em>.  Copy folder you want to modify and paste it under <em>CodeTemplates</em> folder under your project root.  Make sure names of folders/files are intact so Visual Studio can pick them up.</li>\n  <li>Install <a href=\"https://marketplace.visualstudio.com/items?itemName=MadsKristensen.WebExtensionPack2017\">Web Essentials</a> extensions which provides the ultimate web development experience, such as the Browser Reload on Save, CSS Tools, HTML Tools, and ZenCoding.  Note that the design and inspect modes under Browser Link for Visual Studio 2017 is missing so you will need to download a separate extension for this, the <a href=\"https://marketplace.visualstudio.com/items?itemName=MadsKristensen.BrowserLinkInspector2017\">Browser Link Inspector</a>.</li>\n  <li>Use <a href=\"http://visualstudioshortcuts.com/2017/\">Visual Studio shortcut keys</a>, such as Alt+1 and Shift+Alt+W.</li>\n  <li>Use <em>‘&amp;’</em> intellisense to insert character entities on html/razor pages, as well as intellisense on bootstrap <em>‘data-‘</em> attributes, on angular directives <em>‘ng-‘</em>, on angular templates or handle bars, and on web.config rewrite rules.</li>\n  <li>Use CSS editor tricks such as hover on CSS property to show browser support matrix.</li>\n  <li>Use <a href=\"http://lesscss.org/#\">LESS</a> which extends CSS with features such as variables, mixins, and nested rules.</li>\n  <li>Install <a href=\"http://sidewaffle.com/\">SideWaffle</a> extension which provides useful snippets, project and item templates.  Unfortunately as of the time of this post, Visual Studio 2017 version is still under development.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "Don&#39;t confuse DIP, IoC, and DI together.  They are all different but related.",
      "category" : "design-patterns",
      "tags"     : "",
      "url"      : "/tech-blog/2017/11/07/dont-confuse-dip-ioc-and-di-together-they-are-all-different-but-related.html",
      "date"     : "2017-11-07 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/dpbloglogo.png\" alt=\"\" /><strong>DIP</strong> (or <em>Dependency Inversion Principle</em>)</p>\n\n<p>is one of the principles of SOLID.  <strong>SOLID</strong> stands for:</p>\n\n<ul>\n  <li><em><strong>S</strong>ingle responsibility</em> - a class should only have one responsibility</li>\n  <li><em><strong>O</strong>pen / closed principle</em> - a class should be open for extension but closed for modification</li>\n  <li><em><strong>L</strong>iskov substitution principle</em> - a class should be replaceable without altering the functionality of the whole</li>\n  <li><em><strong>I</strong>nterface segregation principle</em> - better to have more specific interfaces than a general purpose one</li>\n  <li><em><strong>D</strong>ependency inversion principle</em> - a higher-level class should never depend on a lower-level class, instead higher-level class should define an abstraction that lower-level class should depend on</li>\n</ul>\n\n<p><strong>IoC</strong> (or <em>Inversion of Control</em>) is a paradigm that adheres to the dependency inversion principle by inverting the control to avoid dependencies.  Most inversions can be generalized into these three types of control:</p>\n\n<ul>\n  <li><em>Control over interface</em> - consumer class should have control over the interface and provider classes should depend on that interface</li>\n  <li><em>Control over flow</em> - a “don’t call us, we’ll call you” paradigm</li>\n  <li><em>Control over creation</em> - where creating objects is done outside of the class they are being used in</li>\n</ul>\n\n<p><strong>DI</strong> (or <em>Dependency Injection</em>) is one way of inverting control over creation (other ways being the factory method and the service locator).  It moves the creation and binding of a dependency outside of the class that depends on it.  <a href=\"https://en.wikipedia.org/wiki/Dependency_injection#Three_types_of_dependency_injection\">Common types of dependency injection</a>:</p>\n\n<ul>\n  <li><em>Constructor injection</em></li>\n  <li><em>Setter injection</em></li>\n  <li><em>Interface injection</em></li>\n</ul>\n\n<p> </p>\n\n<p><strong>Additional Resources:</strong></p>\n\n<ul>\n  <li><a href=\"http://www.codemag.com/Article/1001061\">S.O.L.I.D. Software Development, One Step at a Time</a></li>\n  <li><a href=\"https://msdn.microsoft.com/en-us/library/dn223671(v=pandp.30).aspx\">Developer’s Guide to Dependency Injection Using Unity</a></li>\n  <li><a href=\"http://netmvc.blogspot.ca/2012/04/dependency-injection-in-aspnet-mvc-4.html\">Dependency Injection in ASP.NET MVC 4 and WebAPI using Unity</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "Ways to Extend The ASP.NET MVC 5 Framework",
      "category" : "asp-net-mvc",
      "tags"     : "",
      "url"      : "/tech-blog/2017/11/03/ways-to-extend-the-asp-net-mvc-5-framework.html",
      "date"     : "2017-11-03 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/mvcbloglogo.png\" alt=\"\" /></p>\n\n<p>ASP.NET MVC 5 Framework does not limit you to the capabilities it provide out of the box.  It is an extensible framework which emphasizes on convention over configuration or coding by convention, and below are some ways you can extend it.</p>\n\n<ul>\n  <li><a href=\"http://www.c-sharpcorner.com/UploadFile/db2972/custom-action-result-sample-in-mvc-day-36/\">Action Results</a>\n    <ul>\n      <li>Action results are returned by the controller (e.g. <em>return View()</em>).</li>\n      <li>They are responsible for writing response to a request.</li>\n      <li>They are executed internally by MVC to write out the response.</li>\n      <li>You can create a custom action result by inheriting from <em>ActionResult</em> and overriding <em>ExecuteResult()</em>, or by extending an existing action result (e.g. <em>FileResult</em>).</li>\n    </ul>\n  </li>\n  <li><a href=\"https://docs.microsoft.com/en-us/aspnet/mvc/overview/older-versions/hands-on-labs/aspnet-mvc-4-custom-action-filters\">Action Filters</a>\n    <ul>\n      <li>Action filters execute before and after a controller action method.</li>\n      <li>You can create a custom action filter by implementing <em>ActionFilter</em>’s <em>OnActionExecuting()</em> and <em>OnActionExecuted()</em> methods.</li>\n      <li>They can be applied at the method, controller, or global scope.</li>\n    </ul>\n  </li>\n  <li><a href=\"http://www.c-sharpcorner.com/article/custom-html-helper-in-Asp-Net-mvc/\">Helper Methods</a>\n    <ul>\n      <li>Two types: inline Razor helpers (<em>@helper</em>) and HTML helpers (<em>@Html.*</em>).</li>\n      <li>They reduce code duplication but if it involves complex logic consider using partial view / child action method.</li>\n      <li>You can create your own HTML helper by creating an extension method to <em>HTMLHelper</em>.</li>\n    </ul>\n  </li>\n  <li><a href=\"http://marisks.net/2017/02/03/razor-view-engine-for-feature-folders/\">View Engines</a>\n    <ul>\n      <li>When controller returns a view, the MVC executes the action result and in the process uses a view engine to find a view and returns a <em>ViewEngineResult</em> whose <em>Render()</em> method is called.</li>\n      <li>A custom view engine can be used to extend view selection functionality such as to implement swappable UI themes (e.g. Wordpress themes).</li>\n      <li>You create a custom view engine by extending the <em>RazorViewEngine</em> and in the constructor setting the search location format properties to use the theme directories that you want the view engine to search for for the currently active theme.</li>\n      <li>You register the custom view engine in <em>Application_Start()</em> calling <em>ViewEngines.Engines.Insert()</em>, inserting it as the first engine to be evaluated.  You can leave the <em>RazorViewEngine</em> there if you want a fallback.  Note that MVC supports multiple view engines.</li>\n    </ul>\n  </li>\n  <li><a href=\"http://www.tutorialsteacher.com/mvc/filters-in-asp.net-mvc\">Exception Filters</a>\n    <ul>\n      <li>Exception filters catch errors that occur inside the scope of action method execution (including inside action filters and action results) and thus provide more contextual framework information.</li>\n      <li>The default exception filter in MVC is the <em>HandleErrorAttribute</em>.</li>\n      <li>You can create a custom exception filter by implementing the <em>IExceptionFilter</em>’s <em>OnException()</em>.</li>\n      <li>They can be applied at the method, controller, or global scope.</li>\n      <li>The <em>ExceptionHandled</em> flag is useful when using multiple exception filters: checking to make sure exception was not handled by previous exception filter before continuing.</li>\n      <li><em>Application_Error()</em> should still be implemented as a fallback.</li>\n    </ul>\n  </li>\n  <li><a href=\"http://prideparrot.com/blog/archive/2012/4/model_validation_in_asp_net_mvc\">Server-Side Validations</a>\n    <ul>\n      <li>Two ways: via data attributes (e.g. <em>Required</em>, <em>Range</em>, etc.) and implementation of <em>IValidatableObject</em>’s <em>Validate()</em> in the model class, the former being reusable while the latter providing easy cross property validation.</li>\n      <li>The model binder that binds the request data to the model classes (or the action method parameters) checks the data attributes first then the <em>Validate()</em> and populates the controller’s <em>ModelState</em> property which you can check if any errors occurred in the model binding process (e.g. <em>ModelState.IsValid</em>).</li>\n      <li>You can create a custom data attribute by inheriting from <em>ValidationAttribute</em> and overriding <em>IsValid()</em> and setting the <em>ErrorMessage</em> in the constructor.</li>\n      <li>You can implement the <em>IValidatableObject</em>’s <em>Validate()</em> in the model class and return <em>List</em> containing any error messages.</li>\n    </ul>\n  </li>\n  <li><a href=\"http://www.dotnetcurry.com/aspnet-mvc/1261/custom-model-binder-aspnet-mvc\">Model Binders</a>\n    <ul>\n      <li>A model binder implements the <em>IModelBinder</em>’s <em>BindModel()</em>.  The binder model is returned by a model binder provider that implements <em>IModelBinderProvider</em>’s <em>GetBinder</em>().  The model binding process searches through a list of model binder providers asking them if they can provide a model binder for the data it is trying to bind.</li>\n      <li>You can create a custom model binder by implementing <em>IModelBinder</em>’s <em>BindModel</em>() and adding any error messages to the controller’s <em>ModelState</em>.  Then you create a custom model binder provider by implementing <em>IModelBinderProvider</em>’s <em>GetBinder</em>() to return the custom model binder you just created.  You register your custom model binder provider in <em>Application_Start</em>() by calling <em>ModelBinderProviders.BinderProviders.Insert()</em>.</li>\n    </ul>\n  </li>\n  <li><a href=\"http://www.c-sharpcorner.com/UploadFile/97fc7a/smart-working-with-custom-value-providers-in-Asp-Net-mvc/\">Value Providers</a>\n    <ul>\n      <li>A model binder employs value providers to provide it data from different sources such as posted form data, query string, route data, etc. that it can use to populate the action method parameters.</li>\n      <li>Possible uses of a custom value provider is to provide HTTP header data or settings from configuration file or database.</li>\n      <li>You create a custom value provider by implementing <em>IValueProvider</em>’s two methods: <em>ContainsPrefix()</em> to return true if the passed in property name matches any data the custom value provider provides and <em>GetValue()</em> to return the value itself.  Then you create a custom value provider factory by inheriting from <em>ValueProviderFactory</em> and overriding <em>GetValueProvider()</em> to return the custom value provider you just created.  You register your custom value provider factory in <em>Application_Start()</em> by calling <em>ValueProviderFactories.Factories.Insert()</em>.</li>\n    </ul>\n  </li>\n  <li><a href=\"http://www.dotnetfunda.com/articles/show/2935/creating-custom-authentication-filter-in-aspnet-mvc\">Authentication Filters</a> and Authorization Filters\n    <ul>\n      <li>Authentication filters implement <em>IAuthenticationFilter</em>’s two methods: <em>OnAuthentication</em>() to authenticate a request and <em>OnAuthenticationChallenge</em>() that runs when authentication fails and right after action method execution.</li>\n      <li>Authorization filters implement <em>IAuthorizationFilter</em>’s <em>OnAuthorization()</em>.</li>\n      <li>These filters return a non-null context results if authentication/authorization fails.</li>\n      <li>Note that MVC supports Forms and Windows authentication by default and does not support Basic authentication.  One use of a custom authentication filter is to provide Basic authentication.</li>\n      <li>You create a custom authentication filter by implementing <em>IAuthenticationFilter</em>.  For custom authorization filter, consider inheriting from <em>AuthorizeAttribute</em> instead.</li>\n    </ul>\n  </li>\n  <li>Action Name Selectors and <a href=\"http://www.tutorialsteacher.com/articles/define-custom-action-selector-in-mvc\">Action Method Selectors</a>\n    <ul>\n      <li>Action name selectors (e.g. <em>[ActionName(“xxxxx”)]</em>) and action method selectors (e.g. <em>[HttpGet]</em> and <em>[HttpPost]</em>) influence the decision process of selecting which action method to handle the request by the action invoker.</li>\n      <li>You can create a custom action name selector by inheriting from <em>ActionNameSelectorAttribute</em> and overriding <em>IsValidName()</em>.</li>\n      <li>You can create a custom action method selector by inheriting from <em>ActionMethodSelectorAttribute</em> and overriding <em>IsValidForRequest()</em>.</li>\n    </ul>\n  </li>\n</ul>\n\n<p> </p>\n\n<p><strong>Additional References:</strong></p>\n\n<ul>\n  <li><a href=\"https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/lifecycle-of-an-aspnet-mvc-5-application\">ASP.NET MVC 5 Application Lifecycle Diagram</a> - this will give you an idea how MVC 5 works</li>\n  <li><a href=\"http://beletsky.net/blog/categories/insidemvc/\">A look inside MVC</a> - a deep dive inside MVC (older version), but still worth taking a look</li>\n  <li><a href=\"https://github.com/aspnet/AspNetWebStack\">MVC 5 Source Code</a> - if you’re up to it why not pull the source code from GitHub</li>\n</ul>\n\n<p> </p>\n\n<p><strong>BONUS:</strong> Found this good article worth looking too: <a href=\"http://asp.net-hacker.rocks/2016/02/18/extending-razor-views.html\">10 ways to extend your Razor views in ASP.​NET core - the complete overview</a>.</p>\n"
    } ,
  
    {
      "title"    : "ASP.NET MVC 5: OWIN/Katana Pipeline And Middleware Components (A Demo)",
      "category" : "asp-net-mvc",
      "tags"     : "",
      "url"      : "/tech-blog/2017/11/01/asp-net-mvc-5-owinkatana-pipeline-and-middleware-components-a-demo.html",
      "date"     : "2017-11-01 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/myprojects.png\" alt=\"\" /></p>\n\n<table>\n  <tbody>\n    <tr>\n      <td>[DEMO](http://www.rodansotto.com/mvc5/HelloWorldOWINPipeline)</td>\n      <td>[CODE](http://www.rodansotto.com/projectcode/helloworldowinpipeline01.aspx)</td>\n      <td>[MY (Other) PROJECTS](http://www.rodansotto.com/myprojects.aspx)</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>If you know <a href=\"https://mva.microsoft.com/en-us/training-courses/introduction-to-asp-net-core-with-visual-studio-2017-16841?l=JWZaodE6C_5706218965\">ASP.NET Core</a>, you will notice some similarities between that and <a href=\"https://docs.microsoft.com/en-us/aspnet/aspnet/overview/owin-and-katana/an-overview-of-project-katana\">Katana</a>.  That is because both of them supports <a href=\"http://owin.org/\">OWIN:</a> Katana bringing OWIN support to ASP.NET; and ASP.NET Core natively supporting OWIN.</p>\n\n<p>In this demo, using ASP.NET MVC 5, I registered my OWIN middleware components in the <em>Configuration(IAppBuilder)</em> method of the <em>Startup</em> class declared in <em>Startup.cs</em> by calling one of the these methods: <em>IAppBuilder.Use()</em>, or an <em>IAppBuilder</em> extension method that wraps <em>IAppBuilder.Use()</em>,  or <em>IAppBuilder.Run()</em>.  This <a href=\"http://www.rodansotto.com/projectcode/helloworldowinpipeline01.aspx\">code</a> explains it a little bit more.</p>\n\n<p>I declared all my OWIN components in a separate file named <em>Startup.MyOWINComponents.cs</em>.  Each component adds a <em>Hello World!!!</em> string in their own language to an OWIN environment variable and awaits the next component in the pipeline, and once the last component is done it passes control back to the previous component until the first component in the pipeline outputs the resulting string to response.  This <a href=\"http://www.rodansotto.com/projectcode/helloworldowinpipeline02.aspx\">code</a> explains it a little bit more.</p>\n\n<p>The <a href=\"http://www.rodansotto.com/mvc5/HelloWorldOWINPipeline\">demo</a> displays the following:</p>\n\n<h2 id=\"hello-world-bonjour-tout-le-monde-mabuhay\">Hello World!!! Bonjour Tout Le Monde!!! Mabuhay!!!</h2>\n"
    } ,
  
    {
      "title"    : "AI, Anyone?",
      "category" : "ai",
      "tags"     : "",
      "url"      : "/tech-blog/2017/10/27/ai-anyone.html",
      "date"     : "2017-10-27 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/aibloglogo.png\" alt=\"\" /> Recently got interested in AI, particularly how far it has gone.  Now I’m wondering if we are close to having the ultimate AI that closely resembles a human being.  I have some background on AI (well sort of) during my university days a long time ago :).  I did work on a thesis on fingerprint recognition that requires advanced math skills (e.g. Fourier transforms, etc.)</p>\n\n<p>but good thing there is already an IBM PC that time to do that for you.  I also met someone doing his Masters thesis using neural networks to train a computer to just check a multiple choice exam.  If I remember it right, he is using the back propagation algorithm.  Don’t quote me on these, I never did try to understand all these stuff at that time, plus it’s actually advance to me.  Fast forward today I see there are already a bunch of algorithms that were created and different ways to train an AI and I would be interested to check them out and see for myself if I can create my own AI that I can train from baby stage to adult stage.  I have this opinion that it will take years to train an AI just like how we humans learn.  I think in an AI, there are many different areas that a machine learning need to be applied.  Ultimately, an AI needs to learn how to learn all these stuff.</p>\n\n<p>So I started this post just to compile my findings on the latest technologies / tools related to AI.  So far here are some of them and I will continue to update this as I discover more.</p>\n\n<ul>\n  <li>A <a href=\"https://becominghuman.ai/cheat-sheets-for-ai-neural-networks-machine-learning-deep-learning-big-data-678c51b4b463\">cheat sheet</a> listing all there is right now in AI, Neural Networks, Machine Learning, Deep Learning &amp; Big Data.  It will give you an idea on what has been done or currently being done.</li>\n  <li>A <a href=\"http://iamtrask.github.io/2015/07/12/basic-python-network/\">program in Python</a> implementing neural networks.  Mind you this is really very technical and requires time to understand.  I noticed that Python seems to be the language of choice for machine learning, but I only stumbled upon a few.  Have to dig in some more.</li>\n  <li>There is also <a href=\"https://azure.microsoft.com/en-us/services/machine-learning-studio/\">Microsoft Azure Machine Learning</a> which would be interesting to check too.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "Quick refresher on JavaScript&#39;s objects, prototypes and inheritance",
      "category" : "javascript",
      "tags"     : "",
      "url"      : "/tech-blog/2017/10/17/quick-refresher-on-javascripts-objects-prototypes-and-inheritance.html",
      "date"     : "2017-10-17 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/jsbloglogo.png\" alt=\"\" /> Here is how we commonly code JavaScript’s objects, prototypes and inheritance.  You can copy the JavaScript code below and quickly run it on any online JavaScript compiler/runner app on the Internet.  I use <a href=\"https://jsbin.com/kilujodupi/edit?js,console\">JS Bin</a>.</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// If we don't need to create/instantiate objects, then an object literal will do</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">*****Object Literal*****</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">EmployeeMe</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">FullName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Rodan Sotto</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">HireDate</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">12/1/2015</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">Save</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Employee saved: </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">FullName</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\">, </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">HireDate</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">());</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">EmployeeMe</span><span class=\"p\">.</span><span class=\"nx\">Save</span><span class=\"p\">();</span> <span class=\"c1\">// displays \"Employee saved: Rodan Sotto, 12/1/2015\"</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">EmployeeMe</span><span class=\"p\">);</span> <span class=\"c1\">// displays the object literal itself</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">getPrototypeOf</span><span class=\"p\">(</span><span class=\"nx\">EmployeeMe</span><span class=\"p\">));</span> <span class=\"c1\">// displays the object literal's prototype which is Object</span>\n\n<span class=\"c1\">// Otherwise, we would use a constructor function to define the properties of the class</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">*****Constructor Function*****</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">Employee</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">fullName</span><span class=\"p\">,</span> <span class=\"nx\">hireDate</span><span class=\"p\">){</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">FullName</span> <span class=\"o\">=</span> <span class=\"nx\">fullName</span><span class=\"p\">;</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">HireDate</span> <span class=\"o\">=</span> <span class=\"nx\">hireDate</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// ... and on the constructor's prototype property to define the methods of the class</span>\n<span class=\"c1\">// We actually can define the methods inside the constructor but it's common practice</span>\n<span class=\"c1\">//  to define them on the prototype to get the maximum benefit of the prototypal inheritance</span>\n<span class=\"nx\">Employee</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">Save</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Employee saved: </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">FullName</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\">, </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">HireDate</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">());</span>  \n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">e</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Employee</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Rodan Sotto</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">12/1/2015</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">Save</span><span class=\"p\">();</span> <span class=\"c1\">// displays \"Employee saved: Rodan Sotto, 12/1/2015\"</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">Employee</span><span class=\"p\">);</span> <span class=\"c1\">// displays the Employee constructor</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">Employee</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">);</span> <span class=\"c1\">// displays an object containing the Save() method</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">Employee</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"kd\">constructor</span><span class=\"p\">);</span> <span class=\"c1\">// displays the original constructor (e.g. the Employee constructor)</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">getPrototypeOf</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">));</span> <span class=\"c1\">// displays the Employee prototype</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">getPrototypeOf</span><span class=\"p\">(</span><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">getPrototypeOf</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)));</span> <span class=\"c1\">// displays Object</span>\n\n<span class=\"c1\">// To inherit from Employee, the following is the common pattern used</span>\n<span class=\"c1\">// Notice the call to Employee.call(), this calls the Employee constructor but runs it in the context of the Manager by passing \"this\"</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">*****Inheritance*****</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">Manager</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">fullName</span><span class=\"p\">,</span> <span class=\"nx\">hireDate</span><span class=\"p\">,</span> <span class=\"nx\">companyShares</span><span class=\"p\">){</span>\n  <span class=\"nx\">Employee</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">fullName</span><span class=\"p\">,</span> <span class=\"nx\">hireDate</span><span class=\"p\">);</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">CompanyShares</span> <span class=\"o\">=</span> <span class=\"nx\">companyShares</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// The next statement is needed to allow Manager to inherit properties and methods defined on the Employee constructor's prototype</span>\n<span class=\"nx\">Manager</span><span class=\"p\">.</span><span class=\"nx\">prototype</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">Employee</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Because of the previous statement, the Manager constructor's prototype's constructor is set to the Employee constructor</span>\n<span class=\"c1\">//  and we do not want that, so we need to fix this to point to the Manager constructor</span>\n<span class=\"nx\">Manager</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"kd\">constructor</span> <span class=\"o\">=</span> <span class=\"nx\">Manager</span><span class=\"p\">;</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">m</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Manager</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">John Smith</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">1/1/2000</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n<span class=\"nx\">m</span><span class=\"p\">.</span><span class=\"nx\">Save</span><span class=\"p\">();</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">Manager</span><span class=\"p\">);</span> <span class=\"c1\">// displays the Manager constructor</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">Manager</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">);</span> <span class=\"c1\">// displays an object containing the constructor property and the inherited Save() method</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">Manager</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"kd\">constructor</span><span class=\"p\">);</span> <span class=\"c1\">// displays the Manager constructor</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">getPrototypeOf</span><span class=\"p\">(</span><span class=\"nx\">m</span><span class=\"p\">));</span> <span class=\"c1\">// displays the Manager prototype</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">getPrototypeOf</span><span class=\"p\">(</span><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">getPrototypeOf</span><span class=\"p\">(</span><span class=\"nx\">m</span><span class=\"p\">)));</span> <span class=\"c1\">// displays Employee prototype</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">getPrototypeOf</span><span class=\"p\">(</span><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">getPrototypeOf</span><span class=\"p\">(</span><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">getPrototypeOf</span><span class=\"p\">(</span><span class=\"nx\">m</span><span class=\"p\">))));</span> <span class=\"c1\">// displays Object</span>\n\n<span class=\"c1\">// As we can see in the last three statements how Manager inherits Employee</span>\n<span class=\"c1\">//  and the Employee inherits from Object by traversing the prototype chain</span>\n</code></pre></div></div>\n"
    } ,
  
    {
      "title"    : "TypeScript Notes: Part 2",
      "category" : "javascript",
      "tags"     : "",
      "url"      : "/tech-blog/2017/10/16/typescript-notes-part-2.html",
      "date"     : "2017-10-16 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/tslogo.png\" alt=\"\" /> Part 2 is all about classes, interfaces, abstract classes, and inheritance in TypeScript.  It’s similar to OOP in C#.  So easy to grasp and use that one might totally forget how OOP in JavaScript works.  Same as in <a href=\"https://rodansotto.github.io/tech-blog/2017/09/08/typescript-notes-part-1.html\">TypeScript Notes: Part 1</a>, I will present the TypeScript code and the generated JavaScript code.  The generated JavaScript code might be overwhelming to understand at first but as long as your knowledge with JavaScript objects is still intact, you should be able to figure it out.  For a refresher, read <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects\">MDN’s Introducing JavaScript objects</a></p>\n\n<p>.</p>\n\n<div class=\"language-ts highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// TypeScript Notes: Part 2</span>\n\n<span class=\"c1\">// Classes, access modifiers, properties, constructor</span>\n<span class=\"kd\">class</span> <span class=\"nx\">Employee</span> <span class=\"p\">{</span>\n    <span class=\"nl\">FullName</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n    <span class=\"k\">public</span> <span class=\"nx\">HireDate</span><span class=\"p\">:</span> <span class=\"nb\">Date</span><span class=\"p\">;</span> <span class=\"c1\">// this is a Javascript Date object</span>\n    <span class=\"k\">private</span> <span class=\"nx\">Salary</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n    <span class=\"k\">protected</span> <span class=\"nx\">HomeAddress</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// properties / accessors</span>\n    <span class=\"k\">private</span> <span class=\"nx\">_position</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n    <span class=\"kd\">get</span> <span class=\"nx\">Position</span><span class=\"p\">():</span> <span class=\"kr\">string</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">_position</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kd\">set</span> <span class=\"nx\">Position</span><span class=\"p\">(</span><span class=\"nx\">position</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">_position</span> <span class=\"o\">=</span> <span class=\"nx\">position</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// constructor</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Employee object created</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">Save</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Employee saved: </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">FullName</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\">, </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">HireDate</span><span class=\"p\">.</span><span class=\"nx\">toLocaleDateString</span><span class=\"p\">());</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">e</span><span class=\"p\">:</span> <span class=\"nx\">Employee</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Employee</span><span class=\"p\">();</span> <span class=\"c1\">// displays \"Employee object created\"</span>\n<span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">FullName</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Rodan Sotto</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">HireDate</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">12/1/2015</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">Save</span><span class=\"p\">();</span> <span class=\"c1\">// displays \"Employee saved: Rodan Sotto, 12/1/2015\"</span>\n\n<span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">Salary</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"c1\">// compile-time error because e.Salary is declared private; default access modifier is public</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Salary set to </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">Salary</span><span class=\"p\">);</span>\n\n<span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">HomeAddress</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Mississauga, ON</span><span class=\"dl\">\"</span><span class=\"p\">;</span> <span class=\"c1\">// compile-time error because e.HomeAddress is protected</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Home address set to </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">HomeAddress</span><span class=\"p\">);</span>\n\n<span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">Position</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Senior Software Developer</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Position set to </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">Position</span><span class=\"p\">);</span> <span class=\"c1\">// displays \"Position set to Senior Software Developer\"</span>\n<span class=\"c1\">// Note: To support properties / accessors, at minimum, ES5 is required</span>\n\n<span class=\"c1\">// Using shorthand properties to initialize properties at construction</span>\n<span class=\"kd\">class</span> <span class=\"nx\">Employer</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// specifying access modifier before constructor parameter makes it a property</span>\n    <span class=\"c1\">// in the example below, Name and Address are properties while misc is not</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"k\">public</span> <span class=\"nx\">Name</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"k\">public</span> <span class=\"nx\">Address</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"nx\">misc</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">er</span><span class=\"p\">:</span> <span class=\"nx\">Employer</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Employer</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Acme Company</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Ontario, Canada</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">xyz</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Employer: </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">er</span><span class=\"p\">.</span><span class=\"nx\">Name</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\">, </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">er</span><span class=\"p\">.</span><span class=\"nx\">Address</span><span class=\"p\">);</span> <span class=\"c1\">// displays \"Employer: Acme Company, Ontario, Canada\"</span>\n\n<span class=\"c1\">// Inheritance, protected variables in derived classes</span>\n<span class=\"kd\">class</span> <span class=\"nx\">Manager</span> <span class=\"kd\">extends</span> <span class=\"nx\">Employee</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"k\">public</span> <span class=\"nx\">CompanyShares</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">,</span> <span class=\"nx\">address</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"p\">();</span> <span class=\"c1\">// required call for derived classes</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">HomeAddress</span> <span class=\"o\">=</span> <span class=\"nx\">address</span><span class=\"p\">;</span> <span class=\"c1\">// protected variable is accessible to derived classes</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// method to return the protected variable HomeAddress</span>\n    <span class=\"nx\">GetHomeAddress</span><span class=\"p\">():</span> <span class=\"kr\">string</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">HomeAddress</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">m</span><span class=\"p\">:</span> <span class=\"nx\">Manager</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Manager</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Toronto, ON</span><span class=\"dl\">\"</span><span class=\"p\">);</span> <span class=\"c1\">// displays \"Employee object created\"</span>\n<span class=\"nx\">m</span><span class=\"p\">.</span><span class=\"nx\">FullName</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">John Smith</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"nx\">m</span><span class=\"p\">.</span><span class=\"nx\">HireDate</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">1/1/2000</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">m</span><span class=\"p\">.</span><span class=\"nx\">Position</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Development Manager</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"nx\">m</span><span class=\"p\">.</span><span class=\"nx\">Save</span><span class=\"p\">();</span> <span class=\"c1\">// displays \"Employee saved: John Smith, 1/1/2000\"</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Company shares set to </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">m</span><span class=\"p\">.</span><span class=\"nx\">CompanyShares</span><span class=\"p\">);</span> <span class=\"c1\">// displays \"Company shares set to 1000\"</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Home address set to </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">m</span><span class=\"p\">.</span><span class=\"nx\">GetHomeAddress</span><span class=\"p\">());</span> <span class=\"c1\">// displays \"Home address set to Toronto, ON\"</span>\n\n<span class=\"c1\">// Template strings</span>\n<span class=\"c1\">// To use, enclose your template string with the tick symbol (`)</span>\n<span class=\"c1\">//  and enclose the variables in ${} notation</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`Manager </span><span class=\"p\">${</span><span class=\"nx\">m</span><span class=\"p\">.</span><span class=\"nx\">FullName</span><span class=\"p\">}</span><span class=\"s2\"> is hired </span><span class=\"p\">${</span><span class=\"nx\">m</span><span class=\"p\">.</span><span class=\"nx\">HireDate</span><span class=\"p\">.</span><span class=\"nx\">toLocaleDateString</span><span class=\"p\">()}</span><span class=\"s2\"> as a </span><span class=\"p\">${</span><span class=\"nx\">m</span><span class=\"p\">.</span><span class=\"nx\">Position</span><span class=\"p\">}</span><span class=\"s2\"> and he lives in </span><span class=\"p\">${</span><span class=\"nx\">m</span><span class=\"p\">.</span><span class=\"nx\">GetHomeAddress</span><span class=\"p\">()}</span><span class=\"s2\">`</span><span class=\"p\">);</span>\n<span class=\"c1\">// displays \"Manager John Smith is hired ?1?/?1?/?2000 as a Development Manager and he lives in Toronto, ON\"</span>\n\n<span class=\"c1\">// Interfaces</span>\n<span class=\"kr\">interface</span> <span class=\"nx\">ICanSing</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Sing</span><span class=\"p\">():</span> <span class=\"k\">void</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">interface</span> <span class=\"nx\">ICanDance</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Dance</span><span class=\"p\">():</span> <span class=\"k\">void</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">Person</span> <span class=\"k\">implements</span> <span class=\"nx\">ICanSing</span><span class=\"p\">,</span> <span class=\"nx\">ICanDance</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"k\">public</span> <span class=\"nx\">Name</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">Sing</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">Name</span><span class=\"p\">}</span><span class=\"s2\"> can sing!`</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">Dance</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">Name</span><span class=\"p\">}</span><span class=\"s2\"> can dance!`</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">j</span><span class=\"p\">:</span> <span class=\"nx\">Person</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Person</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Jane</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">j</span><span class=\"p\">.</span><span class=\"nx\">Sing</span><span class=\"p\">();</span> <span class=\"c1\">// displays \"Jane can sing!\"</span>\n<span class=\"nx\">j</span><span class=\"p\">.</span><span class=\"nx\">Dance</span><span class=\"p\">();</span> <span class=\"c1\">// displays \"Jane can dance!\"</span>\n\n<span class=\"c1\">// Abstract classes</span>\n<span class=\"c1\">// In an abstract class you can have partial implementation while in an interface you cannot</span>\n<span class=\"c1\">// Plus you cannot extend more than one abstract class while you can implement more than one interface</span>\n<span class=\"kd\">abstract</span> <span class=\"kd\">class</span> <span class=\"nx\">AbstractPerson</span> <span class=\"p\">{</span>\n    <span class=\"nx\">ShowAbilities</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">CanSing</span><span class=\"p\">)</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">Sing</span><span class=\"p\">();</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">CanDance</span><span class=\"p\">)</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">Dance</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nl\">CanSing</span><span class=\"p\">:</span> <span class=\"nx\">boolean</span><span class=\"p\">;</span>\n    <span class=\"nl\">CanDance</span><span class=\"p\">:</span> <span class=\"nx\">boolean</span><span class=\"p\">;</span>\n    <span class=\"kd\">abstract</span> <span class=\"nx\">Sing</span><span class=\"p\">():</span> <span class=\"k\">void</span><span class=\"p\">;</span>\n    <span class=\"kd\">abstract</span> <span class=\"nx\">Dance</span><span class=\"p\">():</span> <span class=\"k\">void</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">AnotherPerson</span> <span class=\"kd\">extends</span> <span class=\"nx\">AbstractPerson</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"k\">public</span> <span class=\"nx\">Name</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">Sing</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">Name</span><span class=\"p\">}</span><span class=\"s2\"> can sing!`</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">Dance</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">Name</span><span class=\"p\">}</span><span class=\"s2\"> can dance!`</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">k</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">AnotherPerson</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Kane</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">k</span><span class=\"p\">.</span><span class=\"nx\">CanSing</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"nx\">k</span><span class=\"p\">.</span><span class=\"nx\">CanDance</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n<span class=\"nx\">k</span><span class=\"p\">.</span><span class=\"nx\">ShowAbilities</span><span class=\"p\">();</span>\n</code></pre></div></div>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Generated JavaScript Code From TypeScript Notes: Part 2</span>\n\n<span class=\"c1\">// Classes, access modifiers, properties, constructor</span>\n<span class=\"kd\">var</span> <span class=\"nx\">Employee</span> <span class=\"o\">=</span> <span class=\"cm\">/** @class */</span> <span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// constructor</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">Employee</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Employee object created</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    \n\t<span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">defineProperty</span><span class=\"p\">(</span><span class=\"nx\">Employee</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Position</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"na\">get</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">_position</span><span class=\"p\">;</span>\n        <span class=\"p\">},</span>\n        <span class=\"na\">set</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">position</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">_position</span> <span class=\"o\">=</span> <span class=\"nx\">position</span><span class=\"p\">;</span>\n        <span class=\"p\">},</span>\n        <span class=\"na\">enumerable</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n        <span class=\"na\">configurable</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n    <span class=\"p\">});</span>\n    \n\t<span class=\"nx\">Employee</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">Save</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Employee saved: </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">FullName</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\">, </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">HireDate</span><span class=\"p\">.</span><span class=\"nx\">toLocaleDateString</span><span class=\"p\">());</span>\n    <span class=\"p\">};</span>\n    \n\t<span class=\"k\">return</span> <span class=\"nx\">Employee</span><span class=\"p\">;</span>\n<span class=\"p\">}());</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">e</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Employee</span><span class=\"p\">();</span> <span class=\"c1\">// displays \"Employee object created\"</span>\n<span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">FullName</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Rodan Sotto</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">HireDate</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">12/1/2015</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">Save</span><span class=\"p\">();</span> <span class=\"c1\">// displays \"Employee saved: Rodan Sotto, 12/1/2015\"</span>\n\n<span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">Salary</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Salary set to </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">Salary</span><span class=\"p\">);</span>\n\n<span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">HomeAddress</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Mississauga, ON</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Home address set to </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">HomeAddress</span><span class=\"p\">);</span>\n\n<span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">Position</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Senior Software Developer</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Position set to </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">Position</span><span class=\"p\">);</span> <span class=\"c1\">// displays \"Position set to Senior Software Developer\"</span>\n\n<span class=\"c1\">// Using shorthand properties to initialize properties at construction</span>\n<span class=\"kd\">var</span> <span class=\"nx\">Employer</span> <span class=\"o\">=</span> <span class=\"cm\">/** @class */</span> <span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">Employer</span><span class=\"p\">(</span><span class=\"nx\">Name</span><span class=\"p\">,</span> <span class=\"nx\">Address</span><span class=\"p\">,</span> <span class=\"nx\">misc</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">Name</span> <span class=\"o\">=</span> <span class=\"nx\">Name</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">Address</span> <span class=\"o\">=</span> <span class=\"nx\">Address</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    \n\t<span class=\"k\">return</span> <span class=\"nx\">Employer</span><span class=\"p\">;</span>\n<span class=\"p\">}());</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">er</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Employer</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Acme Company</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Ontario, Canada</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">xyz</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Employer: </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">er</span><span class=\"p\">.</span><span class=\"nx\">Name</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\">, </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">er</span><span class=\"p\">.</span><span class=\"nx\">Address</span><span class=\"p\">);</span> <span class=\"c1\">// displays \"Employer: Acme Company, Ontario, Canada\"</span>\n\n<span class=\"c1\">// Inheritance, protected variables in derived classes</span>\n<span class=\"kd\">var</span> <span class=\"nx\">Manager</span> <span class=\"o\">=</span> <span class=\"cm\">/** @class */</span> <span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">_super</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">__extends</span><span class=\"p\">(</span><span class=\"nx\">Manager</span><span class=\"p\">,</span> <span class=\"nx\">_super</span><span class=\"p\">);</span>\n    \n\t<span class=\"kd\">function</span> <span class=\"nx\">Manager</span><span class=\"p\">(</span><span class=\"nx\">CompanyShares</span><span class=\"p\">,</span> <span class=\"nx\">address</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">_this</span> <span class=\"o\">=</span> <span class=\"nx\">_super</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n        <span class=\"nx\">_this</span><span class=\"p\">.</span><span class=\"nx\">CompanyShares</span> <span class=\"o\">=</span> <span class=\"nx\">CompanyShares</span><span class=\"p\">;</span>\n        <span class=\"nx\">_this</span><span class=\"p\">.</span><span class=\"nx\">HomeAddress</span> <span class=\"o\">=</span> <span class=\"nx\">address</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"nx\">_this</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"nx\">Manager</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">GetHomeAddress</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">HomeAddress</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n    \n\t<span class=\"k\">return</span> <span class=\"nx\">Manager</span><span class=\"p\">;</span>\n<span class=\"p\">}(</span><span class=\"nx\">Employee</span><span class=\"p\">));</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">m</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Manager</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Toronto, ON</span><span class=\"dl\">\"</span><span class=\"p\">);</span> <span class=\"c1\">// displays \"Employee object created\"</span>\n<span class=\"nx\">m</span><span class=\"p\">.</span><span class=\"nx\">FullName</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">John Smith</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"nx\">m</span><span class=\"p\">.</span><span class=\"nx\">HireDate</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">1/1/2000</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">m</span><span class=\"p\">.</span><span class=\"nx\">Position</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Development Manager</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"nx\">m</span><span class=\"p\">.</span><span class=\"nx\">Save</span><span class=\"p\">();</span> <span class=\"c1\">// displays \"Employee saved: John Smith, 1/1/2000\"</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Company shares set to </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">m</span><span class=\"p\">.</span><span class=\"nx\">CompanyShares</span><span class=\"p\">);</span> <span class=\"c1\">// displays \"Company shares set to 1000\"</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Home address set to </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">m</span><span class=\"p\">.</span><span class=\"nx\">GetHomeAddress</span><span class=\"p\">());</span> <span class=\"c1\">// displays \"Home address set to Toronto, ON\"</span>\n\n<span class=\"c1\">// Template strings</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Manager </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">m</span><span class=\"p\">.</span><span class=\"nx\">FullName</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\"> is hired </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">m</span><span class=\"p\">.</span><span class=\"nx\">HireDate</span><span class=\"p\">.</span><span class=\"nx\">toLocaleDateString</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\"> as a </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">m</span><span class=\"p\">.</span><span class=\"nx\">Position</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\"> and he lives in </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">m</span><span class=\"p\">.</span><span class=\"nx\">GetHomeAddress</span><span class=\"p\">());</span>\n\n<span class=\"c1\">// Interfaces</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">Person</span> <span class=\"o\">=</span> <span class=\"cm\">/** @class */</span> <span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">Person</span><span class=\"p\">(</span><span class=\"nx\">Name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">Name</span> <span class=\"o\">=</span> <span class=\"nx\">Name</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    \n\t<span class=\"nx\">Person</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">Sing</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">Name</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\"> can sing!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"p\">};</span>\n    \n\t<span class=\"nx\">Person</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">Dance</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">Name</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\"> can dance!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"p\">};</span>\n    \n\t<span class=\"k\">return</span> <span class=\"nx\">Person</span><span class=\"p\">;</span>\n<span class=\"p\">}());</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">j</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Person</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Jane</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">j</span><span class=\"p\">.</span><span class=\"nx\">Sing</span><span class=\"p\">();</span> <span class=\"c1\">// displays \"Jane can sing!\"</span>\n<span class=\"nx\">j</span><span class=\"p\">.</span><span class=\"nx\">Dance</span><span class=\"p\">();</span> <span class=\"c1\">// displays \"Jane can dance!\"</span>\n\n<span class=\"c1\">// Abstract classes</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">AbstractPerson</span> <span class=\"o\">=</span> <span class=\"cm\">/** @class */</span> <span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">AbstractPerson</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">AbstractPerson</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">ShowAbilities</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">CanSing</span><span class=\"p\">)</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">Sing</span><span class=\"p\">();</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">CanDance</span><span class=\"p\">)</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">Dance</span><span class=\"p\">();</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">AbstractPerson</span><span class=\"p\">;</span>\n<span class=\"p\">}());</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">AnotherPerson</span> <span class=\"o\">=</span> <span class=\"cm\">/** @class */</span> <span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">_super</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">__extends</span><span class=\"p\">(</span><span class=\"nx\">AnotherPerson</span><span class=\"p\">,</span> <span class=\"nx\">_super</span><span class=\"p\">);</span>\n    \n\t<span class=\"kd\">function</span> <span class=\"nx\">AnotherPerson</span><span class=\"p\">(</span><span class=\"nx\">Name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">_this</span> <span class=\"o\">=</span> <span class=\"nx\">_super</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n        <span class=\"nx\">_this</span><span class=\"p\">.</span><span class=\"nx\">Name</span> <span class=\"o\">=</span> <span class=\"nx\">Name</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"nx\">_this</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    \n\t<span class=\"nx\">AnotherPerson</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">Sing</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">Name</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\"> can sing!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"p\">};</span>\n    \n\t<span class=\"nx\">AnotherPerson</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">Dance</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">Name</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\"> can dance!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"p\">};</span>\n    \n\t<span class=\"k\">return</span> <span class=\"nx\">AnotherPerson</span><span class=\"p\">;</span>\n<span class=\"p\">}(</span><span class=\"nx\">AbstractPerson</span><span class=\"p\">));</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">k</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">AnotherPerson</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Kane</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">k</span><span class=\"p\">.</span><span class=\"nx\">CanSing</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"nx\">k</span><span class=\"p\">.</span><span class=\"nx\">CanDance</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n<span class=\"nx\">k</span><span class=\"p\">.</span><span class=\"nx\">ShowAbilities</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// This is the __extends code used to implement classes extending another class or abstract class in Typescript</span>\n<span class=\"kd\">var</span> <span class=\"nx\">__extends</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">this</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">__extends</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">extendStatics</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">setPrototypeOf</span> <span class=\"o\">||</span>\n        <span class=\"p\">({</span> <span class=\"na\">__proto__</span><span class=\"p\">:</span> <span class=\"err\">\\</span><span class=\"p\">[</span><span class=\"err\">\\</span><span class=\"p\">]</span> <span class=\"p\">}</span> <span class=\"k\">instanceof</span> <span class=\"nb\">Array</span> <span class=\"o\">&amp;&amp;</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">d</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">d</span><span class=\"p\">.</span><span class=\"nx\">__proto__</span> <span class=\"o\">=</span> <span class=\"nx\">b</span><span class=\"p\">;</span> <span class=\"p\">})</span> <span class=\"o\">||</span>\n        <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">d</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">p</span> <span class=\"k\">in</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">hasOwnProperty</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">))</span> <span class=\"nx\">d</span><span class=\"err\">\\</span><span class=\"p\">[</span><span class=\"nx\">p</span><span class=\"err\">\\</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">b</span><span class=\"err\">\\</span><span class=\"p\">[</span><span class=\"nx\">p</span><span class=\"err\">\\</span><span class=\"p\">];</span> <span class=\"p\">};</span>\n    \n\t<span class=\"k\">return</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">d</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">extendStatics</span><span class=\"p\">(</span><span class=\"nx\">d</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">);</span>\n        <span class=\"kd\">function</span> <span class=\"nx\">__</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"kd\">constructor</span> <span class=\"o\">=</span> <span class=\"nx\">d</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n        <span class=\"nx\">d</span><span class=\"p\">.</span><span class=\"nx\">prototype</span> <span class=\"o\">=</span> <span class=\"nx\">b</span> <span class=\"o\">===</span> <span class=\"kc\">null</span> <span class=\"p\">?</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nx\">__</span><span class=\"p\">.</span><span class=\"nx\">prototype</span> <span class=\"o\">=</span> <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">,</span> <span class=\"k\">new</span> <span class=\"nx\">__</span><span class=\"p\">());</span>\n    <span class=\"p\">};</span>\n<span class=\"p\">})();</span>\n</code></pre></div></div>\n"
    } ,
  
    {
      "title"    : "SQL Tricks: CSV To Table Rows And Vice Versa",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2017/10/12/sql-tricks-csv-to-table-rows-and-vice-versa.html",
      "date"     : "2017-10-12 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/sqllogo1.png\" alt=\"\" /> I was looking for a one-line SQL statement to convert a comma-separated value list string to table rows and vice-versa and below is what I found.  I prefer not to put logic in my SQL code (I prefer to limit it with just the simple CRUD statements) but if no other choice then these two SQL tricks will come in handy.  You can try to execute this SQL query on any online SQL compiler you can find on the Internet, but I would recommend <a href=\"http://rextester.com/l/sql_server_online_compiler\">rextester’s sql compiler</a></p>\n\n<p>.</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- So if you have a comma separated list, for example a list of integers</span>\n<span class=\"k\">DECLARE</span> <span class=\"o\">@</span><span class=\"n\">MyListOfInts</span> <span class=\"nb\">VARCHAR</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"s1\">'123,456,789'</span>\n\n<span class=\"c1\">-- Use the following SQL trick to parse them to table rows</span>\n<span class=\"c1\">-- Basically you convert the CSV to XML first and use the nodes() method to shred the XML into relational data</span>\n<span class=\"k\">SELECT</span> <span class=\"n\">List</span><span class=\"p\">.</span><span class=\"n\">Item</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"s1\">'INT'</span><span class=\"p\">)</span>\n<span class=\"k\">FROM</span>\n<span class=\"p\">(</span>\n    <span class=\"k\">SELECT</span> <span class=\"k\">CAST</span><span class=\"p\">(</span><span class=\"s1\">'&lt;List&gt;&lt;Item&gt;'</span> <span class=\"o\">+</span> <span class=\"k\">REPLACE</span><span class=\"p\">(</span><span class=\"o\">@</span><span class=\"n\">MyListOfInts</span><span class=\"p\">,</span><span class=\"s1\">','</span><span class=\"p\">,</span><span class=\"s1\">'&lt;/Item&gt;&lt;Item&gt;'</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/Item&gt;&lt;/List&gt;'</span> <span class=\"k\">AS</span> <span class=\"n\">XML</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">ListXML</span>\n<span class=\"p\">)</span> <span class=\"n\">ListXMLTable</span>\n<span class=\"k\">CROSS</span> <span class=\"n\">APPLY</span> <span class=\"n\">ListXMLTable</span><span class=\"p\">.</span><span class=\"n\">ListXML</span><span class=\"p\">.</span><span class=\"n\">nodes</span><span class=\"p\">(</span><span class=\"s1\">'/List/Item'</span><span class=\"p\">)</span> <span class=\"n\">List</span><span class=\"p\">(</span><span class=\"n\">Item</span><span class=\"p\">)</span>\n\n<span class=\"c1\">-- And if you have values in table rows that you want to convert to CSV...</span>\n<span class=\"c1\">-- The following SQL trick will do it for you</span>\n<span class=\"c1\">-- Basically the inner SELECT query with unnamed column and with FOR XML PATH('') converts the </span>\n<span class=\"c1\">-- table row values to XML without any tags and the SUBSTRING() function in the outer SELECT query</span>\n<span class=\"c1\">-- just removes the leading comma character</span>\n<span class=\"k\">SELECT</span> <span class=\"k\">SUBSTRING</span>\n<span class=\"p\">(</span>\n    <span class=\"p\">(</span>\n        <span class=\"k\">SELECT</span> <span class=\"s1\">','</span> <span class=\"o\">+</span> <span class=\"k\">CAST</span><span class=\"p\">(</span><span class=\"n\">List</span><span class=\"p\">.</span><span class=\"n\">Item</span> <span class=\"k\">AS</span> <span class=\"nb\">VARCHAR</span><span class=\"p\">(</span><span class=\"k\">MAX</span><span class=\"p\">))</span>\n        <span class=\"k\">FROM</span>\n        <span class=\"p\">(</span>\n            <span class=\"k\">SELECT</span> <span class=\"mi\">123</span> <span class=\"k\">AS</span> <span class=\"n\">Item</span> <span class=\"k\">UNION</span> <span class=\"k\">SELECT</span> <span class=\"mi\">456</span> <span class=\"k\">UNION</span> <span class=\"k\">SELECT</span> <span class=\"mi\">789</span>\n        <span class=\"p\">)</span> <span class=\"n\">List</span>\n        <span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"n\">List</span><span class=\"p\">.</span><span class=\"n\">Item</span>\n        <span class=\"k\">FOR</span> <span class=\"n\">XML</span> <span class=\"n\">PATH</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"p\">,</span><span class=\"mi\">2</span>\n    <span class=\"p\">,</span><span class=\"mi\">1000</span>\n<span class=\"p\">)</span>\n</code></pre></div></div>\n"
    } ,
  
    {
      "title"    : "TypeScript Notes: Part 1",
      "category" : "javascript",
      "tags"     : "",
      "url"      : "/tech-blog/2017/09/08/typescript-notes-part-1.html",
      "date"     : "2017-09-08 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/tslogo.png\" alt=\"\" /> I decided to post a series of notes on TypeScript and this is Part 1.  I think understanding what TypeScript does makes you a better JavaScript programmer as you will come to know the issues inherent in JavaScript.  The format I will be using is to present the TypeScript code and explain it along the way in the comments itself and then present the generated JavaScript code.  You can play with the code by copying it and pasting it on any online TypeScript compiler/runner app.  I recommend <a href=\"https://www.typescriptlang.org/play/\">Playground TypeScript</a></p>\n\n<p>.  So let’s get to it and no more dilly dally.</p>\n\n<div class=\"language-ts highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// TypeScript Notes: Part 1</span>\n\n<span class=\"c1\">// Using var</span>\n<span class=\"c1\">// Works almost the same way as using var in Javascript</span>\n<span class=\"kd\">var</span> <span class=\"nx\">myDeclaredVar</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Rodan Sotto</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myDeclaredVar</span><span class=\"p\">);</span> <span class=\"c1\">// displays \"Rodan Sotto\"</span>\n<span class=\"c1\">//console.log(myUndeclaredVar); // compile-time error; in JavaScript it's a runtime error</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myHoistedVar</span><span class=\"p\">);</span> <span class=\"c1\">// displays \"undefined\"; no error because all JavaScript var declarations anywhere in the code are moved up and made available from line 1 (concept called hoisting)</span>\n<span class=\"kd\">var</span> <span class=\"nx\">myHoistedVar</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">myNoBlockLevelScopingVar</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">myNoBlockLevelScopingVar</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">myNoBlockLevelScopingVar</span> <span class=\"o\">=</span> <span class=\"mi\">6</span><span class=\"p\">;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myNoBlockLevelScopingVar</span><span class=\"p\">);</span> <span class=\"c1\">// displays 6 as expected</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myNoBlockLevelScopingVar</span><span class=\"p\">);</span> <span class=\"c1\">// displays 6 as well because JavaScript var declarations don't have block level scoping</span>\n\n<span class=\"c1\">// Using let</span>\n<span class=\"c1\">// This solves issues with variable hoisting and no block level scoping</span>\n<span class=\"kd\">let</span> <span class=\"nx\">myLetVar</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Rodan Sotto</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myLetVar</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myNotHoistedLetVar</span><span class=\"p\">);</span> <span class=\"c1\">// compile-time error because let does not allow hoisting variables</span>\n<span class=\"kd\">let</span> <span class=\"nx\">myNotHoistedLetVar</span><span class=\"p\">;</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">myBlockLevelScopingLetVar</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">myBlockLevelScopingLetVar</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">myBlockLevelScopingLetVar</span> <span class=\"o\">=</span> <span class=\"mi\">6</span><span class=\"p\">;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myBlockLevelScopingLetVar</span><span class=\"p\">);</span> <span class=\"c1\">// displays 6 as expected</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myBlockLevelScopingLetVar</span><span class=\"p\">)</span> <span class=\"c1\">// displays 5 because let allows block level scoping (check the generated JavaScript code how it does this)</span>\n\n<span class=\"c1\">// Using const</span>\n<span class=\"kd\">const</span> <span class=\"nx\">myConst</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"nx\">myConst</span> <span class=\"o\">=</span> <span class=\"mi\">6</span><span class=\"p\">;</span> <span class=\"c1\">// compile-time error because const does not allow changing the values of constant or read-only variables</span>\n\n<span class=\"c1\">// Data types: number, string, and boolean</span>\n<span class=\"kd\">let</span> <span class=\"nx\">n</span><span class=\"p\">:</span> <span class=\"kr\">number</span> <span class=\"o\">=</span> <span class=\"mi\">123</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">s</span><span class=\"p\">:</span> <span class=\"kr\">string</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">ABC</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">b</span><span class=\"p\">:</span> <span class=\"nx\">boolean</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"nx\">n</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">DEF</span><span class=\"dl\">\"</span><span class=\"p\">;</span> <span class=\"c1\">// compile-time error because TypeScript is type safe</span>\n<span class=\"nx\">s</span> <span class=\"o\">=</span> <span class=\"mi\">456</span><span class=\"p\">;</span> <span class=\"c1\">// compile-time error</span>\n<span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">GHI</span><span class=\"dl\">\"</span><span class=\"p\">;</span> <span class=\"c1\">// compile-time error</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">myTypeInferedVar</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"nx\">myTypeInferedVar</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">A</span><span class=\"dl\">\"</span><span class=\"p\">;</span> <span class=\"c1\">// compile-time error because TypeScript has type inference that decides the type of datatype-less variables based on first assignment</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">myNotTypeInferedVar</span><span class=\"p\">;</span> <span class=\"c1\">// notice that there is no initialization here</span>\n<span class=\"nx\">myNotTypeInferedVar</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myNotTypeInferedVar</span><span class=\"p\">);</span> <span class=\"c1\">// displays 1</span>\n<span class=\"nx\">myNotTypeInferedVar</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">A</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myNotTypeInferedVar</span><span class=\"p\">);</span> <span class=\"c1\">// displays \"A\"; no compile-time error because varialbles with no data type specified is by default has an implicit datatype of any</span>\n\n<span class=\"c1\">// Data type any</span>\n<span class=\"c1\">// This is default datatype for datatype-less variables</span>\n<span class=\"c1\">// Use it when it is a must because it is not a best practice always.</span>\n<span class=\"kd\">let</span> <span class=\"nx\">myAnyTypeVar</span><span class=\"p\">:</span> <span class=\"kr\">any</span><span class=\"p\">;</span>\n<span class=\"nx\">myAnyTypeVar</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myAnyTypeVar</span><span class=\"p\">);</span> <span class=\"c1\">// displays 1</span>\n<span class=\"nx\">myAnyTypeVar</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">A</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myAnyTypeVar</span><span class=\"p\">);</span> <span class=\"c1\">// displays \"A\"</span>\n\n<span class=\"c1\">// Generic arrays</span>\n<span class=\"c1\">// Just like the C# generic collection</span>\n<span class=\"kd\">let</span> <span class=\"nx\">myNumberArray</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"kr\">number</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"kr\">number</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n<span class=\"nx\">myNumberArray</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"nx\">myNumberArray</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"nx\">myNumberArray</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">c-sharp</span><span class=\"dl\">\"</span><span class=\"p\">);</span> <span class=\"c1\">// compile-time error</span>\n\n<span class=\"c1\">// Functions in TypeScript ...</span>\n<span class=\"c1\">// ... forces you to return</span>\n<span class=\"kd\">function</span> <span class=\"nx\">myNumberFunction</span><span class=\"p\">():</span> <span class=\"kr\">number</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"c1\">// without this return statement will produce compile-time error</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// but following function declarations will not force you to return</span>\n<span class=\"kd\">function</span> <span class=\"nx\">myVoidFunction</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span> <span class=\"p\">}</span> <span class=\"c1\">// you cannot have return statement here</span>\n<span class=\"c1\">// or</span>\n<span class=\"kd\">function</span> <span class=\"nx\">myAnyFunction</span><span class=\"p\">():</span> <span class=\"kr\">any</span> <span class=\"p\">{</span> <span class=\"p\">}</span> <span class=\"c1\">// you can have return statement here</span>\n<span class=\"c1\">// or</span>\n<span class=\"kd\">function</span> <span class=\"nx\">myFunction</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"p\">}</span> <span class=\"c1\">// by default the return type is any</span>\n\n<span class=\"c1\">// ... has parameter checking</span>\n<span class=\"kd\">function</span> <span class=\"nx\">myFunctionWithParams</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">):</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">x</span> <span class=\"o\">+</span> <span class=\"nx\">y</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">myFunctionWithParams</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"nx\">myFunctionWithParams</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">);</span> <span class=\"c1\">// compile-time error</span>\n\n<span class=\"c1\">// ... does not allow duplicate function names regardless if parameters are different</span>\n<span class=\"kd\">function</span> <span class=\"nx\">myDuplicateFunction</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">):</span> <span class=\"k\">void</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n<span class=\"kd\">function</span> <span class=\"nx\">myDuplicateFunction</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">,</span> <span class=\"nx\">s</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">:</span> <span class=\"nx\">boolean</span><span class=\"p\">):</span> <span class=\"k\">void</span> <span class=\"p\">{</span> <span class=\"p\">}</span> <span class=\"c1\">// compile-time error</span>\n\n<span class=\"c1\">// ... has optional parameters</span>\n<span class=\"kd\">function</span> <span class=\"nx\">myFunctionWithOptionalParams</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">?:</span> <span class=\"kr\">number</span><span class=\"p\">):</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">);</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">y</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">myFunctionWithOptionalParams</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span> <span class=\"c1\">// displays 1 and 2</span>\n<span class=\"nx\">myFunctionWithOptionalParams</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"c1\">// displays 1 and \"undefined\"</span>\n\n<span class=\"c1\">// ... hs rest parameter which allows defining function with array as parameters</span>\n<span class=\"kd\">function</span> <span class=\"nx\">myFunctionWithRestParam</span><span class=\"p\">(...</span><span class=\"nx\">x</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"kr\">number</span><span class=\"o\">&gt;</span><span class=\"p\">):</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">e</span> <span class=\"k\">of</span> <span class=\"nx\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">myFunctionWithRestParam</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span> <span class=\"c1\">// displays 1 and 2</span>\n<span class=\"nx\">myFunctionWithRestParam</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">);</span> <span class=\"c1\">// displays 3, 4, and 5</span>\n<span class=\"nx\">myFunctionWithRestParam</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span> <span class=\"c1\">// displays 6, 7, 8, 9, and 0</span>\n</code></pre></div></div>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Generated JavaScript Code From TypeScript Notes: Part 1</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">myDeclaredVar</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Rodan Sotto</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myDeclaredVar</span><span class=\"p\">);</span> <span class=\"c1\">// displays \"Rodan Sotto\"</span>\n<span class=\"c1\">//console.log(myUndeclaredVar); // runtime error</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myHoistedVar</span><span class=\"p\">);</span> <span class=\"c1\">// displays \"undefined\"</span>\n<span class=\"kd\">var</span> <span class=\"nx\">myHoistedVar</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">myNoBlockLevelScopingVar</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">myNoBlockLevelScopingVar</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">myNoBlockLevelScopingVar</span> <span class=\"o\">=</span> <span class=\"mi\">6</span><span class=\"p\">;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myNoBlockLevelScopingVar</span><span class=\"p\">);</span> <span class=\"c1\">// displays 6 as expected</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myNoBlockLevelScopingVar</span><span class=\"p\">);</span> <span class=\"c1\">// displays 6 as well</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">myLetVar</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Rodan Sotto</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myLetVar</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myNotHoistedLetVar</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">myNotHoistedLetVar</span><span class=\"p\">;</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">myBlockLevelScopingLetVar</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">myBlockLevelScopingLetVar</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">myBlockLevelScopingLetVar_1</span> <span class=\"o\">=</span> <span class=\"mi\">6</span><span class=\"p\">;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myBlockLevelScopingLetVar_1</span><span class=\"p\">);</span> <span class=\"c1\">// displays 6 as expected</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myBlockLevelScopingLetVar</span><span class=\"p\">);</span> <span class=\"c1\">// displays 5</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">myConst</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"nx\">myConst</span> <span class=\"o\">=</span> <span class=\"mi\">6</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Data types: number, string, and boolean</span>\n<span class=\"kd\">var</span> <span class=\"nx\">n</span> <span class=\"o\">=</span> <span class=\"mi\">123</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">s</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">ABC</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"nx\">n</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">DEF</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"nx\">s</span> <span class=\"o\">=</span> <span class=\"mi\">456</span><span class=\"p\">;</span>\n<span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">GHI</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">myTypeInferedVar</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"nx\">myTypeInferedVar</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">A</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">myNotTypeInferedVar</span><span class=\"p\">;</span>\n<span class=\"nx\">myNotTypeInferedVar</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myNotTypeInferedVar</span><span class=\"p\">);</span> <span class=\"c1\">// displays 1</span>\n<span class=\"nx\">myNotTypeInferedVar</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">A</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myNotTypeInferedVar</span><span class=\"p\">);</span> <span class=\"c1\">// displays \"A\"</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">myAnyTypeVar</span><span class=\"p\">;</span>\n<span class=\"nx\">myAnyTypeVar</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myAnyTypeVar</span><span class=\"p\">);</span> <span class=\"c1\">// displays 1</span>\n<span class=\"nx\">myAnyTypeVar</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">A</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myAnyTypeVar</span><span class=\"p\">);</span> <span class=\"c1\">// displays \"A\"</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">myNumberArray</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Array</span><span class=\"p\">();</span>\n<span class=\"nx\">myNumberArray</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"nx\">myNumberArray</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"nx\">myNumberArray</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">c-sharp</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">myNumberFunction</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">myVoidFunction</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">myAnyFunction</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">myFunction</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">myFunctionWithParams</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">x</span> <span class=\"o\">+</span> <span class=\"nx\">y</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">myFunctionWithParams</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"nx\">myFunctionWithParams</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">);</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">myDuplicateFunction</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n<span class=\"kd\">function</span> <span class=\"nx\">myDuplicateFunction</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">s</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">myFunctionWithOptionalParams</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">);</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">y</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">myFunctionWithOptionalParams</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span> <span class=\"c1\">// displays 1 and 2</span>\n<span class=\"nx\">myFunctionWithOptionalParams</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"c1\">// displays 1 and \"undefined\"</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">myFunctionWithRestParam</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">_i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">_i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">arguments</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">_i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">x</span><span class=\"p\">[</span><span class=\"nx\">_i</span> <span class=\"o\">-</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">arguments</span><span class=\"p\">[</span><span class=\"nx\">_i</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">_a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">x_1</span> <span class=\"o\">=</span> <span class=\"nx\">x</span><span class=\"p\">;</span> <span class=\"nx\">_a</span> <span class=\"o\">&lt;</span> <span class=\"nx\">x_1</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">_a</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">e</span> <span class=\"o\">=</span> <span class=\"nx\">x_1</span><span class=\"p\">[</span><span class=\"nx\">_a</span><span class=\"p\">];</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">myFunctionWithRestParam</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span> <span class=\"c1\">// displays 1 and 2</span>\n<span class=\"nx\">myFunctionWithRestParam</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">);</span> <span class=\"c1\">// displays 3, 4, and 5</span>\n<span class=\"nx\">myFunctionWithRestParam</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span> <span class=\"c1\">// displays 6, 7, 8, 9, and 0</span>\n</code></pre></div></div>\n"
    } ,
  
    {
      "title"    : "SQL Server: Hiding your prod data and built-in function STUFF()",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2016/06/03/sql-server-hiding-your-prod-data-and-built-in-function-stuff.html",
      "date"     : "2016-06-03 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/sqllogo1.png\" alt=\"\" /></p>\n\n<p>If you need to use production data for your testing and don’t want to expose any sensitive data on your development environment, you should look at obfuscating them.  This <a href=\"https://www.simple-talk.com/sql/database-administration/obfuscating-your-sql-server-data/\">article</a> shows the common obfuscation methods in use: character scrambling, repeating character masking, numeric variance, nulling, artificial data generation, truncating, encoding, and aggregating.</p>\n\n<p>Also, if you are looking for a function in SQL Server that pretty much does like the function REPLACE() but only replaces one substring in a specific position and length, then <a href=\"https://msdn.microsoft.com/en-CA/library/ms188043.aspx\">STUFF()</a> might be the one.</p>\n\n"
    } ,
  
    {
      "title"    : "Writing to an output text file and finding out extra characters or lines in it?",
      "category" : "net",
      "tags"     : "",
      "url"      : "/tech-blog/2016/05/27/writing-to-an-output-text-file-and-finding-out-extra-characters-or-lines-in-it.html",
      "date"     : "2016-05-27 00:00:00 +0000",
      "content": "<p>If you’re using File.OpenWrite() to create the output file, make sure the output file does not exist.  This <a href=\"https://msdn.microsoft.com/en-us/library/system.io.file.openwrite(v=vs.110).aspx\">MSDN article</a> explains what happens if output file exists:</p>\n\n<blockquote>\n  <p>For an existing file, it does not append the new text to the existing text. Instead, it overwrites the existing characters with the new characters. If you overwrite a longer string (such as “This is a test of the OpenWrite method”) with a shorter string (such as “Second run”), the file will contain a mix of the strings (“Second runtest of the OpenWrite method”).</p>\n</blockquote>\n"
    } ,
  
    {
      "title"    : "Column aliases in ORDER BY works on older SQL version but not on SQL 2014?",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2016/05/26/column-aliases-in-order-by-works-on-older-sql-version-but-not-on-sql-2014.html",
      "date"     : "2016-05-26 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/sqllogo1.png\" alt=\"\" /></p>\n\n<p>The rule of thumb is: don’t prefix the column aliases with a table name or table alias in the ORDER BY clause, OR just use the column name directly instead.  This <a href=\"https://msdn.microsoft.com/en-us/library/ee240807(v=sql.120).aspx\">MSDN article</a> explains it in detail.</p>\n\n"
    } ,
  
    {
      "title"    : "What&#39;s new in C# 6?",
      "category" : "c-sharp",
      "tags"     : "",
      "url"      : "/tech-blog/2016/05/25/whats-new-in-c-6.html",
      "date"     : "2016-05-25 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/csbloglogo21.png\" alt=\"\" /></p>\n\n<p>Even though I’m still using VS2013 for all the projects I’m working on, it won’t hurt to know the new features of C# 6 in VS2015.  I might start converting some of them or maybe start the new projects in VS2015, who knows.</p>\n\n<p>I won’t try to write about the new features in C# 6 in this post as I am pretty sure you can find them on the Internet.  Though there is one that I like and it’s <a href=\"https://github.com/dotnet/roslyn/wiki/New-Language-Features-in-C%23-6\">New Language Features in C# 6</a>.  I hope this helps.</p>\n\n<p><strong>EDIT:</strong></p>\n\n<p>Microsoft Docs has a <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-6\">What’s new in C# 6</a> article which I think is where the above article is based on.  Also check out their <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history\">The history of C#</a> article to refresh yourself on the features added to previous versions of C#.  There is now also <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\">What’s new in C# 7.0</a> and <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7-1\">What’s new in C# 7.1</a>.</p>\n"
    } ,
  
    {
      "title"    : "Display Bootstrap’s Navbar Dropdown Menu On Hover",
      "category" : "web-design",
      "tags"     : "",
      "url"      : "/tech-blog/2015/11/19/display-bootstraps-navbar-dropdown-menu-on-hover.html",
      "date"     : "2015-11-19 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/csslogo.png\" alt=\"\" /></p>\n\n<p><a href=\"https://rodansotto.github.io/projects/css/BSNavbar_AutoDropdownOnHover.htm\">DEMO</a></p>\n\n<p>Using only 3 simple CSS rules, you can have your Bootstrap’s navbar menu dropdown display on hover seamlessly.  Below is the CSS code:</p>\n\n<div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">/* display dropdown menu on hover\n   only when navbar is not in mobile mode (hamburger menu mode) */</span>\n<span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"p\">:</span> <span class=\"m\">768px</span><span class=\"p\">)</span> \n<span class=\"p\">{</span>\n\t<span class=\"c\">/* display submenu on hover */</span>\n\t<span class=\"nc\">.dropdown</span><span class=\"nd\">:hover</span> <span class=\"nc\">.dropdown-menu</span> <span class=\"p\">{</span>\n\t\t<span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">block</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"c\">/* since submenu gets displayed too when dropdown menu is clicked \n\t\tand remains displayed until dropdown menu is clicked again,\n\t\twe need to hide submenu */</span>\n\t<span class=\"nc\">.open</span> <span class=\"o\">&gt;</span> <span class=\"nc\">.dropdown-menu</span> <span class=\"p\">{</span>\n\t\t<span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"c\">/* also dropdown menu is highlighted when clicked,\n\t\tso we need to unhighlight dropdown menu */</span>\n\t<span class=\"nc\">.navbar-default</span> <span class=\"nc\">.navbar-nav</span> <span class=\"o\">&gt;</span> <span class=\"nc\">.open</span> <span class=\"o\">&gt;</span> <span class=\"nt\">a</span><span class=\"o\">,</span> \n\t<span class=\"nc\">.navbar-default</span> <span class=\"nc\">.navbar-nav</span> <span class=\"o\">&gt;</span> <span class=\"nc\">.open</span> <span class=\"o\">&gt;</span> <span class=\"nt\">a</span><span class=\"nd\">:focus</span> <span class=\"p\">{</span>\n\t\t<span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">transparent</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n"
    } ,
  
    {
      "title"    : "How Many Ways Can You Add Entity Framework Model To Your Project?",
      "category" : "net",
      "tags"     : "",
      "url"      : "/tech-blog/2015/11/09/how-many-ways-can-you-add-entity-framework-model-to-your-project.html",
      "date"     : "2015-11-09 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/eflogo.png\" alt=\"\" /></p>\n\n<p>Let me count the ways.  3?  Well there are at least 3 ways you can add Entity Framework (EF) model to your .NET project, that I know of.  One is <strong>Code First</strong>, second is <strong>Reverse Engineer Code First</strong>, and third is the <strong>ADO.NET Entity Data Model (EDMX)</strong>.</p>\n\n<p><strong>Code First</strong>, as the name suggests, requires you to code your EF model.  Yep, this requires more coding but gives you  a lot more control.  Usually you go this route if you don’t have an existing database to model or you want to create a fresh new database for your project.  I have not tried this approach as mostly the projects I worked on already has existing database. </p>\n\n<p>In Code First, basically you create the classes that model your database,  optionally configure your classes using <a href=\"https://msdn.microsoft.com/en-ca/data/jj591583\">Data Annotations</a> (via class / property attributes) and/or <a href=\"https://msdn.microsoft.com/en-ca/data/jj591617.aspx\">Fluent API</a>, and then create the database based on that model.  When you update the model, you can use <a href=\"https://msdn.microsoft.com/en-us/data/jj591621.aspx\">Code First Migrations</a> to update the database.  Microsoft’s <a href=\"https://msdn.microsoft.com/en-ca/data/jj193542.aspx\">Code First to a New Database</a> has a video and a step-by-step walkthrough on how to go about this approach.</p>\n\n<p><strong>Reverse Engineer Code First</strong> uses EF Power Tools to generate the code for you containing the <a href=\"https://msdn.microsoft.com/en-ca/data/jj729737.aspx\">DbContext</a> class, <a href=\"https://en.wikipedia.org/wiki/Plain_Old_CLR_Object\">POCO</a> classes, and Code First mapping classes, based on an existing database.  <a href=\"https://msdn.microsoft.com/en-us/data/jj593170.aspx\">EF Power Tools Summary of Commands</a> shows you a step-by-step walkthrough on how to do this plus some more, including customizing the default reverse engineer <a href=\"https://msdn.microsoft.com/en-ca/library/bb126445(v=vs.110).aspx\">T4 templates</a> and generating pre-compiled views to improve start-up performance. </p>\n\n<p>If you need to edit the t4 templates, I suggest getting a t4 editor such as <a href=\"https://visualstudiogallery.msdn.microsoft.com/b0e2dde6-5408-42c2-bc92-ac36942bbee9\">tangible T4 Editor</a> from the Visual Studio Gallery so you can get syntax highlighting at least.  When it comes to tweaking performance, <a href=\"https://msdn.microsoft.com/en-us/data/hh949853\">Performance Considerations for Entity Framework 4, 5, and 6</a> has some tips.  One way is to generate pre-compiled views.  <a href=\"https://msdn.microsoft.com/en-us/data/dn469601.aspx\">Pre-Generated Mapping Views</a> shows you how to do this using EF Power Tools and also via APIs provided in EF6 onwards.  <a href=\"https://msdn.microsoft.com/en-us/library/vstudio/bb896240(v=vs.100).aspx\">How to: Pre-Generate Views to Improve Query Performance</a> shows you how to generate pre-compiled views using EDM generator command line tool.</p>\n\n<p>Code First and Reverse Engineer Code First does not automatically generate an <strong>ADO.NET Entity Data Model (EDMX)</strong> file.  Same goes too for EDMX, it does not automatically generate any code.  To generate the code you get from Code First in EDMX, you need to add a code generation item, basically download a t4 template and generate the code based on it.  <a href=\"https://msdn.microsoft.com/en-us/data/jj206878.aspx\">Database First</a> shows you how to create an EDMX from an existing database, view and edit it in EF Designer and generate the code.  <a href=\"https://msdn.microsoft.com/en-us/library/vstudio/cc716703(v=vs.100).aspx\">How to: Create a New .edmx File (Entity Data Model Tools)</a> has a section on adding EDMX from an existing database and contains tons of links to more information, definitely a good resource.</p>\n\n<p>It can get confusing what these code first and database first mean.  It all lies down to how you synchronize your model changes between the database and code or more accurately where you make your model changes, is it in code or database?  Although in reverse engineer code first, you can change your model in the database, and re-generate the code, essentially doing a database first.</p>\n\n"
    } ,
  
    {
      "title"    : "Ways Developer Can Secure An ASP.NET Application, Part 1",
      "category" : "asp-net",
      "tags"     : "",
      "url"      : "/tech-blog/2015/11/02/ways-developer-can-secure-an-asp-net-application-part-1.html",
      "date"     : "2015-11-02 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/secureaspnetlogo.png\" alt=\"\" /></p>\n\n<ul>\n  <li>Don’t turn off request validation unless you need to.  <a href=\"https://msdn.microsoft.com/en-us/library/hh882339(v=vs.110).aspx\">Request Validation in ASP.NET</a> explains what this feature does, how to disable it if you must in Web Forms, MVC, and Web Pages and how to manually validate request in absence of it.</li>\n  <li>To mitigate <a href=\"https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)\">Cross-Site Scripting (XSS)</a> attack, encode any input that you output via <a href=\"https://msdn.microsoft.com/en-us/library/1463ysyw(v=vs.110).aspx\">Response.Write()</a>, <a href=\"https://msdn.microsoft.com/en-us/library/ms178135(v=vs.100).aspx\">embedded code block &lt;%= %&gt;</a> or by setting a property on a control that produces text within a page,  using <a href=\"https://msdn.microsoft.com/en-us/library/73z22y6h(v=vs.110).aspx\">HttpUtility.HtmlEncode()</a>  or <a href=\"https://msdn.microsoft.com/en-us/library/4fkewx0t(v=vs.110).aspx\">HttpUtility.UrlEncode()</a>.  <a href=\"https://msdn.microsoft.com/en-us/library/system.web.httputility_methods(v=vs.110).aspx\">HttpUtility Methods</a> contains all the encoding and decoding methods for html, html attribute, javascript, query string, and url.</li>\n  <li>There is a new embedded code block syntax in ASP.NET 4 that automatically HTML encode output, the <a href=\"http://weblogs.asp.net/scottgu/new-lt-gt-syntax-for-html-encoding-output-in-asp-net-4-and-asp-net-mvc-2\">&lt;%: %&gt;</a>.</li>\n  <li>Use <a href=\"https://wpl.codeplex.com/\">Microsoft AntiXSS Library</a> which extends the built-in encoding methods, provides extra output types like XML, and uses a white-listing approach that defines a list of valid characters (as opposed to the standard .NET framework encoding’s black-listing approach that defines a list of invalid characters).  If using .NET 4.x, a version of AntiXSS is already included under <a href=\"https://msdn.microsoft.com/en-us/library/system.web.security.antixss(v=vs.110).aspx\">System.Web.Security.AntiXss Namespace</a>.  You can have the .NET framework use the AntiXSS library by default by registering it via web.config in <a href=\"https://msdn.microsoft.com/en-us/library/e1f13641(v=vs.100).aspx\">system.web/httpRuntime, attribute encoderType</a>.  See remarks in <a href=\"https://msdn.microsoft.com/en-us/library/system.web.security.antixss.antixssencoder(v=vs.110).aspx\">AntiXssEncoder</a> on how to do this.</li>\n  <li>Beginning in .NET 5, a white list based encoder will be the only encoder.</li>\n  <li>If you must output certain black listed HTML elements in the input, good practice is to first encode the whole input and then selectively decode those that you wish to output as is.</li>\n  <li>Use <a href=\"https://www.owasp.org/index.php/HttpOnly#Using_.NET_to_Set_HttpOnly\">HttpOnly</a> to protect cookies from being read by client-side scripts, thus prevents being stolen by an XSS attack.  You can set it via web.config in <a href=\"https://msdn.microsoft.com/en-us/library/vstudio/ms228262(v=vs.100).aspx\">system.web/httpCookies element</a> or programmatically using <a href=\"https://msdn.microsoft.com/en-us/library/system.web.httpcookie.httponly(v=vs.110).aspx\">HttpCookie.HttpOnly</a>.</li>\n  <li>See <a href=\"http://www.troyhunt.com/2010/05/owasp-top-10-for-net-developers-part-2.html\">OWASP Top 10 for .NET developers part 2: Cross-Site Scripting (XSS)</a>.</li>\n  <li>Avoid using direct object references such as filenames and database record IDs in your query string, a vulnerability called <a href=\"https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References\">Insecure Direct Object Reference</a>.  Use another key, index, map or indirect method such as GUID for example.  If it must be used, make sure user is authorized first.</li>\n  <li>See <a href=\"http://www.troyhunt.com/2010/09/owasp-top-10-for-net-developers-part-4.html\">OWASP Top 10 for .NET developers part 4: Insecure direct object reference</a>.</li>\n  <li>Never put sensitive information on hidden form fields.</li>\n  <li>Never use the <a href=\"https://msdn.microsoft.com/en-us/library/system.web.httprequest.item(v=vs.110).aspx\">Request indexer</a> to access input by name.  Be specific when looking for input by using <a href=\"https://msdn.microsoft.com/en-us/library/system.web.httprequest.querystring(v=vs.110).aspx\">Request.QueryString</a>, <a href=\"https://msdn.microsoft.com/en-us/library/system.web.httprequest.form(v=vs.110).aspx\">Request.Form</a>, <a href=\"https://msdn.microsoft.com/en-us/library/system.web.httprequest.cookies(v=vs.110).aspx\">Request.Cookies</a> and <a href=\"https://msdn.microsoft.com/en-us/library/system.web.httprequest.servervariables(v=vs.110).aspx\">Request.ServerVariables</a> collections.</li>\n  <li>Never change state via a GET request and always check the Request type using <a href=\"https://msdn.microsoft.com/en-us/library/system.web.httprequest.httpmethod(v=vs.110).aspx\">HttpRequest.HttpMethod</a>.</li>\n  <li>To mitigate <a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\">Cross-Site Request Forgery (CSRF)</a> attack, one method is to add a token to every form, which is verified when the form is submitted.  This process can be automated by implementing an <a href=\"https://msdn.microsoft.com/en-us/library/bb398986(v=vs.100).aspx\">HTTP module</a>.  <a href=\"https://anticsrf.codeplex.com/\">AntiCSRF - A Cross Site Request Forgery (CSRF) module for ASP.NET</a> is a good example of this.</li>\n  <li>Do not disable <a href=\"https://msdn.microsoft.com/en-us/library/system.web.ui.page.enableeventvalidation(v=vs.110).aspx\">Event Validation</a> as they prevent the falsification of events.</li>\n  <li>Do not rely on the <a href=\"http://www.w3.org/Protocols/HTTP/HTRQ_Headers.html\">Request Headers</a> as they can be easily faked, most notably the <a href=\"http://www.w3.org/Protocols/HTTP/HTRQ_Headers.html#z14\">Referer</a> Header.</li>\n  <li>Do not disable <a href=\"https://msdn.microsoft.com/en-CA/library/e1f13641(v=vs.100).aspx\">system.web/httpRuntime, attribute enableHeaderChecking</a> in web.config or in code using <a href=\"https://msdn.microsoft.com/en-us/library/system.web.configuration.httpruntimesection.enableheaderchecking(v=vs.110).aspx\">HttpRuntimeSection.EnableHeaderChecking Property</a>.</li>\n</ul>\n\n"
    } ,
  
    {
      "title"    : "A Custom WebGrid (My 1st Iteration)",
      "category" : "asp-net-mvc",
      "tags"     : "",
      "url"      : "/tech-blog/2015/10/19/a-custom-webgrid-my-1st-iteration.html",
      "date"     : "2015-10-19 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/myprojects.png\" alt=\"\" /></p>\n\n<table>\n  <tbody>\n    <tr>\n      <td>[DEMO (unavailable)](#)</td>\n      <td>[CODE](https://github.com/rodansotto/webgriddemo-aspnetmvc4)</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>To display tabular data in ASP.NET MVC (I’m using MVC 4 at the time), I used the web helper <a href=\"https://msdn.microsoft.com/en-us/library/system.web.helpers.webgrid(v=vs.111).aspx\">WebGrid</a>.  It has sorting and paging but no filtering.  Also sorting and paging is only client-side and not server-side, meaning all the data is requested from the server and sorted and paged on the client.  Because of these limitations I had to customize WebGrid and this demo is my first iteration.</p>\n\n<p>Here in this demo I used Entity Framework to get my data access layer going.  I used the Adventure Works 2008R2 SQL database, the light version.  Here I am displaying the Products table.  To get my UI going, I used the default template that comes with Visual Studio 2010 and it uses jQuery UI.  My second iteration of this custom WebGrid will be using Bootstrap and is still in the works, just FYI.</p>\n\n<p>If you find that you cannot reference WebGrid in your view, there is a chance that System.Web.Helpers is not added to your References.  Add that and set Copy Local to True.  Search Google if you are having problems with this.</p>\n\n<p>You can copy and paste the <a href=\"https://github.com/rodansotto/webgriddemo-aspnetmvc4\">code</a> into your own project but you have to change the column names in the WebGrid, add these same columns to sort on in the controller, and change the fields you want to filter on in both view and controller.  Also, you can change the default page size in the FilterSortPageInfo class.  Oh by the way, this is a read-only WebGrid and there is no edit or add functionality.  Cheers!</p>\n\n"
    } ,
  
    {
      "title"    : "Nested Transactions in SQL Server",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2015/09/15/nested-transactions-in-sql-server.html",
      "date"     : "2015-09-15 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/sqllogo1.png\" alt=\"\" /></p>\n\n<p>If you have a stored proc that executes a bunch of SQL statements inside a transaction because they are all meant to be executed as one atomic transaction and needs to be executed as quick as possible to avoid blocking too long others who want to call this stored proc, then you need to make sure this stored proc is not nested in another transaction.  Because nested transactions in SQL server is different than the nesting concept that you might have been accustomed to in a programming language, say in C#.</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- Say for example you need to write to a field in a table</span>\n<span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"p\">[</span><span class=\"n\">dbo</span><span class=\"p\">].[</span><span class=\"n\">TestTable</span><span class=\"p\">](</span>\n\t<span class=\"p\">[</span><span class=\"n\">TestField1</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"nb\">nchar</span><span class=\"p\">](</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"k\">NULL</span>\n<span class=\"p\">)</span> <span class=\"k\">ON</span> <span class=\"p\">[</span><span class=\"k\">PRIMARY</span><span class=\"p\">]</span>\n<span class=\"k\">GO</span>\n\n<span class=\"c1\">-- And it needs to be in a transaction, so you created a stored proc below</span>\n<span class=\"k\">CREATE</span> <span class=\"k\">PROCEDURE</span> <span class=\"p\">[</span><span class=\"n\">dbo</span><span class=\"p\">].[</span><span class=\"n\">usp_TestInnerTrans</span><span class=\"p\">]</span> \n<span class=\"k\">AS</span>\n<span class=\"k\">BEGIN</span>\n\t<span class=\"k\">BEGIN</span> <span class=\"n\">TRANSACTION</span>\n\t\t<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"p\">[</span><span class=\"n\">dbo</span><span class=\"p\">].[</span><span class=\"n\">TestTable</span><span class=\"p\">]</span> <span class=\"p\">([</span><span class=\"n\">TestField1</span><span class=\"p\">])</span> <span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"s1\">'Value1'</span><span class=\"p\">)</span>\n\t<span class=\"k\">COMMIT</span> <span class=\"n\">TRANSACTION</span>\n<span class=\"k\">END</span>\n<span class=\"k\">GO</span>\n\n<span class=\"c1\">-- When you call this stored proc directly, say using EXEC, </span>\n<span class=\"c1\">-- you can get at most a 1 sec exec time</span>\n\n<span class=\"c1\">-- Now what if you have another stored proc that calls usp_TestInnerTrans </span>\n<span class=\"c1\">-- nested inside another transaction</span>\n\n<span class=\"c1\">-- Below is that other stored proc and let's say it takes 10 secs to finish </span>\n<span class=\"c1\">-- and commit the outer transaction</span>\n<span class=\"k\">CREATE</span> <span class=\"k\">PROCEDURE</span> <span class=\"p\">[</span><span class=\"n\">dbo</span><span class=\"p\">].[</span><span class=\"n\">usp_TestOuterTrans</span><span class=\"p\">]</span> \n<span class=\"k\">AS</span>\n<span class=\"k\">BEGIN</span>\n\t<span class=\"k\">BEGIN</span> <span class=\"n\">TRANSACTION</span>\n\t<span class=\"k\">EXEC</span> <span class=\"n\">usp_TestInnerTrans</span>\n\t<span class=\"n\">WAITFOR</span> <span class=\"n\">DELAY</span> <span class=\"s1\">'00:00:10'</span>\n\t<span class=\"k\">COMMIT</span> <span class=\"n\">TRANSACTION</span>\n<span class=\"k\">END</span>\n<span class=\"k\">GO</span>\n\n<span class=\"c1\">-- What happens is that any other process that calls usp_TestInnerTrans </span>\n<span class=\"c1\">-- will block and will wait until usp_TestOuterTrans finishes, </span>\n<span class=\"c1\">-- which is 10 secs and not 1 sec.</span>\n</code></pre></div></div>\n\n<p>As you can see inner transactions are ignored and the outermost transaction becomes the only one true transaction.  <a href=\"https://technet.microsoft.com/en-us/library/jj856598(v=sql.110).aspx#Advanced\">SQL Server Transaction Locking and Row Versioning Guide</a> has a section on nested transactions that explains it better.  It’s a great article so I recommend reading it from start to finish.</p>\n\n"
    } ,
  
    {
      "title"    : "C#: Using or not using",
      "category" : "c-sharp",
      "tags"     : "",
      "url"      : "/tech-blog/2015/09/11/cs-using-or-not-using3.html",
      "date"     : "2015-09-11 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/csbloglogo21.png\" alt=\"\" /></p>\n\n<p>I am not referring to the <strong>using</strong> directive to import types defined in other namespaces, but I am referring to the <strong>using</strong> statement to define a scope where at the end of it an object will be disposed, such as this:</p>\n\n<div class=\"language-cs highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">using</span> <span class=\"p\">(</span><span class=\"kt\">var</span> <span class=\"n\">cn</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">SqlConnection</span><span class=\"p\">())</span> <span class=\"p\">{</span> <span class=\"c1\">// your code here... } </span>\n</code></pre></div></div>\n\n<p> </p>\n\n<p>Just be aware that the <strong>using</strong> statement is just a shortcut or a convenient syntax for the below code:</p>\n\n<div class=\"language-cs highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">var</span> <span class=\"n\">cn</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">SqlConnection</span><span class=\"p\">();</span> <span class=\"k\">try</span> <span class=\"p\">{</span> <span class=\"c1\">// your code here... } finally { if (cn != null) ((IDisposable)cn).Dispose(); } </span>\n</code></pre></div></div>\n\n<p> </p>\n\n<p>And if you have a <strong>try</strong>-<strong>catch</strong> block in your method, either outside or inside the <strong>using</strong> statement, or maybe even both, then you need to make sure the flow of control and the logic when an exception occurs is what you would expect, because nested <strong>try</strong>-<strong>catch</strong> block can become confusing.  Just remember the <strong>using</strong> statement is a <strong>try</strong>-<strong>finally</strong> block.</p>\n\n<p>My point is, don’t haphazardly use <strong>using</strong> statement especially if you are using it for several objects in your method, because depending on what you are trying to achieve, sometimes its better to just use a complete <strong>try</strong>-<strong>catch</strong>-<strong>finally</strong> block to make your code simpler to understand.</p>\n\n<p><strong>EDIT:</strong></p>\n\n<p>Rule of thumb is if the resource object you are trying to use in your method needs to be disposed of by your method then <strong>using</strong> statement is best.  And make sure you are instantiating the resource object inside the <strong>using</strong> statement and not outside and passing the variable to it.  See <a href=\"https://msdn.microsoft.com/en-us/library/yh598w02(v=vs.100).aspx\">using Statement (C# Reference)</a>.</p>\n"
    } ,
  
    {
      "title"    : "Calling .Net Assembly from VBA",
      "category" : "netms-access",
      "tags"     : "",
      "url"      : "/tech-blog/2015/08/11/calling-net-assembly-from-vba.html",
      "date"     : "2015-08-11 00:00:00 +0000",
      "content": "<p><img src=\"/tech-blog/assets/images/vbalogo.png\" alt=\"\" /></p>\n\n<p>Stuck in VBA?  You don’t have to be.  You can move all your business logic code from VBA to a .Net assembly.  It’s easier than you might think and this post will show you how.</p>\n\n<p>First you need to create a new <em>Class Library</em> project and below is the basic structure of a <em>COM-callable wrapper</em> for your .Net assembly.</p>\n\n<div class=\"language-cs highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// need this so we can decorate our classes with ClassInterface </span>\n<span class=\"c1\">// and ComVisible attributes using System.Runtime.InteropServices;</span>\n\n<span class=\"c1\">// namespace should be the same as assembly name </span>\n<span class=\"c1\">// so when VBA calls it via New or CreateObject() it will use same reference name </span>\n<span class=\"c1\">// and prog ID </span>\n<span class=\"c1\">// ie. New YourNetAssembly.TestFunc or CreateObject(\"YourNetAssembly.TestFunc\") </span>\n<span class=\"k\">namespace</span> <span class=\"nn\">YourNetAssembly</span> \n<span class=\"p\">{</span> \n  <span class=\"c1\">// need to decorate class with following attributes </span>\n  <span class=\"c1\">// so we can access its members using intellisense in VBA editor </span>\n  <span class=\"p\">[</span><span class=\"nf\">ClassInterface</span><span class=\"p\">(</span><span class=\"n\">ClassInterfaceType</span><span class=\"p\">.</span><span class=\"n\">AutoDual</span><span class=\"p\">),</span> <span class=\"nf\">ComVisible</span><span class=\"p\">(</span><span class=\"k\">true</span><span class=\"p\">)]</span>\n  <span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">TestFunc</span> \n  <span class=\"p\">{</span> \n    <span class=\"k\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">num1</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">num2</span><span class=\"p\">)</span> \n    <span class=\"p\">{</span> \n      <span class=\"k\">return</span> <span class=\"n\">num1</span> <span class=\"p\">+</span> <span class=\"n\">num2</span><span class=\"p\">;</span> \n    <span class=\"p\">}</span> \n  <span class=\"p\">}</span> \n<span class=\"p\">}</span> \n</code></pre></div></div>\n\n<p> </p>\n\n<p>And when you are ready to compile or build, the next thing you need to do is check the <em>Make assembly COM-Visible</em> in your project’s <em>Properties –&gt; Application –&gt; Assembly Information…</em>.</p>\n\n<p>Now if you are developing your VBA application (be it MS Access or MS Excel) locally or on the same computer where you build your .Net assembly, you can have Visual Studio register your COM automatically by checking the <em>Register for COM interop</em> in your project’s <em>Properties –&gt; Build</em>.</p>\n\n<p>But if you are developing your VBA application remotely or on a different computer, then you will need to copy your .Net assembly to that computer and manually register it using <em>regasm.exe</em>.  You might want to create a batch file containing the following command so you don’t have to type it every time.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">c:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\regasm.exe YourNetAssembly.dll /codebase /tlb</code></p>\n\n<p>Note the correct .Net Framework version that your .Net assembly is created in.  Each version of the .Net Framework will have its own folder.  Also this command is run from the VBA application folder where the .Net assembly resides.  Yours might have a different setup so take note.</p>\n\n<p><em>/codebase</em> option adds the .Net assembly’s path on the disk to the Windows registry.  <em>/tlb</em> option generates the type library and saves it on the same folder as your .Net assembly.</p>\n\n<p>Note that you need administrator privileges on the computer to generate a type library, be it via Visual Studio or regasm.exe.  If you already have an administrator privilege, you need to open Visual Studio or the command prompt as admin by right-clicking and selecting <em>Run as administrator</em>.</p>\n\n<p>Once registered, you then add a reference to it from your VBA application.  From the VBA editor, go to <em>Tools –&gt; References…</em> and look for your .Net assembly in the list of <em>Available References</em>.  Its name should be the assembly name.  You can check the assembly name in your project’s <em>Properties –&gt; Application</em> under <em>Assembly name</em>.  Once added, you can now start calling your .Net assembly from VBA.</p>\n\n<p>There are two ways you might want to call your .Net assembly.  Using the <em>New</em> keyword, or using <em>CreateObject()</em>.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Dim objTestFunc As New YourNetAssembly.TestFunc \n' OR ... Dim objTestFunc As Object Set objTestFunc = CreateObject(\"YourNetAssembly.TestFunc\")\n\nDim intResult As Integer intResult = objTestFunc.Add(1, 2) MsgBox intResult \n</code></pre></div></div>\n\n<p> </p>\n\n<p>Great, but how about debugging or stepping into the .Net assembly?  Well if you have both Visual Studio and VBA development environments on one machine, then it would be easier.  You just set a breakpoint inside your .Net assembly in Visual Studio.  Then in your project’s <em>Properties –&gt; Debug</em>, enter the full pathname to the program that runs your VBA application (maybe MS Access or MS Excel) in <em>Start external program</em>.  Then in the <em>Command line arguments</em>, enter the full pathname to your VBA application.  Save changes then press F5 to run.  This will run MS Access or MS Excel (whichever one you are using) which in turn runs your VBA application.  When your VBA application calls your .Net assembly, it will break into the Visual Studio debugging environment.</p>\n\n<p>What about if your VBA development environment is on a different machine?  Well hope is not lost yet.  Assuming you have a debugger program installed on that machine, you can place a <em>Debug.Assert(false);</em> or <em>Debugger.Break();</em> in your .Net assembly and this will force it to go into debugging mode when it hits that code and open the debugger program.  Be sure to copy the PDB (debug) file for your .Net assembly plus the source code so you can step through .Net code.</p>\n\n<div class=\"language-cs highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">num1</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">num2</span><span class=\"p\">)</span> \n<span class=\"p\">{</span> \n  <span class=\"n\">System</span><span class=\"p\">.</span><span class=\"n\">Diagnostics</span><span class=\"p\">.</span><span class=\"n\">Debugger</span><span class=\"p\">.</span><span class=\"nf\">Break</span><span class=\"p\">();</span> \n  <span class=\"c1\">// OR ... System.Diagnostics.Debug.Assert(false);</span>\n\n  <span class=\"c1\">// if Debugger.Break() does not work properly i.e. it does not return back </span>\n  <span class=\"c1\">// to the VBA application after debugging, </span>\n  <span class=\"c1\">// then use Debug.Assert(false) instead</span>\n\n  <span class=\"k\">return</span> <span class=\"n\">num1</span> <span class=\"p\">+</span> <span class=\"n\">num2</span><span class=\"p\">;</span> \n<span class=\"p\">}</span> \n</code></pre></div></div>\n\n<p> </p>\n\n<p>So that’s all there is to it.  Easy eh?  So start coding away then!</p>\n\n<p><strong>EDIT:</strong></p>\n\n<p>Actually you don’t need to check the <em>Make assembly COM-Visible</em> in your project’s <em>Properties –&gt; Application –&gt; Assembly Information…</em>. unless you want to expose all your public classes in the assembly.  And besides since you still need to decorate your public classes with COM attributes, might as well just use COM attributes to select only those ones you want to be COM-visible.</p>\n\n<p>I found this great article that summarizes what you need to do: <a href=\"http://www.codeproject.com/Articles/612604/Best-Practice-in-Writing-a-COM-Visible-Assembly-Cs\">Best Practice in Writing a COM-Visible Assembly (C#)</a>.  I didn’t bother adding the <em>ProgId</em> attribute to my COM-visible classes though, but the rest I did.  Plus I created an interface for each, as was suggested in the article.  Nice thing having an interface is you can control which methods in your COM-visible classes you want to expose, giving you a more granular level of control.</p>\n\n"
    } ,
  
    {
      "title"    : "Why I Chose C# Over VB.NET?",
      "category" : "c-sharp",
      "tags"     : "",
      "url"      : "/tech-blog/2015/03/13/why-i-chose-c-over-vb-net.html",
      "date"     : "2015-03-13 00:00:00 +0000",
      "content": "<p>It’s a no brainer really.  So I can easily switch between the programming languages that are widely used now in web (i.e. <strong>JavaScript</strong>) and mobile applications (i.e. <strong>Java</strong> and <strong>Objective-C</strong>) and in the future (i.e. <strong>TypeScript</strong> and <strong>Dart</strong>).  Note that this is coming from someone who develops in the Microsoft stack.</p>\n\n<p>I don’t know about you, but whenever I switch between <strong>C#</strong> and <strong>VB.NET</strong> (at one point I was maintaining desktop applications written in both languages), I always get hit by a brick wall when I go over a VB.NET code, it’s like my fingers are all numb?  I guess if you are working on desktop applications only, it does not matter which language you use.  But nowadays, developer needs to be versatile and be able to work on web applications too, and if you’re lucky enough, on mobile applications as well.</p>\n\n<p>And you know what?  New languages are being created based on the  <strong>C</strong> programming language, which is where C# is based from by the way.  You might have known about the new language developed by Microsoft, the <strong><a href=\"http://www.typescriptlang.org/\">TypeScript</a></strong>.  And there is <strong><a href=\"https://www.dartlang.org/\">Dart</a></strong> from Google as well.</p>\n\n<p>So I say, you wouldn’t go wrong if you go the C# way.  And that’s why I now prefer C# over VB.NET.</p>\n"
    } ,
  
    {
      "title"    : "C#: What’s with Enums anyways?",
      "category" : "c-sharp",
      "tags"     : "",
      "url"      : "/tech-blog/2015/02/27/c-whats-with-enums-anyways.html",
      "date"     : "2015-02-27 00:00:00 +0000",
      "content": "<p><img src=\"https://rodansotto.files.wordpress.com/2015/02/csnow1.jpg?w=300\" alt=\"c#snow1\" />Well, I’ll tell you.  You can define your own strings with Enums using <strong>reflection</strong>.  You can also use the <strong>type-safe-enum pattern</strong> if reflection seems slow to you.  And do you know you can use Enums to represent <strong>bit flags</strong>?</p>\n\n<p><a href=\"http://www.yumeidearmas.com/2015/02/26/associating-enums-with-strings-in-c/\">Associating Enums with strings in C#</a> shows you how to define your own strings with Enums using reflection.  For type-safe-enum pattern implementation, check it out <a href=\"http://stackoverflow.com/questions/424366/c-sharp-string-enums\">here</a>.  <a href=\"http://www.codeducky.org/ins-outs-c-enums/\">The ins and outs of C# enums</a> shows you how to use Enums to represent bit flags.</p>\n"
    } ,
  
    {
      "title"    : "Web Design: A Text Animation Exercise and More",
      "category" : "web-design",
      "tags"     : "",
      "url"      : "/tech-blog/2015/02/09/web-design-a-text-animation-exercise-and-more.html",
      "date"     : "2015-02-09 00:00:00 +0000",
      "content": "<p>With CSS3 transitions you can animate text as well as other elements in your web page without any JavaScript.  See my demo at <a href=\"https://rodansotto.github.io/projects/css/TransitionIAmTitanium.html\" title=\"https://rodansotto.github.io/projects/css/TransitionIAmTitanium.html\">https://rodansotto.github.io/projects/css/TransitionIAmTitanium.html</a> (<em>just move mouse to center box to animate text and outside box to return to original state</em>).  In there I am also using a custom web font using CSS3 rule @font-face, HSL (or HSLA) to define color rather than using hex or RGB, text shadow, box shadow, radial gradient, repeating linear gradient, and viewport width and height to dynamically size my text and the other elements in the page.  Most of these CSS3 features may not be implemented yet in some browser versions but I tested this in Chrome and IE 11 and it works.  Below is the CSS code:</p>\n\n<div class=\"language-cs highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* see https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face using web font from fontspring.com for more free web fonts, go to http://www.fontsquirrel.com/ */</span>\n<span class=\"n\">@font</span><span class=\"p\">-</span><span class=\"n\">face</span> <span class=\"p\">{</span>\n  <span class=\"n\">font</span><span class=\"p\">-</span><span class=\"n\">family</span><span class=\"p\">:</span> <span class=\"s\">\"linottesemibold\"</span><span class=\"p\">;</span>\n  <span class=\"n\">src</span><span class=\"p\">:</span> <span class=\"nf\">url</span><span class=\"p\">(</span><span class=\"s\">\"./fonts/Linotte-SemiBold-webfont.eot\"</span><span class=\"p\">);</span>\n  <span class=\"n\">src</span><span class=\"p\">:</span> <span class=\"nf\">url</span><span class=\"p\">(</span><span class=\"s\">\"./fonts/Linotte-SemiBold-webfont.eot?#iefix\"</span><span class=\"p\">)</span>\n      <span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"s\">\"embedded-opentype\"</span><span class=\"p\">),</span>\n    <span class=\"nf\">url</span><span class=\"p\">(</span><span class=\"s\">\"./fonts/Linotte-SemiBold-webfont.woff2\"</span><span class=\"p\">)</span> <span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"s\">\"woff2\"</span><span class=\"p\">),</span>\n    <span class=\"nf\">url</span><span class=\"p\">(</span><span class=\"s\">\"./fonts/Linotte-SemiBold-webfont.woff\"</span><span class=\"p\">)</span> <span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"s\">\"woff\"</span><span class=\"p\">),</span>\n    <span class=\"nf\">url</span><span class=\"p\">(</span><span class=\"s\">\"./fonts/Linotte-SemiBold-webfont.ttf\"</span><span class=\"p\">)</span> <span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"s\">\"truetype\"</span><span class=\"p\">),</span>\n    <span class=\"nf\">url</span><span class=\"p\">(</span><span class=\"s\">\"./fonts/Linotte-SemiBold-webfont.svg#linottesemibold\"</span><span class=\"p\">)</span> <span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"s\">\"svg\"</span><span class=\"p\">);</span>\n  <span class=\"n\">font</span><span class=\"p\">-</span><span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"n\">normal</span><span class=\"p\">;</span>\n  <span class=\"n\">font</span><span class=\"p\">-</span><span class=\"n\">style</span><span class=\"p\">:</span> <span class=\"n\">normal</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">body</span> <span class=\"p\">{</span>\n  <span class=\"cm\">/* fallback for browsers not supporting radial-gradient, like IE 9 and below */</span>\n  <span class=\"n\">background</span><span class=\"p\">-</span><span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nf\">hsl</span><span class=\"p\">(</span>\n    <span class=\"m\">210</span><span class=\"p\">,</span>\n    <span class=\"m\">30</span><span class=\"p\">%,</span>\n    <span class=\"m\">90</span><span class=\"p\">%</span>\n  <span class=\"p\">);</span> <span class=\"cm\">/* see https://developer.mozilla.org/en-US/docs/Web/CSS/radial-gradient */</span>\n  <span class=\"n\">background</span><span class=\"p\">:</span> <span class=\"n\">radial</span><span class=\"p\">-</span><span class=\"nf\">gradient</span><span class=\"p\">(</span>\n    <span class=\"n\">ellipse</span> <span class=\"n\">farthest</span><span class=\"p\">-</span><span class=\"n\">corner</span><span class=\"p\">,</span>\n    <span class=\"n\">white</span> <span class=\"m\">70</span><span class=\"p\">%,</span>\n    <span class=\"nf\">hsl</span><span class=\"p\">(</span><span class=\"m\">210</span><span class=\"p\">,</span> <span class=\"m\">30</span><span class=\"p\">%,</span> <span class=\"m\">80</span><span class=\"p\">%)</span> <span class=\"m\">100</span><span class=\"p\">%</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"n\">container</span> <span class=\"p\">{</span>\n  <span class=\"cm\">/* using viewport width vw and height vh, see https://developer.mozilla.org/en/docs/Web/CSS/length */</span> <span class=\"cm\">/* with IE 9 and probably below too, they seem to have a much larger viewport width and height */</span>\n  <span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"m\">90</span><span class=\"n\">vw</span><span class=\"p\">;</span>\n  <span class=\"n\">margin</span><span class=\"p\">-</span><span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"m\">5</span><span class=\"n\">vw</span><span class=\"p\">;</span>\n  <span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"m\">84</span><span class=\"n\">vh</span><span class=\"p\">;</span>\n  <span class=\"n\">margin</span><span class=\"p\">-</span><span class=\"n\">top</span><span class=\"p\">:</span> <span class=\"m\">8</span><span class=\"n\">vh</span><span class=\"p\">;</span> <span class=\"cm\">/* fallback for browsers not supporting linear-gradient or repeating-linear-gradient, like IE 9 and below */</span>\n  <span class=\"n\">background</span><span class=\"p\">-</span><span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nf\">hsl</span><span class=\"p\">(</span>\n    <span class=\"m\">0</span><span class=\"p\">,</span>\n    <span class=\"m\">0</span><span class=\"p\">%,</span>\n    <span class=\"m\">62.5</span><span class=\"p\">%</span>\n  <span class=\"p\">);</span> <span class=\"cm\">/* see https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient */</span>\n  <span class=\"n\">background</span><span class=\"p\">:</span> <span class=\"n\">linear</span><span class=\"p\">-</span><span class=\"nf\">gradient</span><span class=\"p\">(</span>\n    <span class=\"m\">135d</span><span class=\"n\">eg</span><span class=\"p\">,</span>\n    <span class=\"nf\">hsl</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"m\">0</span><span class=\"p\">%,</span> <span class=\"m\">25</span><span class=\"p\">%),</span>\n    <span class=\"n\">white</span> <span class=\"m\">50</span><span class=\"p\">%,</span>\n    <span class=\"nf\">hsl</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"m\">0</span><span class=\"p\">%,</span> <span class=\"m\">25</span><span class=\"p\">%)</span>\n  <span class=\"p\">);</span> <span class=\"cm\">/* see https://developer.mozilla.org/en-US/docs/Web/CSS/repeating-linear-gradient */</span>\n  <span class=\"n\">background</span><span class=\"p\">:</span> <span class=\"n\">repeating</span><span class=\"p\">-</span><span class=\"n\">linear</span><span class=\"p\">-</span><span class=\"nf\">gradient</span><span class=\"p\">(</span>\n    <span class=\"n\">to</span> <span class=\"n\">right</span><span class=\"p\">,</span>\n    <span class=\"nf\">hsl</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"m\">0</span><span class=\"p\">%,</span> <span class=\"m\">25</span><span class=\"p\">%)</span> <span class=\"m\">0</span><span class=\"p\">%,</span>\n    <span class=\"n\">white</span> <span class=\"m\">10</span><span class=\"p\">%,</span>\n    <span class=\"nf\">hsl</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"m\">0</span><span class=\"p\">%,</span> <span class=\"m\">25</span><span class=\"p\">%)</span> <span class=\"m\">20</span><span class=\"p\">%</span>\n  <span class=\"p\">);</span>\n  <span class=\"n\">border</span><span class=\"p\">-</span><span class=\"n\">radius</span><span class=\"p\">:</span> <span class=\"m\">2</span><span class=\"n\">vw</span><span class=\"p\">;</span>\n\n  <span class=\"cm\">/* see https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow */</span>\n  <span class=\"n\">box</span><span class=\"p\">-</span><span class=\"n\">shadow</span><span class=\"p\">:</span> <span class=\"m\">2</span><span class=\"n\">vw</span> <span class=\"m\">2</span><span class=\"n\">vh</span> <span class=\"m\">5</span><span class=\"n\">vw</span> <span class=\"m\">0</span><span class=\"n\">vw</span> <span class=\"n\">black</span><span class=\"p\">;</span> <span class=\"cm\">/*border: 1px solid red;*/</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"n\">word</span> <span class=\"p\">{</span>\n  <span class=\"n\">padding</span><span class=\"p\">-</span><span class=\"n\">top</span><span class=\"p\">:</span> <span class=\"m\">2</span><span class=\"n\">vh</span><span class=\"p\">;</span>\n  <span class=\"n\">padding</span><span class=\"p\">-</span><span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"m\">32</span><span class=\"n\">vw</span><span class=\"p\">;</span> <span class=\"cm\">/* see https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_transitions */</span>\n  <span class=\"n\">transition</span><span class=\"p\">:</span> <span class=\"n\">all</span> <span class=\"m\">2</span><span class=\"n\">s</span> <span class=\"n\">ease</span><span class=\"p\">-</span><span class=\"k\">out</span><span class=\"p\">;</span> <span class=\"cm\">/*border: 1px solid red;*/</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"n\">container</span><span class=\"p\">:</span><span class=\"n\">hover</span> <span class=\"p\">.</span><span class=\"n\">word</span> <span class=\"p\">{</span>\n  <span class=\"n\">padding</span><span class=\"p\">-</span><span class=\"n\">top</span><span class=\"p\">:</span> <span class=\"m\">50</span><span class=\"n\">vh</span><span class=\"p\">;</span>\n  <span class=\"n\">padding</span><span class=\"p\">-</span><span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"m\">10</span><span class=\"n\">vw</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"n\">letter</span> <span class=\"p\">{</span>\n  <span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">inline</span><span class=\"p\">-</span><span class=\"n\">block</span><span class=\"p\">;</span>\n  <span class=\"n\">font</span><span class=\"p\">-</span><span class=\"n\">family</span><span class=\"p\">:</span> <span class=\"s\">\"linottesemibold\"</span><span class=\"p\">,</span> <span class=\"n\">Arial</span><span class=\"p\">,</span> <span class=\"n\">Sans</span><span class=\"p\">-</span><span class=\"n\">Serif</span><span class=\"p\">;</span> <span class=\"cm\">/* using viewport sized typography, see https://developer.mozilla.org/en/docs/Web/CSS/length */</span>\n  <span class=\"n\">font</span><span class=\"p\">-</span><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"m\">6</span><span class=\"n\">vw</span><span class=\"p\">;</span>\n  <span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"m\">262626</span><span class=\"p\">;</span> <span class=\"cm\">/* hex */</span>\n  <span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nf\">rgb</span><span class=\"p\">(</span><span class=\"m\">38</span><span class=\"p\">,</span> <span class=\"m\">38</span><span class=\"p\">,</span> <span class=\"m\">38</span><span class=\"p\">);</span> <span class=\"cm\">/* RGB */</span>\n  <span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nf\">rgba</span><span class=\"p\">(</span>\n    <span class=\"m\">38</span><span class=\"p\">,</span>\n    <span class=\"m\">38</span><span class=\"p\">,</span>\n    <span class=\"m\">38</span><span class=\"p\">,</span>\n    <span class=\"m\">1</span>\n  <span class=\"p\">);</span> <span class=\"cm\">/* RGB with alpha transparency channel */</span> <span class=\"cm\">/* Alpha transparency channel - decimal value 0 for completely transparent 1 for completely opaque */</span> <span class=\"cm\">/* see HSL color wheel: http://www.erinsowards.com/articles/2011/01/graphics/hsl-colors.png see HSL color picker: http://hslpicker.com/, it shows RGBA and hex too */</span>\n  <span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nf\">hsl</span><span class=\"p\">(</span>\n    <span class=\"m\">0</span><span class=\"p\">,</span>\n    <span class=\"m\">0</span><span class=\"p\">%,</span>\n    <span class=\"m\">15</span><span class=\"p\">%</span>\n  <span class=\"p\">);</span> <span class=\"cm\">/* HSL */</span> <span class=\"cm\">/* HSL 1st value: hue color 2nd value: saturation (%) - higher for colorful appearance (not grayish-looking) 3rd value: lightnexx (%) - 0% for black, 100% for white */</span>\n  <span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nf\">hsla</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"m\">0</span><span class=\"p\">%,</span> <span class=\"m\">0</span><span class=\"p\">%,</span> <span class=\"m\">1</span><span class=\"p\">);</span> <span class=\"cm\">/* HSL with alpha */</span>\n\n  <span class=\"cm\">/* see https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow */</span>\n  <span class=\"n\">text</span><span class=\"p\">-</span><span class=\"n\">shadow</span><span class=\"p\">:</span> <span class=\"nf\">hsla</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"m\">0</span><span class=\"p\">%,</span> <span class=\"m\">0</span><span class=\"p\">%,</span> <span class=\"m\">0.5</span><span class=\"p\">)</span> <span class=\"m\">0.5</span><span class=\"n\">vw</span> <span class=\"m\">0.5</span><span class=\"n\">vh</span> <span class=\"m\">0.5</span><span class=\"n\">vw</span><span class=\"p\">;</span>\n\n  <span class=\"cm\">/* see https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_transitions */</span>\n  <span class=\"n\">transition</span><span class=\"p\">:</span> <span class=\"n\">all</span> <span class=\"m\">1</span><span class=\"n\">s</span> <span class=\"n\">ease</span><span class=\"p\">-</span><span class=\"k\">in</span> <span class=\"m\">1</span><span class=\"n\">s</span><span class=\"p\">;</span>\n\n  <span class=\"cm\">/*border: 1px solid red;*/</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"n\">letter_i</span> <span class=\"p\">{</span>\n  <span class=\"n\">transition</span><span class=\"p\">:</span> <span class=\"n\">all</span> <span class=\"m\">2</span><span class=\"n\">s</span> <span class=\"n\">ease</span><span class=\"p\">-</span><span class=\"k\">out</span> <span class=\"m\">0</span><span class=\"n\">s</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"n\">letter_am</span> <span class=\"p\">{</span>\n  <span class=\"n\">transition</span><span class=\"p\">:</span> <span class=\"n\">all</span> <span class=\"m\">1.5</span><span class=\"n\">s</span> <span class=\"n\">ease</span><span class=\"p\">-</span><span class=\"k\">out</span> <span class=\"m\">0.5</span><span class=\"n\">s</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"n\">container</span><span class=\"p\">:</span><span class=\"n\">hover</span> <span class=\"p\">.</span><span class=\"n\">letter</span> <span class=\"p\">{</span>\n  <span class=\"n\">font</span><span class=\"p\">-</span><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"m\">16</span><span class=\"n\">vw</span><span class=\"p\">;</span>\n  <span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nf\">hsla</span><span class=\"p\">(</span><span class=\"m\">240</span><span class=\"p\">,</span> <span class=\"m\">100</span><span class=\"p\">%,</span> <span class=\"m\">50</span><span class=\"p\">%,</span> <span class=\"m\">1</span><span class=\"p\">);</span> <span class=\"cm\">/* blue */</span>\n  <span class=\"n\">text</span><span class=\"p\">-</span><span class=\"n\">shadow</span><span class=\"p\">:</span> <span class=\"nf\">hsla</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"m\">0</span><span class=\"p\">%,</span> <span class=\"m\">0</span><span class=\"p\">%,</span> <span class=\"m\">0.5</span><span class=\"p\">)</span> <span class=\"m\">1</span><span class=\"n\">vw</span> <span class=\"m\">1</span><span class=\"n\">vh</span> <span class=\"m\">0.5</span><span class=\"n\">vw</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"n\">container</span><span class=\"p\">:</span><span class=\"n\">hover</span> <span class=\"p\">.</span><span class=\"n\">letter_i</span> <span class=\"p\">{</span>\n  <span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nf\">hsla</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"m\">100</span><span class=\"p\">%,</span> <span class=\"m\">50</span><span class=\"p\">%,</span> <span class=\"m\">1</span><span class=\"p\">);</span> <span class=\"cm\">/* red */</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"n\">container</span><span class=\"p\">:</span><span class=\"n\">hover</span> <span class=\"p\">.</span><span class=\"n\">letter_am</span> <span class=\"p\">{</span>\n  <span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nf\">hsla</span><span class=\"p\">(</span><span class=\"m\">120</span><span class=\"p\">,</span> <span class=\"m\">100</span><span class=\"p\">%,</span> <span class=\"m\">50</span><span class=\"p\">%,</span> <span class=\"m\">1</span><span class=\"p\">);</span> <span class=\"cm\">/* green */</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n"
    } ,
  
    {
      "title"    : "Web Design: A Fluid Layout Exercise",
      "category" : "web-design",
      "tags"     : "",
      "url"      : "/tech-blog/2015/01/19/web-design-a-fluid-layout-exercise.html",
      "date"     : "2015-01-19 00:00:00 +0000",
      "content": "<p><a href=\"https://rodansotto.files.wordpress.com/2015/01/fluidlayout.jpg\"><img src=\"/tech-blog/assets/images/fluidlayout.jpg\" alt=\"fluidlayout\" /></a></p>\n\n<p>Using CSS media queries is one part of making your web site responsive but you are limited to specific viewports.  Having a fluid layout on top of that will greatly improve the responsiveness and makes it more future proof.  In CSS, you can implement a fluid layout by sizing your elements’ horizontal dimensions in proportion using percentage <em>%</em> rather than pixel <em>px</em> and your fonts’ sizes using relative measurement <em>em</em>.</p>\n\n<p>When sizing using proportion, you need to know the context to which this measure is related to.  Say you set an element’s font size to 90%.  90% of what?  That <em>what</em> will be the context.  If you have defined a font-size in the closest containing element as 20px, then it will be 90% of 20px.</p>\n\n<p>If you are converting a fixed width layout to a fluid layout, the general formula used is <em>target divided by context</em>. Say you have an element’s width set to 10px and the containing element’s width is 100px.  To convert, you divide 10px by 100px which gives us 10% and that will be the resulting element’s proportional width.</p>\n\n<p>Images can be fluid too by taking the same logic as with the elements.  Also worth knowing is that you can set a maximum width that these images (and even elements) can go up to in case you don’t want them to get very, very big.</p>\n\n<p>Another way of making images fluid is by resizing these images on the server before it is rendered to the browser.  This also saves bandwidth spaces for bandwidth challenged devices.  This I will not cover here.</p>\n\n<p>Also, there is a rapid or quick way of making a web site fluid by using a grid system.  One example of a grid system is Bootstrap.  This I will not cover too.</p>\n\n<p>For this exercise, I have 2 sites, one with <a href=\"https://rodansotto.github.io/projects/css/NonFluidLayout.html\">non-fluid layout</a> and another with a <a href=\"https://rodansotto.github.io/projects/css/FluidLayout.html\">fluid layout</a>.  Both of these use CSS media queries.  I only have listed below the fully commented CSS for the fluid layout web site.  The HTML source you can view from the browser and the non-fluid CSS should be the same name except for the CSS extension (<em>*.css</em> instead of <em>*.html</em>).</p>\n\n<div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">/* When converting from fixed width to fluid, the general formula used is: divide target by context. */</span>\n<span class=\"nt\">body</span> <span class=\"p\">{</span>\n  <span class=\"nl\">font-family</span><span class=\"p\">:</span> <span class=\"n\">Calibri</span><span class=\"p\">;</span>\n  <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span> <span class=\"c\">/* 16px is the default font-size for most browsers. It's equal to 1em and equal to 100%. 16px will be the context for our proportional fonts. */</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">div</span> <span class=\"p\">{</span>\n  <span class=\"nl\">padding-top</span><span class=\"p\">:</span> <span class=\"m\">3px</span><span class=\"p\">;</span>\n  <span class=\"nl\">padding-bottom</span><span class=\"p\">:</span> <span class=\"m\">3px</span><span class=\"p\">;</span>\n  <span class=\"nl\">padding-left</span><span class=\"p\">:</span> <span class=\"m\">0.5%</span><span class=\"p\">;</span> <span class=\"c\">/* divide 5px by 960px */</span>\n  <span class=\"nl\">padding-right</span><span class=\"p\">:</span> <span class=\"m\">0.5%</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">ul</span><span class=\"o\">,</span>\n<span class=\"nt\">p</span> <span class=\"p\">{</span>\n  <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">0px</span><span class=\"p\">;</span>\n  <span class=\"nl\">margin-bottom</span><span class=\"p\">:</span> <span class=\"m\">0px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">a</span> <span class=\"p\">{</span>\n  <span class=\"nl\">text-decoration</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n  <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">2.125em</span><span class=\"p\">;</span> <span class=\"c\">/* divide 34px by 16px */</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">h2</span> <span class=\"p\">{</span>\n  <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1.1875em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">h2</span> <span class=\"nt\">span</span> <span class=\"p\">{</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"n\">Red</span><span class=\"p\">;</span> <span class=\"c\">/* The context for span is h2. span's pixel font size is 22px and h2's is 19px. So to get the proportional font-size of span, we divide 22px by 19px, not 16px. */</span>\n  <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1.157em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">h3</span> <span class=\"p\">{</span>\n  <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">0.75em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"c\">/* #wrapper width's pixel size is 960px. This will be the context for our proportional elements. Note that I did not exactly follow the formula's result to the decimal point. As long as it's approximate and everything tallies exactly to 100% of their containing element, it should be fine. */</span>\n<span class=\"nf\">#wrapper</span> <span class=\"p\">{</span>\n  <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">10px</span><span class=\"p\">;</span>\n  <span class=\"nl\">margin-right</span><span class=\"p\">:</span> <span class=\"nb\">auto</span><span class=\"p\">;</span>\n  <span class=\"nl\">margin-left</span><span class=\"p\">:</span> <span class=\"nb\">auto</span><span class=\"p\">;</span>\n  <span class=\"nl\">padding-left</span><span class=\"p\">:</span> <span class=\"m\">0px</span><span class=\"p\">;</span>\n  <span class=\"nl\">padding-right</span><span class=\"p\">:</span> <span class=\"m\">0px</span><span class=\"p\">;</span>\n  <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span> <span class=\"c\">/*max-width: 960px;*/</span> <span class=\"c\">/* if you don't want to scale out beyond some point then set max-width */</span>\n<span class=\"p\">}</span>\n<span class=\"nf\">#header</span> <span class=\"p\">{</span>\n  <span class=\"nl\">margin-right</span><span class=\"p\">:</span> <span class=\"m\">1%</span><span class=\"p\">;</span>\n  <span class=\"nl\">margin-left</span><span class=\"p\">:</span> <span class=\"m\">1%</span><span class=\"p\">;</span> <span class=\"c\">/* For the width, divide 930px by 960px. But I rounded it to whole number for easy maintenance. Just need to make sure everything tallies to 100%. 97% for the header content's width, 2% total for it's left and right margins. And don't forget we have padding of 1% total for both sides of a div. So that makes a 100%. */</span>\n  <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">97%</span><span class=\"p\">;</span>\n  <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"m\">#6fd7ff</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nf\">#navigation</span> <span class=\"nt\">ul</span> <span class=\"nt\">li</span> <span class=\"p\">{</span>\n  <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">inline-block</span><span class=\"p\">;</span>\n  <span class=\"nl\">margin-right</span><span class=\"p\">:</span> <span class=\"m\">2.5%</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"c\">/* Note that the anchor tag does not have explicit context. So the right margin is moved to the containing li tag (above). */</span> <span class=\"c\">/*#navigation ul li a { margin-right: 25px; }*/</span>\n<span class=\"nf\">#sidebar</span> <span class=\"p\">{</span>\n  <span class=\"nl\">margin-left</span><span class=\"p\">:</span> <span class=\"m\">1%</span><span class=\"p\">;</span>\n  <span class=\"nl\">float</span><span class=\"p\">:</span> <span class=\"nb\">left</span><span class=\"p\">;</span>\n  <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"m\">#9fade6</span><span class=\"p\">;</span>\n  <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">20%</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nf\">#sidebar</span> <span class=\"nt\">ul</span> <span class=\"p\">{</span>\n  <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">10px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nf\">#sidebar</span> <span class=\"nt\">ul</span> <span class=\"nt\">li</span> <span class=\"nt\">ul</span> <span class=\"nt\">li</span> <span class=\"nt\">a</span> <span class=\"p\">{</span>\n  <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">0.875em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nf\">#content</span> <span class=\"p\">{</span>\n  <span class=\"nl\">margin-right</span><span class=\"p\">:</span> <span class=\"m\">1%</span><span class=\"p\">;</span>\n  <span class=\"nl\">float</span><span class=\"p\">:</span> <span class=\"nb\">right</span><span class=\"p\">;</span>\n  <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">76%</span><span class=\"p\">;</span>\n  <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"m\">#ffcdaf</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nf\">#footer</span> <span class=\"p\">{</span>\n  <span class=\"nl\">margin-right</span><span class=\"p\">:</span> <span class=\"m\">1%</span><span class=\"p\">;</span>\n  <span class=\"nl\">margin-left</span><span class=\"p\">:</span> <span class=\"m\">1%</span><span class=\"p\">;</span>\n  <span class=\"nl\">clear</span><span class=\"p\">:</span> <span class=\"nb\">both</span><span class=\"p\">;</span>\n  <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"m\">#cc6444</span><span class=\"p\">;</span>\n  <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">97%</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nf\">#footer</span> <span class=\"nt\">p</span> <span class=\"p\">{</span>\n  <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">0.75em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.art</span> <span class=\"p\">{</span>\n  <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">32.5%</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* Below are the breakpoints, 604px and 320px. */</span>\n\n<span class=\"c\">/* I put addtl breakpoint here and set the page to fixed width so sidebar text won't wrap */</span>\n<span class=\"k\">@media</span> <span class=\"n\">screen</span> <span class=\"n\">and</span> <span class=\"p\">(</span><span class=\"n\">max-width</span><span class=\"p\">:</span> <span class=\"m\">665px</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nf\">#wrapper</span> <span class=\"p\">{</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">665px</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">@media</span> <span class=\"n\">screen</span> <span class=\"n\">and</span> <span class=\"p\">(</span><span class=\"n\">max-width</span><span class=\"p\">:</span> <span class=\"m\">604px</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nf\">#wrapper</span> <span class=\"p\">{</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">99%</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nf\">#sidebar</span> <span class=\"p\">{</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">33%</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nf\">#content</span> <span class=\"p\">{</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">63%</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nc\">.art</span> <span class=\"p\">{</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">49%</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* I put addtl breakpoint here and set the page to fixed width so sidebar text won't wrap */</span>\n<span class=\"k\">@media</span> <span class=\"n\">screen</span> <span class=\"n\">and</span> <span class=\"p\">(</span><span class=\"n\">max-width</span><span class=\"p\">:</span> <span class=\"m\">412px</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nf\">#wrapper</span> <span class=\"p\">{</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">412px</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">@media</span> <span class=\"n\">screen</span> <span class=\"n\">and</span> <span class=\"p\">(</span><span class=\"n\">max-width</span><span class=\"p\">:</span> <span class=\"m\">320px</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nf\">#wrapper</span> <span class=\"p\">{</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">99%</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nf\">#sidebar</span> <span class=\"p\">{</span>\n    <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nf\">#content</span> <span class=\"p\">{</span>\n    <span class=\"nl\">float</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-left</span><span class=\"p\">:</span> <span class=\"m\">1%</span><span class=\"p\">;</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">97%</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nc\">.art</span> <span class=\"p\">{</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n"
    } ,
  
    {
      "title"    : "C#: Does the code below look familiar?",
      "category" : "c-sharp",
      "tags"     : "",
      "url"      : "/tech-blog/2015/01/15/c-does-the-code-below-look-familiar.html",
      "date"     : "2015-01-15 00:00:00 +0000",
      "content": "<p><a href=\"https://rodansotto.files.wordpress.com/2015/01/extmethod.jpg\"><img src=\"/tech-blog/assets/images/extmethod.jpg\" alt=\"extmethod\" /></a></p>\n\n<p>If not or you are struggling to understand it, then no worries.  I too didn’t understand it fully well when I coded this, but it worked wonderfully.  I am going to break down this code into digestible parts because there is just too much.  I would suggest going through the provided links as well to fully understand each part before going to the next.</p>\n\n<p>In the code, I am declaring a new extension method, named <em>OrderByWithDirection</em>, to be used as a LINQ query operation to sort elements in either ascending or descending order.  See <a href=\"http://msdn.microsoft.com/en-us/library/bb397896(v=vs.100).aspx\">Standard Query Operators Overview</a>.  In LINQ query, you have separate methods for sorting in ascending order, the <em>OrderBy</em> , and sorting in descending order, the <em>OrderByDescending</em>.  OrderByWithDirection can do both ways, so I am passing a sort direction in the third parameter:</p>\n\n<div class=\"language-cs highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"n\">IOrderedQueryable</span><span class=\"p\">&lt;</span><span class=\"n\">TSource</span><span class=\"p\">&gt;</span> <span class=\"n\">OrderByWithDirection</span><span class=\"p\">&lt;</span><span class=\"n\">TSource</span><span class=\"p\">,</span> <span class=\"n\">TKey</span><span class=\"p\">&gt;(</span> <span class=\"k\">this</span> <span class=\"n\">IQueryable</span><span class=\"p\">&lt;</span><span class=\"n\">TSource</span><span class=\"p\">&gt;</span> <span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">Expression</span><span class=\"p\">&lt;</span><span class=\"n\">Func</span><span class=\"p\">&lt;</span><span class=\"n\">TSource</span><span class=\"p\">,</span> <span class=\"n\">TKey</span><span class=\"p\">&gt;&gt;</span> <span class=\"n\">keySelector</span><span class=\"p\">,</span> <span class=\"kt\">string</span> <span class=\"n\">sortDir</span><span class=\"p\">)</span> \n</code></pre></div></div>\n\n<p>So what’s an <em>extension method</em>?  An extension method is like a static function that you can add to an existing type so you can call it from any instance of that (extended) type.  See <a href=\"http://msdn.microsoft.com/en-us/library/bb383977(v=vs.100).aspx\">Extension Methods</a> and <a href=\"http://msdn.microsoft.com/en-us/library/bb311042(v=vs.100).aspx\">How to: Implement and Call a Custom Extension Method</a>.  In the code, I am making OrderByWithDirection available to any data structures that implement _IQueryable<TSource>_, which is why the first parameter to this method is of that type:</TSource></p>\n\n<div class=\"language-cs highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"n\">IOrderedQueryable</span><span class=\"p\">&lt;</span><span class=\"n\">TSource</span><span class=\"p\">&gt;</span> <span class=\"n\">OrderByWithDirection</span><span class=\"p\">&lt;</span><span class=\"n\">TSource</span><span class=\"p\">,</span> <span class=\"n\">TKey</span><span class=\"p\">&gt;(</span> <span class=\"k\">this</span> <span class=\"n\">IQueryable</span><span class=\"p\">&lt;</span><span class=\"n\">TSource</span><span class=\"p\">&gt;</span> <span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">Expression</span><span class=\"p\">&lt;</span><span class=\"n\">Func</span><span class=\"p\">&lt;</span><span class=\"n\">TSource</span><span class=\"p\">,</span> <span class=\"n\">TKey</span><span class=\"p\">&gt;&gt;</span> <span class=\"n\">keySelector</span><span class=\"p\">,</span> <span class=\"kt\">string</span> <span class=\"n\">sortDir</span><span class=\"p\">)</span> \n</code></pre></div></div>\n\n<p>Depending on the sort direction, OrderByWithDirection calls either OrderBy or OrderByDescending, both of which are actually extension methods themselves extending <code class=\"language-plaintext highlighter-rouge\">IQueryable&lt;TSource&gt;</code>.  So it’s only logical that OrderByWithDirection extends the same type as well.  OrderBy and OrderByDescending are part of the <em>Queryable</em> class, much like OrderByWithDirection is part of <em>ExtensionMethods</em> class in the code.  See <a href=\"http://msdn.microsoft.com/en-us/library/system.linq.queryable(v=vs.100).aspx\">Queryable Class</a>, <a href=\"http://msdn.microsoft.com/en-us/library/bb549264(v=vs.100).aspx\">Queryable.OrderBy Method</a>, and <a href=\"http://msdn.microsoft.com/en-us/library/bb534316(v=vs.100).aspx\">Queryable.OrderByDescending Method</a>.</p>\n\n<p>OrderBy and OrderByDescending requires an <code class=\"language-plaintext highlighter-rouge\">Expression&lt;Func&lt;TSource, TKey&gt;&gt;</code>, basically a function to extract a key from an element.  So in OrderByWithDirection, I am passing this function on the second parameter:</p>\n\n<div class=\"language-cs highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"n\">IOrderedQueryable</span><span class=\"p\">&lt;</span><span class=\"n\">TSource</span><span class=\"p\">&gt;</span> <span class=\"n\">OrderByWithDirection</span><span class=\"p\">&lt;</span><span class=\"n\">TSource</span><span class=\"p\">,</span> <span class=\"n\">TKey</span><span class=\"p\">&gt;(</span> <span class=\"k\">this</span> <span class=\"n\">IQueryable</span><span class=\"p\">&lt;</span><span class=\"n\">TSource</span><span class=\"p\">&gt;</span> <span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">Expression</span><span class=\"p\">&lt;</span><span class=\"n\">Func</span><span class=\"p\">&lt;</span><span class=\"n\">TSource</span><span class=\"p\">,</span> <span class=\"n\">TKey</span><span class=\"p\">&gt;&gt;</span> <span class=\"n\">keySelector</span><span class=\"p\">,</span> <span class=\"kt\">string</span> <span class=\"n\">sortDir</span><span class=\"p\">)</span> \n</code></pre></div></div>\n\n<p>To call OrderByWithDirection you would code something like this:</p>\n\n<div class=\"language-cs highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// products variable is of type IQueryable&lt;Product&gt; </span>\n<span class=\"n\">products</span> <span class=\"p\">=</span> <span class=\"n\">products</span><span class=\"p\">.</span><span class=\"nf\">OrderByWithDirection</span><span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"p\">=&gt;</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">ProductName</span><span class=\"p\">,</span> <span class=\"s\">\"desc\"</span><span class=\"p\">);</span> \n</code></pre></div></div>\n\n<p>Here we are passing a lambda expression.  At first, it might look like this lambda expression is returning the product name value and not the product name key, <em>ProductName</em>.  But because we are passing this as an <code class=\"language-plaintext highlighter-rouge\">Expression&lt;Func&lt;TSource, TKey&gt;&gt;</code>, the lambda expression is being represented as an expression tree which makes this possible.  See <a href=\"http://msdn.microsoft.com/en-us/library/bb335710(v=vs.100).aspx\">Expression&lt;TDelegate&gt; Class</a>, <a href=\"http://msdn.microsoft.com/en-us/library/bb549151(v=vs.100).aspx\">Func&lt;T, TResult&gt; Delegate</a>, <a href=\"http://msdn.microsoft.com/en-us/library/bb397951(v=vs.100).aspx\">Expression Trees</a>, and <a href=\"http://msdn.microsoft.com/en-us/library/bb882637(v=vs.100).aspx\">How to: Use Expression Trees to Build Dynamic Queries</a>.</p>\n\n<p>Last but not the least, the return type.  Since OrderByWithDirection returns whatever the OrderBy or OrderByDescending returns, it’s only logical to return the same type as well, which is <code class=\"language-plaintext highlighter-rouge\">IOrderedQueryable&lt;TSource&gt;</code>. See <a href=\"http://msdn.microsoft.com/en-us/library/System.Linq.IOrderedQueryable(v=vs.100).aspx\">IOrderedQueryable Interface</a>.</p>\n\n<p>Below is the complete code in text:</p>\n\n<div class=\"language-cs highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">using</span> <span class=\"nn\">System</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"nn\">System.Linq</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"nn\">System.Linq.Expressions</span><span class=\"p\">;</span>\n\n<span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"k\">class</span> <span class=\"nc\">ExtensionMethods</span> <span class=\"p\">{</span>\n  <span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"n\">IOrderedQueryable</span> <span class=\"p\">&lt;</span> <span class=\"n\">TSource</span> <span class=\"p\">&gt;</span> <span class=\"n\">OrderByWithDirection</span> <span class=\"p\">&lt;</span> <span class=\"n\">TSource</span><span class=\"p\">,</span> <span class=\"n\">TKey</span> <span class=\"p\">&gt;</span> <span class=\"p\">(</span><span class=\"k\">this</span> <span class=\"n\">IQueryable</span> <span class=\"p\">&lt;</span> <span class=\"n\">TSource</span> <span class=\"p\">&gt;</span> <span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">Expression</span> <span class=\"p\">&lt;</span> <span class=\"n\">Func</span> <span class=\"p\">&lt;</span> <span class=\"n\">TSource</span><span class=\"p\">,</span> <span class=\"n\">TKey</span> <span class=\"p\">&gt;&gt;</span> <span class=\"n\">keySelector</span><span class=\"p\">,</span> <span class=\"kt\">string</span> <span class=\"n\">sortDir</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sortDir</span><span class=\"p\">.</span><span class=\"nf\">ToUpper</span><span class=\"p\">().</span><span class=\"nf\">Equals</span><span class=\"p\">(</span><span class=\"s\">\"DESC\"</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"p\">.</span><span class=\"nf\">OrderByDescending</span><span class=\"p\">(</span><span class=\"n\">keySelector</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"p\">.</span><span class=\"nf\">OrderBy</span><span class=\"p\">(</span><span class=\"n\">keySelector</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n"
    } ,
  
    {
      "title"    : "Web Design: Resources",
      "category" : "web-design",
      "tags"     : "",
      "url"      : "/tech-blog/2015/01/09/web-design-resources.html",
      "date"     : "2015-01-09 00:00:00 +0000",
      "content": "<p><a href=\"https://github.com/h5bp/Front-end-Developer-Interview-Questions\">Front-end Job Interview Questions</a> will serve as a measuring stick for how much (or should I say how little) I know about HTML, CSS, JavaScript, and jQuery.</p>\n\n<p><a href=\"http://thehipperelement.com/post/75476711614/ux-crash-course-31-fundamentals\">UX Crash Course: 31 Fundamentals</a> is a good resource to catch up / refresh on UX fundamentals.</p>\n"
    } ,
  
    {
      "title"    : "SQL Server: My Quick and Dirty Way of Debugging Stored Procedure",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2015/01/07/sql-server-my-quick-and-dirty-way-of-debugging-stored-procedure.html",
      "date"     : "2015-01-07 00:00:00 +0000",
      "content": "<p>I use the below SQL script to debug a stored procedure in chunks, replacing or adding into it the rest of the stored procedure code until every code checks out fine.  Since I use transactions, changes are temporary and it rolls back the transaction at the end.  I also used the <a href=\"https://rodansotto.github.io/tech-blog/2013/05/28/sql-server-error-handling-2.html\">error handling in SQL Server</a> to catch and print the error line, error number and error message.</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">BEGIN</span> <span class=\"n\">TRANSACTION</span> <span class=\"k\">BEGIN</span> <span class=\"n\">TRY</span> <span class=\"c1\">-- -- your SQL code here -- END TRY BEGIN CATCH PRINT 'Error at line # ' + CAST(ERROR_LINE() AS VARCHAR(MAX)) + ': ' + CAST(ERROR_NUMBER() AS VARCHAR(MAX)) + ' - ' + ERROR_MESSAGE() END CATCH IF @@TRANCOUNT &gt; 0 ROLLBACK TRANSACTION </span>\n</code></pre></div></div>\n"
    } ,
  
    {
      "title"    : "ASP.NET Web Services - Blast From The Past (Part 2)",
      "category" : "asp-net",
      "tags"     : "",
      "url"      : "/tech-blog/2015/01/06/asp-net-web-services-blast-from-the-past-part-2.html",
      "date"     : "2015-01-06 00:00:00 +0000",
      "content": "<p>Here is part 2 of this topic as promised.  It will cover consuming web service using HTTP POST and using jQuery AJAX.  If you missed part 1 of this topic, click <a href=\"https://rodansotto.github.io/tech-blog/2015/01/05/asp-net-web-services-blast-from-the-past-part-1.html\">here</a>.</p>\n\n<p>But before I start, I forgot to mention in part 1 that when you set up your web service as part of a web site, like when you deploy your web service in a virtual directory of a web site, you need to make sure the _<compilation>_ setting in the web site’s _web.config_ file does not have the _targetFramework_ attribute which is usually present when targeting .NET Framework 4.0 and up.  Otherwise, your web service will not work.  Ok, so on to part 2.</compilation></p>\n\n<p><strong>Consuming a Web Service Using HTTP POST</strong></p>\n\n<p>Another article that covers the basics of a web service including consuming it using HTTP POST is <a href=\"http://www.codeproject.com/Articles/337535/Understanding-the-Basics-of-Web-Service-in-ASP-NET\">Understanding the Basics of Web Service in ASP.NET</a>.  I have a demo <a href=\"https://rodansotto.github.io/projects/asmx/UsingHTTPPost.aspx\">web page</a> that uses HTTP POST to consume the simple <a href=\"https://rodansotto.github.io/asmx/translatetofrenchservice.asmx\">web service</a> I created.</p>\n\n<p>Some important points:</p>\n\n<ul>\n  <li>When you use this method, you need to add the below config to the web service’s <em>web.config</em> file, otherwise you will get this <a href=\"http://stackoverflow.com/questions/657313/request-format-is-unrecognized-for-url-unexpectedly-ending-in\">error</a>.</li>\n</ul>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;configuration&gt;</span> <span class=\"nt\">&lt;system.web&gt;</span> <span class=\"c\">&lt;!-- enable HttpGet and HttpPost on the web service --&gt;</span> <span class=\"nt\">&lt;webservices&gt;</span> <span class=\"nt\">&lt;protocols&gt;</span> <span class=\"nt\">&lt;add</span> <span class=\"na\">name=</span><span class=\"s\">\"HttpGet\"</span> <span class=\"nt\">/&gt;</span> <span class=\"nt\">&lt;add</span> <span class=\"na\">name=</span><span class=\"s\">\"HttpPost\"</span> <span class=\"nt\">/&gt;</span> <span class=\"nt\">&lt;/protocols&gt;</span> <span class=\"nt\">&lt;/webservices&gt;</span> <span class=\"nt\">&lt;/system.web&gt;</span> <span class=\"nt\">&lt;/configuration&gt;</span> \n</code></pre></div></div>\n\n<ul>\n  <li>The response you get will be displayed in the browser in XML format (see my demo <a href=\"https://rodansotto.github.io/projects/asmx/UsingHTTPPost.aspx\">web page</a>).  If you want to handle the response, you need to code to send a POST request and handle the response, as in below:</li>\n</ul>\n\n<div class=\"language-cs highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">protected</span> <span class=\"k\">void</span> <span class=\"nf\">Translatev2Button_Click</span><span class=\"p\">(</span><span class=\"kt\">object</span> <span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">EventArgs</span> <span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">EnglishTextBox</span><span class=\"p\">.</span><span class=\"n\">Text</span> <span class=\"p\">!=</span> <span class=\"kt\">string</span><span class=\"p\">.</span><span class=\"n\">Empty</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">try</span> <span class=\"p\">{</span> <span class=\"c1\">// this is the content of the request byte\\[\\] content = System.Text.Encoding.ASCII.GetBytes( \"english=\" + EnglishTextBox.Text);</span>\n\n<span class=\"c1\">// create the request System.Net.WebRequest request = System.Net.HttpWebRequest.Create( \"https://rodansotto.github.io/asmx/\" + \"TranslateToFrenchService.asmx/TranslateToFrench\"); request.Method = \"POST\"; request.ContentType = \"application/x-www-form-urlencoded\"; request.ContentLength = content.Length;</span>\n\n<span class=\"c1\">// write the content to the request stream System.IO.Stream requestStream = request.GetRequestStream(); requestStream.Write(content, 0, content.Length); requestStream.Flush();</span>\n\n<span class=\"c1\">// get the response System.Net.WebResponse response = request.GetResponse(); // get the stream associated with the response System.IO.Stream responseStream = response.GetResponseStream(); // pipes the stream to a higher level stream reader with the // required encoding format System.IO.StreamReader streamReader = new System.IO.StreamReader( responseStream, System.Text.Encoding.UTF8);</span>\n\n<span class=\"c1\">// the response is in XML format and normally needs to be handled // but since the XML response is simple enough that when displayed // by the browser, it only displays what we need to display, // the french text FrenchLabel.Text = streamReader.ReadToEnd(); } catch (Exception) { throw; } } } </span>\n</code></pre></div></div>\n\n<p><strong>Consuming a Web Service Using jQuery AJAX</strong></p>\n\n<p>Another way to call a web service is by using <a href=\"http://api.jquery.com/jquery.ajax/\">jQuery.ajax()</a> function.  This is the preferred way by many.  <a href=\"http://www.c-sharpcorner.com/UploadFile/dacca2/understand-jquery-ajax-function-call-web-service-using-jque/\">Understand jQuery Ajax Function: Call Web Service Using jQuery Ajax Method</a> shows you how.  Below is the client-side code for my demo <a href=\"https://rodansotto.github.io/projects/asmx/UsingJQueryAJAX.aspx\">web page</a> that uses jQuery AJAX to consume the simple <a href=\"https://rodansotto.github.io/asmx/translatetofrenchservice.asmx\">web service</a> I created.</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">head</span> <span class=\"nx\">runat</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">server</span><span class=\"dl\">\"</span><span class=\"o\">&gt;</span> <span class=\"o\">&lt;</span><span class=\"nx\">script</span> <span class=\"nx\">src</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">http://ajax.googleapis.com/.../1.11.2/jquery.min.js</span><span class=\"dl\">\"</span><span class=\"o\">&gt;</span> <span class=\"o\">&lt;</span><span class=\"sr\">/script&gt; &lt;script&gt; $</span><span class=\"se\">(</span><span class=\"sr\">document</span><span class=\"se\">)</span><span class=\"sr\">.ready</span><span class=\"se\">(</span><span class=\"sr\">function </span><span class=\"se\">()</span><span class=\"sr\"> { $</span><span class=\"se\">(</span><span class=\"sr\">\"#TranslateButton\"</span><span class=\"se\">)</span><span class=\"sr\">.click</span><span class=\"se\">(</span><span class=\"sr\">function </span><span class=\"se\">()</span><span class=\"sr\"> { /</span><span class=\"o\">/</span> <span class=\"nx\">have</span> <span class=\"nx\">to</span> <span class=\"nx\">add</span> <span class=\"nx\">following</span> <span class=\"nx\">statement</span> <span class=\"nx\">to</span> <span class=\"nx\">enable</span> <span class=\"nx\">cross</span><span class=\"o\">-</span><span class=\"nx\">domain</span> <span class=\"nx\">request</span> <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">support</span><span class=\"p\">.</span><span class=\"nx\">cors</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n\n<span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajax</span><span class=\"p\">({</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">POST</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n\n<span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">https://rodansotto.github.io/...Service.asmx/TranslateToFrench</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n\n<span class=\"c1\">//contentType: \"application/x-www-form-urlencoded; charset=UTF-8\", // no need to specify contentType above as that is the default</span>\n\n<span class=\"na\">data</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">english=</span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">#EnglishTextBox</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(),</span>\n\n<span class=\"na\">dataType</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">text</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n\n<span class=\"na\">success</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">#FrenchLabel</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">html</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">);</span> <span class=\"p\">},</span>\n\n<span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">jqXHR</span><span class=\"p\">,</span> <span class=\"nx\">textStatus</span><span class=\"p\">,</span> <span class=\"nx\">errorThrown</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"kd\">var</span> <span class=\"nx\">errorMsg</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">jQuery AJAX ERROR!!!</span><span class=\"se\">\\\\</span><span class=\"s2\">njqXHR.statusText = </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">jqXHR</span><span class=\"p\">.</span><span class=\"nx\">statusText</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"se\">\\\\</span><span class=\"s2\">ntextStatus = </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">textStatus</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"se\">\\\\</span><span class=\"s2\">nerrorThrown = </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">errorThrown</span><span class=\"p\">;</span> <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"nx\">errorMsg</span><span class=\"p\">);</span> <span class=\"p\">}</span> <span class=\"p\">});</span> <span class=\"p\">});</span> <span class=\"p\">});</span> <span class=\"o\">&lt;</span><span class=\"sr\">/script</span><span class=\"err\">&gt;\n</span>\n</code></pre></div></div>\n\n<p>Some important points:</p>\n\n<ul>\n  <li>If your web app will be making a cross-domain request to call the web service, you need to set <em>$.support.cors = true</em>, otherwise you will receive the <a href=\"http://stackoverflow.com/questions/9160123/no-transport-error-w-jquery-ajax-call-in-ie\">‘No Transport’</a> error.</li>\n  <li>And don’t forget to enable the following attribute in your web service class: <em>[System.Web.Script.Services.ScriptService]</em>.</li>\n</ul>\n\n<div class=\"language-cs highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">namespace</span> <span class=\"nn\">MyWebService</span> <span class=\"p\">{</span> <span class=\"c1\">/// &lt;summary&gt; /// Summary description for TranslateToFrenchService /// &lt;/summary&gt; \\[WebService(Namespace = \"https://rodansotto.github.io/\")\\] \\[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)\\] \\[System.ComponentModel.ToolboxItem(false)\\] // To allow this Web Service to be called from script, // using ASP.NET AJAX, uncomment the following line. \\[System.Web.Script.Services.ScriptService\\] public class TranslateToFrenchService : System.Web.Services.WebService { </span>\n</code></pre></div></div>\n\n<p>And that concludes this topic ASP.NET Web Services - Blast From The Past.</p>\n"
    } ,
  
    {
      "title"    : "ASP.NET Web Services - Blast From The Past (Part 1)",
      "category" : "asp-net",
      "tags"     : "",
      "url"      : "/tech-blog/2015/01/05/asp-net-web-services-blast-from-the-past-part-1.html",
      "date"     : "2015-01-05 00:00:00 +0000",
      "content": "<p>My last <a href=\"https://rodansotto.github.io/tech-blog/2013/06/11/asp-net-what-are-web-services.html\">post</a> regarding web services was June 13, 2013 and I ended it with an expectation of a sequel.  Fast forward to today, web services have now been regarded by Microsoft as legacy technologies and recommends using WCF services instead.  Then again, with Web API available why use WCF services if you are only using HTTP for these services?  That will have to be explored on a separate posts.  In this post I will revisit,  hence the title, the basics of creating a web service and the many ways of how to consume it.  I will mostly provide links to avoid reinventing the wheels but still provide my own code and demos as well.</p>\n\n<p><strong>Creating a Web Service and Consuming It Using WSDL Generated Proxy Class</strong></p>\n\n<p><a href=\"http://www.tutorialspoint.com/asp.net/asp.net_web_services.htm\">ASP.NET - Web Services from TutorialsPoint</a> shows you how to create a web service, how to test the web service locally, and how to consume the web service using proxy.  For this demo, I have created a simple <a href=\"https://rodansotto.github.io/asmx/translatetofrenchservice.asmx\">web service</a> and a <a href=\"https://rodansotto.github.io/projects/asmx/UsingProxy.aspx\">web page</a> that consumes it using proxy.</p>\n\n<p>Some important points:</p>\n\n<ul>\n  <li>When creating a new project for a web service in Visual Studio 2010 and up, you need to select <em>.NET Framework 3.5</em> and select the <em>ASP.NET Web Service Application</em> project template.  You can’t create a web service anymore starting version 4.0 of the .NET Framework.</li>\n  <li>Make sure to change the <em>[WebService(Namespace = ”http://tempuri.org/”)]</em> attribute for your web service class to something unique before you go live with your web service.  I have mine changed below:</li>\n</ul>\n\n<div class=\"language-cs highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">namespace</span> <span class=\"nn\">MyWebService</span> <span class=\"p\">{</span> <span class=\"c1\">/// &lt;summary&gt; /// Summary description for TranslateToFrenchService /// &lt;/summary&gt; \\[WebService(Namespace = \"https://rodansotto.github.io/\")\\] \\[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)\\] \\[System.ComponentModel.ToolboxItem(false)\\] // To allow this Web Service to be called from script, // using ASP.NET AJAX, uncomment the following line. //\\[System.Web.Script.Services.ScriptService\\] public class TranslateToFrenchService : System.Web.Services.WebService { private string\\[,\\] translations = { {\"good morning\", \"bonjour\"}, {\"good evening\", \"bonsoir\"}, {\"thank you\", \"merci\"}, {\"please\", \"s'il vous plait\"}, {\"welcome\", \"bienvenue\"}, {\"goodbye\", \"au revoir\"}, {\"see you soon\", \"à bientôt\"} };</span>\n\n<span class=\"err\">\\</span><span class=\"p\">[</span><span class=\"n\">WebMethod</span><span class=\"err\">\\</span><span class=\"p\">]</span> <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"nf\">TranslateToFrench</span><span class=\"p\">(</span><span class=\"kt\">string</span> <span class=\"n\">english</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"p\">=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"p\">&amp;</span><span class=\"n\">lt</span><span class=\"p\">;</span> <span class=\"n\">translations</span><span class=\"p\">.</span><span class=\"nf\">GetLength</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">);</span> <span class=\"n\">i</span><span class=\"p\">++)</span> <span class=\"p\">{</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">.</span><span class=\"nf\">Compare</span><span class=\"p\">(</span> <span class=\"n\">english</span><span class=\"p\">,</span> <span class=\"n\">translations</span><span class=\"err\">\\</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"m\">0</span><span class=\"err\">\\</span><span class=\"p\">],</span> <span class=\"k\">true</span><span class=\"p\">)</span> <span class=\"p\">==</span> <span class=\"m\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">translations</span><span class=\"err\">\\</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"m\">1</span><span class=\"err\">\\</span><span class=\"p\">];</span> <span class=\"p\">}</span> <span class=\"p\">}</span> <span class=\"k\">return</span> <span class=\"s\">\"\"</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"p\">}</span> <span class=\"p\">}</span> \n</code></pre></div></div>\n\n<ul>\n  <li>There are also other ways of consuming a web service besides using proxy.  You have HTTP POST method and XMLHTTP.  I will show how to use HTTP POST method later in this post.  As for XMLHTTP, you use the XMLHTTPRequest object in JavaScript.  It’s a lot of work setting this up and the following articles show you how: <a href=\"http://pavanarya.wordpress.com/2012/05/20/calling-a-web-service-from-javascript-using-xmlhttprequest/\">Calling a Web Service from Javascript using XMLHttpRequest</a> and <a href=\"http://www.codedigest.com/Articles/WebServices/55_Consuming_Webservices_via_XMLHTTP_protocol.aspx\">Consuming .NET Web Services using XMLHTTP protocol</a>.  An alternative way is to use ASP.NET AJAX and <a href=\"http://www.webreference.com/programming/asp/Ajax_WebService/index.html\">Consuming a Web Service using ASP.NET Ajax</a> shows you how.  But a better way is to use jQuery AJAX which I will also show how later in this post.</li>\n  <li>\n    <p>When calling a web service using proxy, you will need to add a web reference.  In Visual Studio 2010 and up, you have the option to add it as a service reference.  In fact Visual Studio is recommending you add it as a service reference rather than a web reference because web reference is using the legacy .NET Framework 2.0 web services technology and is there only for compatibility reason.</p>\n\n    <ul>\n      <li>Add as a service reference.  <a href=\"http://msdn.microsoft.com/en-us/library/bb386386.aspx\">Walkthrough: Creating and Accessing WCF Services from MSDN</a> shows you how to add a service reference.  When you add a service reference, additional config is added to the consuming app’s web.config file under <configuration>.  The following is the config that was added to my web page’s site’s web.config file:</configuration></li>\n    </ul>\n\n    <div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"nt\">&lt;configuration&gt;</span> <span class=\"c\">&lt;!-- config added for using a service reference --&gt;</span> <span class=\"nt\">&lt;system.serviceModel&gt;</span> <span class=\"nt\">&lt;bindings&gt;</span> <span class=\"nt\">&lt;basicHttpBinding&gt;</span> <span class=\"nt\">&lt;binding</span> <span class=\"na\">name=</span><span class=\"s\">\"TranslateToFrenchServiceSoap\"</span><span class=\"nt\">/&gt;</span> <span class=\"nt\">&lt;/basicHttpBinding&gt;</span> <span class=\"nt\">&lt;/bindings&gt;</span> <span class=\"nt\">&lt;client&gt;</span> <span class=\"nt\">&lt;endpoint</span> <span class=\"na\">address=</span> <span class=\"s\">\"https://rodansotto.github.io/asmx/TranslateToFrenchService.asmx\"</span> <span class=\"na\">binding=</span><span class=\"s\">\"basicHttpBinding\"</span> <span class=\"na\">bindingConfiguration=</span><span class=\"s\">\"TranslateToFrenchServiceSoap\"</span> <span class=\"na\">contract=</span><span class=\"s\">\"MyWebServiceB.TranslateToFrenchServiceSoap\"</span> <span class=\"na\">name=</span><span class=\"s\">\"TranslateToFrenchServiceSoap\"</span><span class=\"nt\">/&gt;</span> <span class=\"nt\">&lt;/client&gt;</span> <span class=\"nt\">&lt;/system.serviceModel&gt;</span> <span class=\"nt\">&lt;/configuration&gt;</span> \n</code></pre></div>    </div>\n\n    <p>To invoke the web service method using the service reference, I used the following code where <em>MyWebServiceB</em> is the namespace I provided:</p>\n\n    <div class=\"language-cs highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"k\">protected</span> <span class=\"k\">void</span> <span class=\"nf\">Translatev2Button_Click</span><span class=\"p\">(</span><span class=\"kt\">object</span> <span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">EventArgs</span> <span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">Englishv2TextBox</span><span class=\"p\">.</span><span class=\"n\">Text</span> <span class=\"p\">!=</span> <span class=\"kt\">string</span><span class=\"p\">.</span><span class=\"n\">Empty</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">try</span>\n    \n  <span class=\"p\">{</span> <span class=\"c1\">// consuming a web service using a service reference MyWebServiceB.TranslateToFrenchServiceSoapClient soapClient = new MyWebServiceB.TranslateToFrenchServiceSoapClient(); Frenchv2Label.Text = soapClient.TranslateToFrench(Englishv2TextBox.Text); }</span>\n    \n  <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"n\">Exception</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">throw</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"p\">}</span> <span class=\"p\">}</span> \n</code></pre></div>    </div>\n\n    <ul>\n      <li>Add as a web reference.  To add a web reference you have to go to the same <em>Add Service Reference</em> dialog window and click the <em>Advanced…</em> button.  Then click the <em>Add Web Reference…</em> button.  The following are the config added to my web page’s site’s web.config file and also the code I used to invoke the web service method.  You will see the differences between adding as a web reference and adding as a service reference.</li>\n    </ul>\n  </li>\n</ul>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;configuration&gt;</span> <span class=\"c\">&lt;!-- config added for using a web reference --&gt;</span> <span class=\"nt\">&lt;applicationsettings&gt;</span> <span class=\"nt\">&lt;mywebapp.properties.settings&gt;</span> <span class=\"nt\">&lt;setting</span> <span class=\"na\">name=</span><span class=\"s\">\"MyWebApp_MyWebService_TranslateToFrenchService\"</span> <span class=\"na\">serializeas=</span><span class=\"s\">\"String\"</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;value&gt;</span> https://rodansotto.github.io/asmx/TranslateToFrenchService.asmx <span class=\"nt\">&lt;/value&gt;</span> <span class=\"nt\">&lt;/setting&gt;</span> <span class=\"nt\">&lt;/mywebapp.properties.settings&gt;</span> <span class=\"nt\">&lt;/applicationsettings&gt;</span> <span class=\"nt\">&lt;/configuration&gt;</span> \n</code></pre></div></div>\n\n<div class=\"language-cs highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">protected</span> <span class=\"k\">void</span> <span class=\"nf\">TranslateButton_Click</span><span class=\"p\">(</span><span class=\"kt\">object</span> <span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">EventArgs</span> <span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">EnglishTextBox</span><span class=\"p\">.</span><span class=\"n\">Text</span> <span class=\"p\">!=</span> <span class=\"kt\">string</span><span class=\"p\">.</span><span class=\"n\">Empty</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">try</span> <span class=\"p\">{</span> <span class=\"c1\">// consuming a web service using a web reference MyWebService.TranslateToFrenchService service = new MyWebService.TranslateToFrenchService(); FrenchLabel.Text = service.TranslateToFrench(EnglishTextBox.Text); } catch (Exception) { throw; } } } </span>\n</code></pre></div></div>\n\n<p>Ok so that’s how you consume a web service using proxy.  This post has turned out to be longer than I expected so I decided to break this down into multiple parts, thus part 1 of this post ends here.  I will continue with consuming a web service using HTTP POST method on part 2.</p>\n"
    } ,
  
    {
      "title"    : "SQL Server: Schemas, DELETE vs. TRUNCATE, Generate INSERTs, and NOT IN vs. NOT EXISTS",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2015/01/01/sql-server-schemas-delete-vs-truncate-generate-inserts-and-not-in-vs-not-exists.html",
      "date"     : "2015-01-01 00:00:00 +0000",
      "content": "<p><strong>Schemas</strong></p>\n\n<p><a href=\"http://dataeducation.com/blog/data-organization-using-schemas\">Data Organization Using Schemas</a> best explains with clear examples what schema in SQL Server is.  Important things to note are:</p>\n\n<ul>\n  <li>\n    <p>Schemas were first introduced in SQL Server 2005.</p>\n  </li>\n  <li>\n    <p><em>dbo</em> in pre SQL Server 2005 was used as the default database owner but now it is used as the default schema.</p>\n  </li>\n  <li>\n    <p>Schema is analogous to namespace (as in namespace in C#), or a container used to store database objects.</p>\n  </li>\n  <li>\n    <p>Schema owner can be a Windows domain login, Windows local login, SQL Server login, Windows group, database role, server role, or application role.</p>\n  </li>\n  <li>\n    <p>Schemas are simpler to manage in terms of permissions and security.</p>\n  </li>\n  <li>\n    <p>Lastly, schemas can provide logical boundaries without the need to create multiple physical databases.</p>\n  </li>\n  <li>\n    <p>Additional readings:</p>\n    <ul>\n      <li>\n        <p><a href=\"http://www.praveenmodi.com/advantage-and-use-of-schemas-over-object-owners-in-sql-server-2005/\">Benefits of using Schema’s in SQL Server 2005/2008</a></p>\n      </li>\n      <li>\n        <p><a href=\"http://technet.microsoft.com/en-us/library/dd283095(v=sql.100).aspx\">SQL Server Best Practices – Implementation of Database Object Schemas</a></p>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<p><strong>DELETE vs. TRUNCATE</strong></p>\n\n<p>Sometimes deleting so many rows in a SQL Server table takes up a loooong time.  If rolling back data does not matter, use TRUNCATE instead.</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">TRUNCATE</span> <span class=\"k\">TABLE</span> <span class=\"n\">dbo</span><span class=\"p\">.</span><span class=\"n\">MyTable</span> \n</code></pre></div></div>\n\n<p><strong>Generate INSERTs</strong></p>\n\n<p>I used to use a script I got from the Internet that generates INSERT statements from a table so I can repopulate the table next time with same data, or populate a similar table in another database for example.  Recently I found another alternative in SQL Server Management Studio with the <em>Generate Scripts…</em> database task.  Just right-click on the database where the table you want to generate INSERTs from is, go to <em>Tasks</em>, and click <em>Generate Scripts…</em>.  Go over the steps and make sure on the scripting options, by clicking the <em>Advanced</em> button, that you select <em>Data only</em> for the <em>Types of data to script</em> under the <em>General</em> options.  This will generate the INSERT statements.</p>\n\n<p><strong>NOT IN vs. NOT EXISTS</strong></p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"n\">ProductID</span> <span class=\"k\">FROM</span> <span class=\"n\">Products</span> <span class=\"k\">WHERE</span> <span class=\"n\">ProductID</span> <span class=\"k\">NOT</span> <span class=\"k\">IN</span> <span class=\"p\">(</span> <span class=\"k\">SELECT</span> <span class=\"n\">ProductID</span> <span class=\"k\">FROM</span> <span class=\"n\">OrderDetails</span> <span class=\"p\">)</span>\n\n<span class=\"c1\">-- versus</span>\n\n<span class=\"k\">SELECT</span> <span class=\"n\">ProductID</span> <span class=\"k\">FROM</span> <span class=\"n\">Products</span> <span class=\"n\">p</span> <span class=\"k\">WHERE</span> <span class=\"k\">NOT</span> <span class=\"k\">EXISTS</span> <span class=\"p\">(</span> <span class=\"k\">SELECT</span> <span class=\"mi\">1</span> <span class=\"k\">FROM</span> <span class=\"n\">OrderDetails</span> <span class=\"n\">od</span> <span class=\"k\">WHERE</span> <span class=\"n\">od</span><span class=\"p\">.</span><span class=\"n\">ProductID</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">ProductID</span> <span class=\"p\">)</span> \n</code></pre></div></div>\n\n<p>I am not talking about the performance difference between these two SQL operations but rather the functional difference between them.  It might be tempting to say they are the same but it is not.  NOT IN will not behave as one expects when the column used for comparison in the subquery contains NULL values (OrderDetails.ProductID in the example above).  The article <a href=\"http://sqlinthewild.co.za/index.php/2010/02/18/not-exists-vs-not-in/\">NOT EXISTS vs NOT IN</a> explains why.</p>\n\n<ul>\n  <li>Additional readings:\n    <ul>\n      <li>\n        <p><a href=\"http://weblogs.sqlteam.com/mladenp/archive/2007/05/18/60210.aspx\">SQL Server: JOIN vs IN vs EXISTS - the logical difference</a></p>\n      </li>\n      <li>\n        <p><a href=\"http://stackoverflow.com/questions/173041/not-in-vs-not-exists\">NOT IN vs NOT EXISTS (from stackoverflow)</a></p>\n      </li>\n    </ul>\n  </li>\n</ul>\n"
    } ,
  
    {
      "title"    : "The Very Basic Syntax of Razor",
      "category" : "asp-net-mvc",
      "tags"     : "",
      "url"      : "/tech-blog/2014/12/26/the-very-basic-syntax-of-razor.html",
      "date"     : "2014-12-26 00:00:00 +0000",
      "content": "<p>If you have worked in ASP.NET MVC, you know that the default view engine (or templating engine) is Razor, much like the .aspx/.ascx/.master file templates in ASP.NET Web Forms.  One thing I like about Razor is that you can use C# or VB.NET as the programming language to code in Razor.  All you need to do is learn how to use the Razor syntax.</p>\n\n<p>So here I present to you the very basic syntax you need to know about Razor.  In the code below I am using C#, my preferred language.  You can view the generated HTML page <a href=\"https://rodansotto.github.io/mvc4/razorcsdemo\">here</a>.</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span><span class=\"err\">\\</span><span class=\"nt\">&gt;</span>\n    \n<span class=\"nt\">&lt;h1</span><span class=\"err\">\\</span><span class=\"nt\">&gt;</span>Razor Demo Using C#<span class=\"nt\">&lt;/h1</span><span class=\"err\">\\</span><span class=\"nt\">&gt;</span>\n    \n@*  \n   Razor comments can be one line or multiple lines.\n   Unlike HTML comments, Razor comments are not rendered to the page.\n*@\n    \n@{\n   @* You can add Razor comments inside the Razor code block such as this. *@\n}\n    \n@{\n   // But why use Razor comments when you can use C# comments.\n   /*\n    * C# multi-line comment\n    */\n}\n    \n@*  \n   Razor code starts with @ character.\n   It can be a single statement block, an inline expression,\n    or a multi-statement block.\n   Once you start your code with @, all of the .NET framework,\n    ASP.NET, and all the C# features are available to you.\n*@\n    \n@* An example of a Razor single statement block: *@\n@{ var myGreeting = \"<span class=\"nt\">&lt;Hello</span><span class=\"err\">,</span> <span class=\"na\">World</span><span class=\"err\">!</span><span class=\"nt\">&gt;</span>\"; } \n    \n@* \n   Below is an example of a Razor inline expression.\n   Note that the output from server code is automatically HTML-encoded.\n    <span class=\"nt\">&lt;</span> <span class=\"nt\">and</span> <span class=\"nt\">&gt;</span> characters in the variable myGreeting will automatically\n    be encoded to <span class=\"ni\">&amp;lt;</span> and <span class=\"ni\">&amp;gt;</span> so it can be displayed properly\n    in the browser.  You can check the page source to verify this.\n*@\n<span class=\"nt\">&lt;p</span><span class=\"err\">\\</span><span class=\"nt\">&gt;</span>The value of myGreeting is: @myGreeting<span class=\"nt\">&lt;/p</span><span class=\"err\">\\</span><span class=\"nt\">&gt;</span>\n    \n@* \n   A Razor inline expression can be multi-token if enclosed in ()\n    as in example below.\n   Note that () can also be used to explicitly declare a Razor\n    inline expression.\n*@\n<span class=\"nt\">&lt;p</span><span class=\"err\">\\</span><span class=\"nt\">&gt;</span>@(\"The value of myGreeting is: \" + myGreeting)<span class=\"nt\">&lt;/p</span><span class=\"err\">\\</span><span class=\"nt\">&gt;</span>\n    \n@* Here is an example of a Razor multi-statement block *@\n@{\n    var myGreeting2 = \"Hello, Universe!\";\n    var myDate = DateTime.Today.ToString(\"MMMM dd, yyyy\");   \n}\n    \n<span class=\"nt\">&lt;p</span><span class=\"err\">\\</span><span class=\"nt\">&gt;</span>@myGreeting2 Today is @myDate.<span class=\"nt\">&lt;/p</span><span class=\"err\">\\</span><span class=\"nt\">&gt;</span>\n    \n@*\n    You will notice in the previous examples of Razor code blocks, \n     be they single or multi-statement blocks, are enclosed in {}.\n     They don't have to be always enclosed in {}.\n     Take for example the if statement below.  \n     Since it is essentially a single statement, \n     it can follow the @ character immediately.\n     The same goes with for, foreach, switch, etc.\n*@\n    \n@{ var myMsg = \"\"; }\n    \n@if (IsPost) \n{\n    myMsg = \"This is a postback!\";\n}\nelse\n{\n    myMsg = \"This is not a postback.\";\n}\n \n<span class=\"nt\">&lt;p</span><span class=\"err\">\\</span><span class=\"nt\">&gt;</span>@myMsg<span class=\"nt\">&lt;p</span><span class=\"err\">\\</span><span class=\"nt\">&gt;</span>\n    \n@*\n    You can also mix text and markup in the code block.\n*@\n    \n@if (true)\n{\n    // Mixing markup in code is as easy as putting in the matching HTML tags.\n    <span class=\"nt\">&lt;p</span><span class=\"err\">\\</span><span class=\"nt\">&gt;</span>The value of IsPost is: @IsPost<span class=\"nt\">&lt;/p</span><span class=\"err\">\\</span><span class=\"nt\">&gt;</span>\n    \n    // You can use @: or <span class=\"nt\">&lt;text&gt;</span> to render plain text.\n    // If you check the page source, these plain texts are not enclosed in\n    //  any HTML tags.\n    @:This is plain text.\n    <span class=\"nt\">&lt;br</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;text&gt;</span>Another plain text.<span class=\"nt\">&lt;/text&gt;</span>\n    <span class=\"nt\">&lt;br</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;br</span> <span class=\"nt\">/&gt;</span>\n}\n    \n<span class=\"nt\">&lt;/div</span><span class=\"err\">\\</span><span class=\"nt\">&gt;</span>\n</code></pre></div></div>\n\n<p>Additional Resources:</p>\n\n<ul>\n  <li><a href=\"http://www.asp.net/web-pages/overview/getting-started/introducing-razor-syntax-(c)\">Introduction to ASP.NET Web Programming Using the Razor Syntax (C#)</a></li>\n  <li><a href=\"http://haacked.com/archive/2011/01/06/razor-syntax-quick-reference.aspx/\">C# Razor Syntax Quick Reference</a></li>\n  <li><a href=\"http://www.w3schools.com/aspnet/razor_intro.asp\">ASP.NET Razor from W3Schools</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "New to Active Directory and need to use it in .NET?",
      "category" : "net",
      "tags"     : "",
      "url"      : "/tech-blog/2014/10/27/new-to-active-directory-and-need-to-use-it-in-net.html",
      "date"     : "2014-10-27 00:00:00 +0000",
      "content": "<p>Don’t worry, it’s easier than you think. </p>\n\n<p><em>AD Explorer</em></p>\n\n<p>If you haven’t seen what <em>Active Directory (AD)</em> looks like, you can use a free AD viewer application, like the <a href=\"http://technet.microsoft.com/en-us/sysinternals/bb963907.aspx\">AD Explorer</a>.  I would recommend downloading it because it’s a useful tool in navigating the tree structure of an AD and viewing the object properties or attributes that you want to use in your .NET program.</p>\n\n<p><em>Logging In To AD</em></p>\n\n<p>When using an AD viewer application, you will need to login to the AD and provide your Windows user login and password.  Usually the AD would be the domain name your computer is logged into.</p>\n\n<p>Two ways to determine the domain your computer is logged into.  One is from <em>Control Panel –&gt; System</em> and there will be a <em>Domain:</em> entry if you are logged into one.  Another way is looking at the environment variable <em>USERDOMAIN</em>.  From the command prompt, type <em>set user</em> and press <em>ENTER</em>.  Look at the <em>USERDOMAIN=</em> entry.  If it does not contain your computer name, then it should be the AD name.  For a more detailed instruction, click <a href=\"https://www.cites.illinois.edu/network/activedirectory.html\">here</a>.</p>\n\n<p><em>Distinguished Names</em></p>\n\n<p>Once you get into the AD, you will see the AD tree structure and each item in the tree structure is an object.  Each object can be uniquely identified by it’s <em>distinguished name (DN)</em> or path and contains a sequence of <em>RDN_s connected by commas.  _RDN_s are _relative distinguished names</em> and they are basically attributes with associated values.  You can find a list of typical RDNs <a href=\"http://msdn.microsoft.com/en-us/library/aa366101(v=vs.85).aspx\">here</a> with some examples of distinguished names and a table listing the reserved characters that need to be escaped when used in attribute values.</p>\n\n<p><em>AD Objects in .NET</em></p>\n\n<p>To get starting coding AD in .NET, you will need to reference <em>System.DirectoryServices</em> in your program and add the following statement:</p>\n\n<p>using System.DirectoryServices;</p>\n\n<p>And the two objects that you need to use are: <em>DirectoryEntry</em> and <em>DirectorySearcher</em>.</p>\n\n<p>You use <em>DirectoryEntry</em> in which to bind the object in the AD tree to.  You  need to supply the provider (usually it’s <em>LDAP:</em>// ) and the path which can include the AD name.  The example below is querying an AD user.</p>\n\n<p>// sADName would be the AD you want to log into<br />\nstring sADName = “addomain.com”;</p>\n\n<p>// sDN would be the distinguished name or path of an object in the AD tree<br />\nstring sDN = “CN=Users,DC=addomain,DC=com”;</p>\n\n<p>// create an instance of DirectoryEntry supplying in the provider and path<br />\n// in example below, provider is LDAP:// and path is the combination of <br />\n//  AD name and distinguished name<br />\nDirectoryEntry adEntry = <br />\n    new DirectoryEntry(@”LDAP://” + sADName + “/” + sDN);</p>\n\n<p>// read the property or attribute of an AD object, <br />\n//  such as the user’s display name<br />\nMessageBox.Show(adEntry.Properties[“displayName”].Value.ToString();</p>\n\n<p>For a list of all attributes defined by AD, click <a href=\"http://msdn.microsoft.com/en-us/library/ms675090(v=vs.85).aspx\">here</a>.  The list there does not show the attribute names to use in the <em>Properties</em> collection of the <em>DirectoryEntry</em> object.  When you click an attribute in the list, it will show the detailed information about the attribute.  The attribute name to use should be under the <em>Ldap-Display-Name</em>.</p>\n\n<p>You use <em>DirectorySearcher</em> when you want to search AD, say for example users with Smith as their last names.</p>\n\n<p>// you pass in an instance of the DirectoryEntry object containing the root <br />\n//  or path in AD as a starting point to search from, to DirectorySearcher<br />\nDirectoryEntry adEntry = <br />\n    new DirectoryEntry(@”LDAP://addomain.com/DC=addomain,DC=com”);<br />\nDirectorySearcher adSearch = new DirectorySearcher(adEntry);</p>\n\n<p>// set the filter<br />\nadSearch.Filter = “(&amp;(objectCLass=user)(sn=Smith))”;</p>\n\n<p>// then search<br />\nSearchResultCollection adResultCol = adSearch.FindAll();<br />\nlistBoxResults.DataSource =<br />\n    (from SearchResult r in adResultCol<br />\n     select new<br />\n     {<br />\n         Value = r.GetDirectoryEntry().Properties[“distinguishedName”]<br />\n                    .Value.ToString(),<br />\n         Text = r.GetDirectoryEntry().Properties[“displayName”]<br />\n                    .Value.ToString()<br />\n     }<br />\n    ).ToList();</p>\n\n<p>For more details on the search filter syntax, click <a href=\"http://msdn.microsoft.com/en-us/library/aa746475(v=vs.85).aspx\">here</a>.</p>\n\n<p><em>Other Resources</em></p>\n\n<ul>\n  <li><a href=\"http://msdn.microsoft.com/en-us/library/ws96bs11(VS.71).aspx\">Active Directory Technology Backgrounder</a></li>\n  <li><a href=\"http://msdn.microsoft.com/en-us/library/x8wxt72e(v=vs.71).aspx\">Creating DirectoryEntry Component Instances</a></li>\n  <li><a href=\"http://www.codeproject.com/Articles/18102/Howto-Almost-Everything-In-Active-Directory-via-C#27\">Howto: (Almost) Everything In Active Directory via C#</a></li>\n  <li><a href=\"http://www.openldap.org/faq/data/cache/294.html\">MS Outlook: How Do LDAP Attributes Map to Address Book Fields?</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "SQL Server: Quickly run a command on each database.  How?",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2014/10/07/sql-server-quickly-run-a-command-on-each-database-how.html",
      "date"     : "2014-10-07 00:00:00 +0000",
      "content": "<p>Well it so happens that there is an undocumented stored procedure that you can use to do so and has been in SQL Server for some time now.  This will definitely be handy if you are a software developer that does not like to code with cursor in SQL.  I tested this in SQL Server 2008 R2 and the stored procedure is still there.  Remind you that this stored procedure is undocumented and probably not supported and thus might not exist in future versions of SQL Server.  And there is also a version for table as well.  Pretty cool eh.  See sample usage below.</p>\n\n<p>-- execute the following command on each database\nEXEC sp_MSforeachdb ‘PRINT ‘’?’’’</p>\n\n<p>-- execute the following command on each table in the database\nUSE MyDatabase\nEXEC sp_MSforeachtable ‘PRINT ‘’?’’’;</p>\n\n<p>-- the following uses a filter\n-- it makes sure command will not execute on master, tempDB, model, and msdb\nEXEC sp_MSforeachdb ‘\nIF ‘’?’’  NOT IN (‘‘master’’, ‘‘tempDB’’, ‘‘model’’, ‘‘msdb’’)\nBEGIN\n       PRINT ‘’?’’\nEND’</p>\n\n<p> </p>\n\n<p> </p>\n\n<p>Below are links to more information:</p>\n\n<ul>\n  <li><a href=\"http://weblogs.sqlteam.com/joew/archive/2008/08/27/60700.aspx\">The undocumented sp_MSforeachdb procedure</a></li>\n  <li><a href=\"http://weblogs.sqlteam.com/joew/archive/2007/10/23/60383.aspx\">The undocumented sp_MSforeachtable procedure</a></li>\n  <li><a href=\"http://www.codeproject.com/Articles/459536/SQL-Server-Applying-Filter-on-sp-MSforeachDB\">SQL Server: Applying Filter on sp_MSforeachDB</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "Is that a VB code or C#?",
      "category" : "c-sharp",
      "tags"     : "",
      "url"      : "/tech-blog/2014/09/05/is-that-a-vb-code-or-c.html",
      "date"     : "2014-09-05 00:00:00 +0000",
      "content": "<p>Ok, so the below code got me confused for a moment and I had to verify a couple of times if I am in the right language environment :).</p>\n\n<p>int myNumber = 1;<br />\nstring myString = myNumber as string;</p>\n\n<p>My initial question is, what’s the <em>as</em> keyword doing in a C# code?  Is that a variable declaration like in VB?  As it turned out, it’s another operator in C# that performs like a cast operation but instead of raising an exception if the conversion is not possible, it returns <em>null</em>.  So there you go, next time you see <em>as</em> keyword in C#, you are not hallucinating :).</p>\n"
    } ,
  
    {
      "title"    : "Storing an Excel File in a SQL Server Database",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2014/07/09/storing-an-excel-file-in-a-sql-server-database.html",
      "date"     : "2014-07-09 00:00:00 +0000",
      "content": "<p>If you have a table with an <a href=\"http://msdn.microsoft.com/en-us/library/ms187993(v=sql.105).aspx\">image</a> data type field where you store an Excel file or any file for that matter, and you need to update a particular record with a new file, you can use <a href=\"http://msdn.microsoft.com/en-us/library/ms190312(v=sql.105).aspx\">OPENROWSET</a>.</p>\n\n<p>UPDATE MyTable\nSET MyImageField = (\n    SELECT * \n    FROM OPENROWSET(BULK N’C:\\MyExcelFile.xls’, SINGLE_BLOB) AS MyFile\n)\nFROM MyTable\nWHERE …</p>\n\n<p> </p>\n\n<p> </p>\n\n<p>One disadvantage of using this is that the file you are storing needs to be accessible by the SQL Server.</p>\n"
    } ,
  
    {
      "title"    : "SSRS: Automating Report Deployment using RS.EXE",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2014/06/24/ssrs-automating-report-deployment-using-rs-exe.html",
      "date"     : "2014-06-24 00:00:00 +0000",
      "content": "<p>I was looking for a way to deploy reports on the production server without going through the Report Manager and deploying one report at a time.  Then I stumbled upon <a href=\"http://msdn.microsoft.com/en-us/library/ms162839(v=sql.105).aspx\">RS.EXE</a>, a scripting hosting utility that uses VB.NET script.  With VB.NET script you can deploy all your reports.</p>\n\n<p>But how do you deploy SSRS reports in VB.NET?  Instead of creating one from scratch I searched the Internet and found one from John Desch’s blog <a href=\"http://blogs.msdn.com/b/johndesch/archive/2012/12/17/using-the-rs-exe-utility-to-deploy-a-report-server-project-and-shared-dataset.aspx\">Using the RS.EXE utility to deploy a Report Server Project and Shared Dataset</a>.  It was said to be one of the best automated script available but one of the problems with the script is it does not support 2008SP1 which I need it to.</p>\n\n<p>Good thing I found another script based on John Desch’s script but with enhancements including support for 2008SP1.  I found the script from Nishar’s blog <a href=\"http://www.sqlblogspot.com/2014/03/ssrs-deploymentcomplete-automation2012.html\">SSRS Deployment–Complete Automation–2012 &amp; 2008</a>. </p>\n\n<p>I slightly modified the <em>Commonscript.rss</em> file for my own purposes.</p>\n\n<p>‘Begin Script</p>\n\n<p>Dim definition As [Byte]() = Nothing</p>\n\n<p>Dim bytedefinition As [Byte]() = Nothing</p>\n\n<p>Dim warnings As Warning() = Nothing</p>\n\n<p>‘Main Entry point of utility</p>\n\n<p>Public Sub Main()</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Console.WriteLine()  \n  \nConsole.WriteLine(\"Initiating Deployment\")  \n  \nrs.Credentials = System.Net.CredentialCache.DefaultCredentials  \n  \nTry  \n  \n    'Create the shared data source  \n  \n    CreateFolders(DataSourceFolderName, \"/\", \"\", \"Visible\")  \n  \n    'Create the folder that will contain the shared data sets  \n  \n    'CreateFolders(DataSetFolderName, \"/\", \"\", \"Visible\")  \n  \n    'Create the folder that will contain the deployed reports  \n  \n    CreateFolders(ReportFolderName, \"/\", \"\", \"Visible\")  \n  \nCatch goof As Exception  \n  \n    Console.WriteLine(goof.Message)  \n  \nEnd Try  \n  \nReadFiles(ReportSourcePath, \"*.rds\")  \n  \n'ReadFiles(ReportSourcePath, \"*.rsd\")  \n  \nReadFiles(ReportSourcePath, \"*.rdl\")  \n  \n'Publish the report  \n  \n'PublishReport(ReportName)  \n  \n'UpdateDataSources(ReportFolderName, DataSourcePath)  \n</code></pre></div></div>\n\n<p>End Sub</p>\n\n<p>‘Utility for creation of folders</p>\n\n<p>Public Sub CreateFolders(ByVal folderName As String, ByVal parentPath As String, ByVal description As String, ByVal visible As String)</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Console.WriteLine()  \n  \nConsole.WriteLine(\"Checking for Target Folders\")  \n  \n'CatalogItem properties  \n  \nDim descriptionProp As New \\[Property\\]  \n  \ndescriptionProp.Name = \"Description\"  \n  \ndescriptionProp.Value = description  \n  \nDim visibleProp As New \\[Property\\]  \n  \nvisibleProp.Name = \"Visible\"  \n  \nvisibleProp.value = visible  \n  \nDim props(1) As \\[Property\\]  \n  \nprops(0) = descriptionProp  \n  \nprops(1) = visibleProp  \n  \nTry  \n  \n    rs.CreateFolder(folderName, parentPath, props)  \n  \n    Console.WriteLine(\"Folder {0} successfully created\", foldername)  \n  \nCatch goof As SoapException  \n  \n    If goof.Message.Indexof(\"AlreadyExists\") &gt; 0 Then  \n  \n        Console.WriteLine(\"Folder {0} already exists\", foldername)  \n  \n    End If  \n  \nEnd Try  \n</code></pre></div></div>\n\n<p>End Sub</p>\n\n<p>‘Utility for reading files from the Report Sevices Project</p>\n\n<p>Public Sub ReadFiles(filepath As String, fileextension As String)</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Console.WriteLine()  \n  \nConsole.WriteLine(\"Reading Files from Report Services Project\")  \n  \nDim rptdirinfo As System.IO.DirectoryInfo  \n  \nrptdirinfo = New System.IO.DirectoryInfo(filepath)  \n  \nDim filedoc As FileInfo()  \n  \nfiledoc = rptdirinfo.GetFiles(fileextension)  \n  \nTry  \n  \n    For rptcount As Integer = 0 To filedoc.Length - 1  \n  \n        If Not filedoc(rptcount).Name.ToString.Trim.ToUpper.Contains(\"BACKUP\") Then  \n  \n            Select Case fileextension  \n  \n                Case \"*.rds\"  \n  \n                    CreateDataSource(filedoc(rptcount).tostring.trim)  \n  \n                Case \"*.rsd\"  \n  \n                    CreateDataSet(filedoc(rptcount).tostring.trim)  \n  \n                Case \"*.rdl\"  \n  \n                    PublishReport(filedoc(rptcount).tostring.trim)  \n  \n            End Select  \n  \n        End If  \n  \n    Next  \n  \nCatch goof As Exception  \n  \n    Console.WriteLine(\"In ReadFiles \" + goof.message)  \n  \nEnd Try  \n</code></pre></div></div>\n\n<p>End Sub</p>\n\n<p>‘Utility for Creating Shared Data Sets contained in the project</p>\n\n<p>Public Sub CreateDataSet(ByVal filename As String)</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Dim valstart As Integer  \n  \nDim valend As Integer  \n  \nDim DSDefinitionStr As String  \n  \nDim DataSourceName As String  \n  \nDim QueryString As String  \n  \nTry  \n  \n    Dim stream As FileStream = File.OpenRead(ReportSourcePath + \"\\\\\" + filename)  \n  \n    definition = New \\[Byte\\](stream.Length - 1) {}  \n  \n    stream.Read(definition, 0, CInt(stream.Length))  \n  \n    stream.Close()  \n  \n    For i As Integer = 0 To definition.Length - 1  \n  \n        DSDefinitionStr = DSDefinitionStr + Convert.ToString(Convert.ToChar(Convert.ToInt16(definition(i).ToString)))  \n  \n    Next  \n  \n    valstart = DSDefinitionStr.ToString.Indexof(\"&lt;DataSourceReference&gt;\")  \n  \n    If valstart &gt; 0 Then  \n  \n        valstart = DSDefinitionStr.ToString.IndexOf(\"&lt;DataSourceReference&gt;\") + 21  \n  \n        valend = DSDefinitionStr.ToString.IndexOf(\"&lt;/DataSourceReference&gt;\")  \n  \n        DataSourceName = DSDefinitionStr.ToString.Substring(valstart, valend - valstart)  \n  \n        Console.WriteLine(DataSourceName)  \n  \n    End If  \n  \nCatch e As IOException  \n  \n    Console.WriteLine(e.Message)  \n  \nEnd Try  \n  \nfilename = filename.tostring.replace(\".rsd\", \"\")  \n  \nConsole.WriteLine(\"Attempting to Deploy DataSet {0}\", filename)  \n  \nTry  \n  \n    Dim item As CatalogItem  \n  \n    item = rs.CreateCatalogItem(\"DataSet\", filename, \"/\" + DataSetFolderName, True, definition, Nothing, warnings)  \n  \n    If Not (warnings Is Nothing) Then  \n  \n        Dim warning As Warning  \n  \n        For Each warning In warnings  \n  \n            If warning.message.tostring.tolower.contains(\"refers to the shared data source\") Then  \n  \n                Console.WriteLine(\"Connecting DataSet {0} to Data Source {1}\", filename, DataSourceName)  \n  \n                Dim referenceData() As ItemReferenceData = rs.GetItemReferences(\"/\" + DataSetFolderName + \"/\" + filename, \"DataSet\")  \n  \n                Dim references(0) As ItemReference  \n  \n                Dim reference As New ItemReference()  \n  \n                Dim datasourceURL = \"/\" + DataSourcePath + \"/\" + DataSourceName  \n  \n                reference.name = referenceData(0).Name  \n  \n                Console.WriteLine(\"Reference name = \" + reference.name)  \n  \n                reference.Reference = datasourceURL  \n  \n                references(0) = reference  \n  \n                rs.SetItemReferences(\"/\" + DataSetFolderName + \"/\" + filename, references)  \n  \n            Else  \n  \n                Console.WriteLine(warning.Message)  \n  \n            End If  \n  \n        Next warning  \n  \n    Else  \n  \n        Console.WriteLine(\"DataSet: {0} published successfully with no warnings\", filename)  \n  \n    End If  \n  \nCatch goof As SoapException  \n  \n    If goof.Message.Indexof(\"AlreadyExists\") &gt; 0 Then  \n  \n        Console.WriteLine(\"The DataSet {0} already exists\", fileName.ToString)  \n  \n    Else  \n  \n        If goof.Message.IndexOf(\"published\") = -1 Then  \n  \n            Console.Writeline(goof.Message)  \n  \n        End If  \n  \n    End If  \n  \nEnd Try  \n  \n'UpdateDataSetSources(filename,DataSetFolderName, DataSourceFolderName,DataSourceName)  \n</code></pre></div></div>\n\n<p>End Sub</p>\n\n<p>‘Utility for creating Data Sources on the Server</p>\n\n<p>Public Sub CreateDataSource(filename As String)</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'Define the data source definition.  \n  \nDim dsDefinition As New DataSourceDefinition()  \n  \nDim DataSourceName As String  \n  \nDim valstart As Integer  \n  \nDim valend As Integer  \n  \nDim ConnectionString As String  \n  \nDim Extension As String  \n  \nDim IntegratedSec As String  \n  \nDim DataSourceID As String  \n  \nDim PromptStr As String  \n  \nPromptStr = \"\"  \n  \nDim DSDefinitionStr As String  \n  \nDSDefinitionStr = \"\"  \n  \nDataSourceName = filename.tostring.trim.substring(0, filename.tostring.trim.length - 4)  \n  \nConsole.WriteLine(\"Attempting to Deploy Data Source {0}\", DataSourceName)  \n  \nTry  \n  \n    Dim stream As FileStream = File.OpenRead(ReportSourcePath + \"\\\\\" + filename)  \n  \n    bytedefinition = New \\[Byte\\](stream.Length - 1) {}  \n  \n    stream.Read(bytedefinition, 0, CInt(stream.Length))  \n  \n    stream.Close()  \n  \n    For i As Integer = 0 To bytedefinition.Length - 1  \n  \n        DSDefinitionStr = DSDefinitionStr + Convert.ToString(Convert.ToChar(Convert.ToInt16(bytedefinition(i).ToString)))  \n  \n    Next  \n  \nCatch goof As IOException  \n  \n    Console.WriteLine(goof.Message)  \n  \nEnd Try  \n  \nIf DSDefinitionStr.ToString.Contains(\"&lt;ConnectString&gt;\") And DSDefinitionStr.ToString.Contains(\"&lt;/ConnectString&gt;\") Then  \n  \n    valstart = DSDefinitionStr.ToString.IndexOf(\"&lt;ConnectString&gt;\") + 15  \n  \n    valend = DSDefinitionStr.ToString.IndexOf(\"&lt;/ConnectString&gt;\")  \n  \n    ConnectionString = DSDefinitionStr.ToString.Substring(valstart, valend - valstart)  \n  \nEnd If  \n  \nIf DSDefinitionStr.ToString.Contains(\"&lt;Extension&gt;\") And DSDefinitionStr.ToString.Contains(\"&lt;/Extension&gt;\") Then  \n  \n    valstart = DSDefinitionStr.ToString.IndexOf(\"&lt;Extension&gt;\") + 11  \n  \n    valend = DSDefinitionStr.ToString.IndexOf(\"&lt;/Extension&gt;\")  \n  \n    Extension = DSDefinitionStr.ToString.Substring(valstart, valend - valstart)  \n  \nEnd If  \n  \nIf DSDefinitionStr.ToString.Contains(\"&lt;IntegratedSecurity&gt;\") And DSDefinitionStr.ToString.Contains(\"&lt;/IntegratedSecurity&gt;\") Then  \n  \n    valstart = DSDefinitionStr.ToString.IndexOf(\"&lt;IntegratedSecurity&gt;\") + 20  \n  \n    valend = DSDefinitionStr.ToString.IndexOf(\"&lt;/IntegratedSecurity&gt;\")  \n  \n    IntegratedSec = DSDefinitionStr.ToString.Substring(valstart, valend - valstart)  \n  \nEnd If  \n  \nIf DSDefinitionStr.ToString.Contains(\"&lt;DataSourceID&gt;\") And DSDefinitionStr.ToString.Contains(\"&lt;/DataSourceID&gt;\") Then  \n  \n    valstart = DSDefinitionStr.ToString.IndexOf(\"&lt;DataSourceID&gt;\") + 14  \n  \n    valend = DSDefinitionStr.ToString.IndexOf(\"&lt;/DataSourceID&gt;\")  \n  \n    DataSourceID = DSDefinitionStr.ToString.Substring(valstart, valend - valstart)  \n  \nEnd If  \n  \nIf DSDefinitionStr.ToString.Contains(\"&lt;Prompt&gt;\") And DSDefinitionStr.ToString.Contains(\"&lt;/Prompt&gt;\") Then  \n  \n    valstart = DSDefinitionStr.ToString.IndexOf(\"&lt;Prompt&gt;\") + 8  \n  \n    valend = DSDefinitionStr.ToString.IndexOf(\"&lt;/Prompt&gt;\")  \n  \n    PromptStr = DSDefinitionStr.ToString.Substring(valstart, valend - valstart)  \n  \nEnd If  \n  \ndsdefinition.CredentialRetrieval = CredentialRetrievalEnum.Integrated  \n  \ndsdefinition.ConnectString = ConnectionString  \n  \ndsdefinition.Enabled = True  \n  \ndsdefinition.EnabledSpecified = True  \n  \ndsdefinition.Extension = extension  \n  \ndsdefinition.ImpersonateUser = False  \n  \ndsdefinition.ImpersonateUserSpecified = True  \n  \n'Use the default prompt string.  \n  \nIf PromptStr.ToString.Length = 0 Then  \n  \n    dsdefinition.Prompt = Nothing  \n  \nElse  \n  \n    dsdefinition.Prompt = PromptStr  \n  \nEnd If  \n  \ndsdefinition.WindowsCredentials = False  \n  \nTry  \n  \n    rs.CreateDataSource(DataSourceName, \"/\" + DataSourceFolderName, False, dsdefinition, Nothing)  \n  \n    Console.WriteLine(\"Data source {0} created successfully\", DataSourceName.ToString)  \n  \nCatch goof As SoapException  \n  \n    If goof.Message.Indexof(\"AlreadyExists\") &gt; 0 Then  \n  \n        Console.WriteLine(\"The Data Source name {0} already exists\", DataSourceName.ToString)  \n  \n    End If  \n  \nEnd Try  \n</code></pre></div></div>\n\n<p>End Sub</p>\n\n<p>‘Utility to Publish the Reports</p>\n\n<p>Public Sub PublishReport(ByVal reportName As String)</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Try  \n  \n    Dim stream As FileStream = File.OpenRead(ReportSourcePath + \"\\\\\" + reportName)  \n  \n    definition = New \\[Byte\\](stream.Length - 1) {}  \n  \n    stream.Read(definition, 0, CInt(stream.Length))  \n  \n    stream.Close()  \n  \nCatch e As IOException  \n  \n    Console.WriteLine(e.Message)  \n  \nEnd Try  \n  \nreportname = reportname.tostring.replace(\".rdl\", \"\")  \n  \nConsole.WriteLine(\"Attempting to Deploy Report Name {0}\", reportname.tostring)  \n  \nDim item As CatalogItem  \n  \n  \nTry  \n  \n    item = rs.CreateCatalogItem(\"Report\", reportname, \"/\" + ReportFolderName, True, definition, Nothing, warnings)  \n  \n    'warnings = rs.CreateCatalogItem(reportName, \"/\" + ReportFolderName, False, definition, Nothing)  \n  \n    If Not (warnings Is Nothing) Then  \n  \n        If item.Name &lt;&gt; \"\" Then  \n  \n            Console.WriteLine(\"Report: {0} published successfully with warnings\", reportName)  \n            UpdateDataSources_report(reportName)  \n            UpdateDataSet_report(reportName)  \n        Else  \n  \n            Dim warning As Warning  \n  \n            For Each warning In warnings  \n  \n                Console.WriteLine(warning.Message)  \n  \n            Next warning  \n  \n        End If  \n  \n    Else  \n  \n        Console.WriteLine(\"Report: {0} published successfully with no warnings\", reportName)  \n        UpdateDataSources_report(reportName)  \n        UpdateDataSet_report(reportName)  \n    End If  \n  \nCatch goof As SoapException  \n  \n    If goof.Message.Indexof(\"AlreadyExists\") &gt; 0 Then  \n  \n        Console.WriteLine(\"The Report Name {0} already exists\", reportName.ToString)  \n  \n    Else  \n  \n        If goof.Message.IndexOf(\"published\") = -1 Then  \n  \n            Console.WriteLine(goof.Message)  \n  \n        End If  \n  \n    End If  \n  \nEnd Try  \n</code></pre></div></div>\n\n<p>End Sub</p>\n\n<p>‘Utility to Update The Data Sources on the Server</p>\n\n<p>Public Sub UpdateDataSources(ReportFolderName As String, DataSourcePath As String)</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>rs.Credentials = System.Net.CredentialCache.DefaultCredentials  \n  \nDim item As CatalogItem  \n  \nDim items As CatalogItem()  \n  \nTry  \n  \n  \n  \n    items = rs.ListChildren(\"/\" + ReportFolderName, False)  \n  \n    For Each item In items  \n  \n        'Console.WriteLine(\"          update date source called     --------\"+ item.Path + \" -----------\")  \n  \n        If item.path.Indexof(\"rdl\") &gt; 0 And ReportName = \"\" Then  \n  \n            'Console.WriteLine(\"          update date source called     --------\"+ item.path.Indexof(\"rdl\").tostring() + \" -----------\")  \n  \n            Dim dataSources() As DataSource = rs.GetItemDataSources(item.Path)  \n  \n            For Each ds As DataSource In dataSources  \n  \n                Dim sharedDs(0) As DataSource  \n  \n                sharedDs(0) = GetDataSource(DataSourcePath, ds.Name)  \n  \n                rs.SetItemDataSources(item.Path, sharedDs)  \n  \n                Console.WriteLine(\"Set \" &amp; ds.Name &amp; \" datasource for \" &amp; item.Path &amp; \" report\")  \n  \n                'end if  \n            Next  \n  \n        End If  \n  \n    Next  \n  \n    If ReportName = \"\" Then  \n  \n        Console.WriteLine(\"Shared data source reference set for reports in the {0} folder.\", ReportFolderName)  \n  \n    End If  \n  \n  \n    If ReportName &lt;&gt; \"\" Then  \n  \n        '    Console.WriteLine(\"               \" + \"/\" + ReportFolderName + \"/\" + ReportName + \"  ------------- second  update called        ---------------------- \")  \n  \n        Dim dataSources() As DataSource = rs.GetItemDataSources(\"/\" + ReportFolderName + \"/\" + ReportName)  \n  \n        For Each ds As DataSource In dataSources  \n  \n            Dim sharedDs(0) As DataSource  \n  \n            sharedDs(0) = GetDataSource(DataSourcePath, ds.Name)  \n  \n            rs.SetItemDataSources(\"/\" + ReportFolderName + \"/\" + ReportName, sharedDs)  \n  \n            Console.WriteLine(\"Set \" &amp; ds.Name &amp; \" datasource for \" &amp; \"/\" + ReportFolderName + \"/\" + ReportName &amp; \" report\")  \n  \n            'end if  \n        Next  \n  \n        Console.WriteLine(\"All the shared data source reference set for report {0} \", \"/\" + ReportFolderName + \"/\" + ReportName)  \n  \n    End If  \n  \nCatch goof As SoapException  \n  \n    Console.WriteLine(goof.Detail.InnerXml.ToString())  \n  \nEnd Try  \n</code></pre></div></div>\n\n<p>End Sub</p>\n\n<p>‘Utility to Update The Data Sources on the Server</p>\n\n<p>Public Sub UpdateDataSources_report(ReportName As String)</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>rs.Credentials = System.Net.CredentialCache.DefaultCredentials  \n  \nDim item As CatalogItem  \n  \nDim items As CatalogItem()  \n  \nTry  \n  \n    'If ReportName &lt;&gt; \"\" then  \n  \n    '    Console.WriteLine(\"               \" + \"/\" + ReportFolderName + \"/\" + ReportName + \"  ------------- second  update called        ---------------------- \")  \n  \n    Dim dataSources() As DataSource = rs.GetItemDataSources(\"/\" + ReportFolderName + \"/\" + ReportName)  \n  \n    For Each ds As DataSource In dataSources  \n  \n        Dim sharedDs(0) As DataSource  \n  \n        sharedDs(0) = GetDataSource(DataSourcePath, ds.Name)  \n  \n        rs.SetItemDataSources(\"/\" + ReportFolderName + \"/\" + ReportName, sharedDs)  \n  \n        Console.WriteLine(\"Set \" &amp; ds.Name &amp; \" datasource for \" &amp; \"/\" + ReportFolderName + \"/\" + ReportName &amp; \" report\")  \n  \n        'end if  \n    Next  \n  \n    Console.WriteLine(\"All the shared data source reference set for report {0} \", \"/\" + ReportFolderName + \"/\" + ReportName)  \n  \n    'end if      \n  \n  \nCatch goof As SoapException  \n  \n    Console.WriteLine(goof.Detail.InnerXml.ToString())  \n  \nEnd Try  \n</code></pre></div></div>\n\n<p>End Sub</p>\n\n<p>‘Utility to link The Dataset with the Report</p>\n\n<p>Public Sub UpdateDataSet_report(ReportName As String)</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>rs.Credentials = System.Net.CredentialCache.DefaultCredentials  \n  \n  \nTry  \n  \n    Dim dataSets As ItemReferenceData() = rs.GetItemReferences(\"/\" + ReportFolderName + \"/\" + ReportName, \"DataSet\")  \n  \n    If dataSets IsNot Nothing AndAlso dataSets.Length &gt; 0 AndAlso Not String.IsNullOrEmpty(dataSets(0).Name) Then  \n  \n        For i As Integer = 0 To dataSets.Length - 1  \n  \n            Dim references(0) As ItemReference  \n            Dim sharedDataSet = New ItemReference()  \n            sharedDataSet.Name = dataSets(i).Name  \n            Console.WriteLine(\"Attempting to Link Dataset {0}\", dataSets(i).Name)  \n            sharedDataSet.Reference = \"/\" + DataSetFolderName + \"/\" + dataSets(i).Name  \n            references(0) = sharedDataSet  \n            rs.SetItemReferences(\"/\" + ReportFolderName + \"/\" + ReportName, references)  \n            Console.WriteLine(\"Report \" + ReportName + \" Linked to data set \" + \"/\" + DataSetFolderName + \"/\" + Convert.ToString(sharedDataSet.Name))  \n        Next  \n  \n    End If  \n  \nCatch goof As SoapException  \n  \n    Console.WriteLine(goof.Detail.InnerXml.ToString())  \n  \nEnd Try  \n</code></pre></div></div>\n\n<p>End Sub</p>\n\n<p>‘Function to Reference Data Sources</p>\n\n<p>Private Function GetDataSource(sharedDataSourcePath As String, dataSourceName As String) As DataSource</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Dim reference As New DataSourceReference()  \n  \nDim ds As New DataSource  \n  \nreference.Reference = \"/\" + sharedDataSourcePath &amp; \"/\" &amp; dataSourceName  \n  \nds.Item = CType(reference, DataSourceDefinitionOrReference)  \n  \nds.Name = dataSourceName  \n  \nConsole.WriteLine(\"Attempting to Link Data Source {0}\", ds.Name)  \n  \nGetDataSource = ds  \n</code></pre></div></div>\n\n<p>End Function</p>\n\n<p>I also modified the <em>deploy.bat</em> file as well.</p>\n\n<p>set ServerPath=http://localhost/ReportServer<br />\nset DataSourceFolderName=Data Sources<br />\nset DataSourcePath=Data Sources<br />\nset DataSetFolderName=Datasets<br />\nset ReportFolderName=My Reports<br />\nset ReportSourcePath=.\\My Reports<br />\nset ReportName=</p>\n\n<p>rs.exe <br />\n-i Commonscript.rss <br />\n-s %ServerPath% <br />\n-v DataSourceFolderName=”%DataSourceFolderName%” <br />\n-v DataSourcePath=”%DataSourcePath%” <br />\n-v DataSetFolderName=”%DataSetFolderName%” <br />\n-v ReportFolderName=”%ReportFolderName%” <br />\n-v ReportSourcePath=”%ReportSourcePath%” <br />\n-v ReportName=”%ReportName%” <br />\n-e Mgmt2010</p>\n"
    } ,
  
    {
      "title"    : "Demonstrating the new HTML5 and CSS3 Features",
      "category" : "web-design",
      "tags"     : "",
      "url"      : "/tech-blog/2014/06/04/demonstrating-the-new-html5-and-css3-features.html",
      "date"     : "2014-06-04 00:00:00 +0000",
      "content": "<p>Now that I have a public website with my own domain name, I decided to publish by web pages that demonstrate the new HTML5 and CSS3 features.  I will regularly update this post with links to my web pages.</p>\n\n<p>HTML5:</p>\n\n<ul>\n  <li>Form Input Types</li>\n  <li>Canvas (and WebGL)</li>\n  <li>SVG</li>\n  <li>Video and Audio</li>\n  <li>Geolocation</li>\n  <li>Drag/Drop</li>\n  <li>Web Storage</li>\n  <li>Application Cache</li>\n  <li>Web Workers</li>\n  <li>SSE (and WebSockets)</li>\n</ul>\n\n<p>CSS3:</p>\n\n<ul>\n  <li>Borders, Backgrounds, Gradients, Text Effects, and Fonts (Web Fonts)</li>\n  <li>2D and 3D Transforms</li>\n  <li>Transitions</li>\n  <li>Animations</li>\n  <li>Multiple Columns</li>\n  <li>Flexi Box Model</li>\n  <li>User Interface</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "Access: Type Mismatch Run-time Error After Converting to ACCDB Format",
      "category" : "ms-access",
      "tags"     : "",
      "url"      : "/tech-blog/2014/06/03/access-type-mismatch-run-time-error-after-converting-to-accdb-format.html",
      "date"     : "2014-06-03 00:00:00 +0000",
      "content": "<p>You might receive a <em>Run-time error ‘13’: Type mismatch</em> after converting a Microsoft Access database from .mdb to .accdb format.  The solution might be as easy as removing the reference to the ADO object library, if you are not using it.</p>\n\n<ul>\n  <li>Open the Access database in question.</li>\n  <li>Open the Visual Basic Editor (VBE) by pressing ALT+F11.</li>\n  <li>On the Tools menu, click References.</li>\n  <li>In the References dialog box, uncheck Microsoft ActiveX Data Objects, and click OK.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "C#: A Review on Generics",
      "category" : "c-sharp",
      "tags"     : "",
      "url"      : "/tech-blog/2014/05/27/c-a-review-on-generics.html",
      "date"     : "2014-05-27 00:00:00 +0000",
      "content": "<p>I think a good C# developer needs to get a handle on .NET generics.  Most of the advanced features in C# deal with lots of generics and having a very good understanding of generics will help considerably, most especially when dealing with generic delegates.  So here in this post, we will review generics.</p>\n\n<p><em>Generic type definitions</em> can be methods, classes, structures, and interfaces.</p>\n\n<p>// an example generic class\npublic class MyGenericClass<T>\n{\n    public T MyProperty;\n}</T></p>\n\n<p> </p>\n\n<p> </p>\n\n<p>The placeholders (e.g. **<T>**) are called _generic type parameters_, or _type parameters_.</T></p>\n\n<p>You specify the actual types to substitute for the type parameters during instantiation.</p>\n\n<p>// instantiate generic class with string type\nMyGenericClass&lt;string&gt; c = new MyGenericClass&lt;string&gt;();</p>\n\n<p> </p>\n\n<p> </p>\n\n<p>When instantiated, a generic type definition becomes a <em>constructed generic type</em>.</p>\n\n<p>You can place limits or <em>constraints</em> on generic type parameters.</p>\n\n<p>// limit type to value types except Nullable\npublic class MyGenericClass<T> where T : struct {/*...*/}</T></p>\n\n<p>// limit type to reference types which can include classes,\n//  interfaces, delegates, and array types\npublic class MyGenericClass<T> where T : class {/*...*/}</T></p>\n\n<p>// limit type to types with public parameterless constructor\n// must be specified last in multiple constraints\npublic class MyGenericClass<T> where T : new() {/*...*/}</T></p>\n\n<p>// limit type to specified base class or to types derived from it\npublic class MyGenericClass<T> where T : MyBaseClass {/*...*/}</T></p>\n\n<p>// limit type to specified interface or to types that implement it\npublic class MyGenericClass<T> where T : IMyInterface {/*...*/}</T></p>\n\n<p>// limit type to specified type parameter</p>\n\n<p>// in a generic member function, it limits its type to the type \n//  parameter of the containing type\npublic class MyGenericClass<T>\n{\n    void MyMethod<u>(List<u> items) where U : T {/*...*/}\n}</u></u></T></p>\n\n<p>// in a generic class, it enforces an inheritance relationship\n//  between the two type parameters\npublic class MyGenericClass&lt;T, U&gt; where U : T {/<em>…</em>/}</p>\n\n<p>// type parameter can have multiple constraints \n//  and constraints can also be generics\n//  and constraints can be applied to multiple type parameters\npublic class MyGenericClass&lt;T, U&gt; \n    where T : MyClass, IMyInterface, System.IComparable<T>, new()\n    where U : struct\n{\n    // ...\n}</T></p>\n\n<p> </p>\n\n<p> </p>\n\n<p>A method is considered a <em>generic method definition</em> if it has two parameter lists: a list of type parameters enclosed in &lt;&gt; and a list of formal parameters enclosed in ().  A method belonging to a generic or non-generic type does not make the method generic or non-generic.  Only the existence of the two parameter lists will make the method generic, as in the example below.</p>\n\n<p>public class MyClass\n{\n    // a generic method inside a non-generic class\n    T MyGenericMethod<T>(T arg) {/*...*/}\n}</T></p>\n\n<p> </p>\n\n<p> </p>\n\n<p>A type nested in a generic type is considered by CLR to be generic even if it doesn’t have generic type parameters of its own.  When you instantiate a nested type, you need to specify the type arguments for all enclosing generic types.</p>\n\n<p>// generic type\npublic class MyGenericType&lt;T, U&gt;\n{\n    // nested type\n    public class MyNestedType\n    {\n        // …\n    }\n}</p>\n\n<p>// … somewhere in code you instantiate the nested type <br />\nMyGenericType&lt;string, int&gt;.MyNestedType nt = \n    new MyGenericType&lt;string, int&gt;.MyNestedType();</p>\n\n<p> </p>\n\n<p> </p>\n\n<p>The following are some common <em>generic collection counterparts</em> provided by the .NET framework:</p>\n\n<ul>\n  <li><a href=\"http://msdn.microsoft.com/en-us/library/xfhwa508.aspx\">Dictionary&lt;TKey, TValue&gt;</a> which is the generic version of <em>Hashtable</em>.  It uses <a href=\"http://msdn.microsoft.com/en-us/library/5tbh8a42.aspx\">KeyValuePair&lt;TKey, TValue&gt;</a> for enumeration instead of <em>DictionaryEntry</em>.</li>\n  <li>[List<T>](http://msdn.microsoft.com/en-us/library/6sh2ey19.aspx) which is the generic version of _ArrayList_.</T></li>\n  <li>[Queue<T>](http://msdn.microsoft.com/en-us/library/7977ey2c.aspx) and [Stack<T>](http://msdn.microsoft.com/en-us/library/3278tedw.aspx) which is the generic versions of collections with same names.</T></T></li>\n  <li><a href=\"http://msdn.microsoft.com/en-us/library/ms132319.aspx\">SortedList&lt;TKey, TValue&gt;</a> which is a hybrid of a dictionary and list, just like it’s nongeneric version of same name.</li>\n  <li><a href=\"http://msdn.microsoft.com/en-us/library/f7fta44c.aspx\">SortedDictionary&lt;TKey, TValue&gt;</a> which is a pure dictionary, and [LinkedList<T>](http://msdn.microsoft.com/en-us/library/he2s3bh7.aspx).  Both don’t have nongeneric versions.</T></li>\n  <li>[Collection<T>](http://msdn.microsoft.com/en-us/library/ms132397.aspx) which is a base class for generating custom collection types, [ReadOnlyCollection<T>](http://msdn.microsoft.com/en-us/library/ms132474.aspx) which provides read-only collection from any type implementing _IList<T>_, and [KeyedCollection&lt;TKey, TItem&gt;](http://msdn.microsoft.com/en-us/library/ms132438.aspx) for storing objects containing their own keys.</T></T></T></li>\n</ul>\n\n<p> </p>\n\n<p>There are also <em>generic interface counterparts</em> for ordering and equality comparisons and for shared collection functionality:</p>\n\n<ul>\n  <li>[System.IComparable<T>](http://msdn.microsoft.com/en-us/library/4d7sx9hd.aspx) and [System.IEquatable<T>](http://msdn.microsoft.com/en-us/library/ms131187.aspx) which define methods for ordering comparisons and equality comparisons.</T></T></li>\n  <li>[IComparer<T>](http://msdn.microsoft.com/en-us/library/8ehhxeaf.aspx) and [IEqualityComparer<T>](http://msdn.microsoft.com/en-us/library/ms132151.aspx) in the _System.Collections.Generic_ namespace, which offer alternative way for types that do not implement System.IComparable<T> and System.IEquatable<T>.  They are used by methods and constructors of many of the generic collection classes.  An example would be passing a generic IComparer<T> object to the constructor of SortedDictionary&lt;TKey, TValue&gt; to specify a sort order.  Generic classes _Comparer<T>_ and _EqualityComparer<T>_ are their base class implementations.</T></T></T></T></T></T></T></li>\n  <li>[ICollection<T>](http://msdn.microsoft.com/en-us/library/92t2ye13.aspx) which provides basic functionality for adding, removing, copying, and enumerating elements in a generic collection type.  It inherits from _IEnumerable<T>_ and the nongeneric _IEnumerable_.</T></T></li>\n  <li>[IList<T>](http://msdn.microsoft.com/en-us/library/5y536ey6.aspx) which extends ICollection<T> with methods for indexed retrieval.</T></T></li>\n  <li><a href=\"http://msdn.microsoft.com/en-us/library/s4ys34ea.aspx\">IDictionary&lt;TKey, TValue&gt;</a> which extends ICollection<T> with methods for keyed retrieval.  Generic dictionary types also inherit from nongeneric _IDictionary_.</T></li>\n  <li>[IEnumerable<T>](http://msdn.microsoft.com/en-us/library/9eekhta0.aspx) which provides a generic enumerator structure used by _foreach._  It inherits from nongeneric _IEnumerator_ because _MoveNext_ and _Reset_ methods appear only on the nongeneric interface.  This means consumer of the nongeneric interface can also consume the generic interface because the generic interface provides for nongeneric implementation.</T></li>\n</ul>\n\n<p> </p>\n\n<p>You also have <em>generic delegates</em> in .NET framework.  An example is the _EventHandler<TEventArgs>_ which you can use in handling events with custom event arguments.  No need to declare your own delegate type for the event.  If you need to brush up on events and delegates, see my post on [raising events](https://rodansotto.github.io/tech-blog/2014/05/21/c-quick-review-on-raising-events.html \"C#: Quick Review on Raising Events\") and [nongeneric delegates](https://rodansotto.github.io/tech-blog/2014/05/16/c-quick-review-on-delegates.html \"C#: Quick Review on Delegates\").</TEventArgs></p>\n\n<p>public event EventHandler<PublishedEventArgs> Published;</PublishedEventArgs></p>\n\n<p> </p>\n\n<p> </p>\n\n<p>There are also a bunch of useful generic delegates available for manipulating arrays and lists</p>\n\n<ul>\n  <li>[Action<T>](http://msdn.microsoft.com/en-us/library/018hxwa8.aspx) which allows you to perform action on an element by passing an Action<T> delegate instance and an array to the generic method [Array.ForEach<T>](http://msdn.microsoft.com/en-us/library/zecdkyw2.aspx).  You can also pass an Action<T> delegate instance to the nongeneric method [List<T>.ForEach](http://msdn.microsoft.com/en-us/library/bwabdf9z.aspx).</T></T></T></T></T></li>\n  <li>[Predicate<T>](http://msdn.microsoft.com/en-us/library/bfcke1bz.aspx) which allows you to specify a search criteria to _Array_’s _Exists<T>_, _Find<T>_, _FindAll<T>_, and so on and also to _List<T>_’s _Exists_, _Find_, _FindAll_, and so on.</T></T></T></T></T></li>\n  <li>[Comparsion<T>](http://msdn.microsoft.com/en-us/library/tfakywbh.aspx) which allows you to provide a sort order.</T></li>\n  <li><a href=\"http://msdn.microsoft.com/en-us/library/kt456a2y.aspx\">Converter&lt;TInput, TOutput&gt;</a> which allows you to convert between two types of arrays or lists.</li>\n</ul>\n\n<p> </p>\n\n<p>Ok so that’s all we have for generics.  Just a review of the basics that a C# developer need to know.</p>\n"
    } ,
  
    {
      "title"    : "C#: Quick Review on Raising Events",
      "category" : "c-sharp",
      "tags"     : "",
      "url"      : "/tech-blog/2014/05/21/c-quick-review-on-raising-events.html",
      "date"     : "2014-05-21 00:00:00 +0000",
      "content": "<p>To illustrate raising events, let’s pick a very simple but classic example of a publisher and subscriber relationship.  Note that events make use of delegates and if you need to brush up on delegates, check my post <a href=\"https://rodansotto.github.io/tech-blog/2014/05/16/c-quick-review-on-delegates.html\" title=\"C#: Quick Review on Delegates\">here</a>.</p>\n\n<p>// So here you have a publisher class\npublic class Publisher\n{\n    // Inside you declare a public event\n    // And the delegate type for the event is EventHandler\n    public event EventHandler Published;</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>// The event needs to be public to allow public subscription\n//  (e.g. p.Published += Subscriber1)\n// Also one might ask why we need the event keyword when, without it,\n//  making it a delegate, it basically does the same thing\n// Well, declaring an event lets you raise the event privately, but\n//  still allow public subscription\n// With a public delegate, anyone can remove other people's event\n//  handlers, raise the events themselves, etc. - an encapsulation\n//  disaster\n// Also when it's declared an event, it will appear in the list\n//  of properties with a lightning icon beside it\n\n// So EventHandler is a delegate type that accepts an object and an \n//  EventArgs parameters and returns void\n// You can code the following instead and it will do the same thing\npublic delegate void PublishedEventHandler(object sender, EventArgs e);\npublic event PublishedEventHandler Published;\n\n// You can actually use a different event parameter if you prefer, \n//  but that will mean not following the standard event handling\npublic delegate void PublishedEventHandler(string title);\npublic event PublishedEventHandler Published;\n\n// Also, using EventArgs for your event handler means you can't pass\n//  any event data to your event handler\n// If you need to pass data, you can use any event data type (like a\n//  string in the example above) or class.\n// Standard practice is to use an event data class derived from\n//  EventArgs and this will also require you to define a custom event\n//  handler delegate type\npublic class PublishedEventArgs : EventArgs\n{\n    public string Title { get; set; }\n}\npublic delegate void PublishedEventHandler(object sender, \n                                            PublishedEventArgs e);\npublic event PublishedEventHandler Published;\n\n\n// Next, you raise the event with the following method\n// The method needs to be protected and virtual so that any derived\n//  classes can override it if necessary\nprotected virtual void OnPublished(EventHandler e)\n{\n    EventHandler handler = Published;\n    if (handler != null)\n    {\n        // Here we are calling the delegate which in turn invokes all\n        //  the methods in it's invocation list (if there is more than\n        //  one method to invoke)\n        handler(this, e);\n    }\n}    \n\n// Then the following public method just provides the publisher a\n//  means to notify it's subsribers of a newly published title\npublic void Publish()\n{\n    OnPublished(null);\n}\n\n// But if you are passing event data...\nprotected virtual void OnPublished(PublishedEventArgs e)\n{\n    PublishedEventHandler handler = Published;\n    if (handler != null)\n    {\n        handler(this, e);\n    }\n}\n\npublic void Publish()\n{\n    PublishedEventArgs e = new PublishedEventArgs();\n    e.Title = \"Hello World!!!\";\n    OnPublished(e);\n}     }\n</code></pre></div></div>\n\n<p>// Somewhere in code outside the Publisher class, you have the following \n//  subscribers or event handlers\nstatic void Subscriber1(object sender, EventArgs e)\n{\n    Console.WriteLine(“Subscriber1 notified of new title”);\n}</p>\n\n<p>static void Subscriber2(object sender, EventArgs e)\n{\n    Console.WriteLine(“Subscriber2 notified of new title”);\n}</p>\n\n<p>// Again, if you are passing event data…\nstatic void Subscriber1(object sender, PublishedEventArgs e)\n{\n    Console.WriteLine(“Subscriber1 notified of new title “ + e.Title);\n}</p>\n\n<p>// Lastly, here you instantiate a publisher,\n//  add the following subscribers,\n//  and then publish a new title\nPublisher p = new Publisher();\np.Published += Subscriber1;\np.Published += Subscriber2;\np.Publish();</p>\n"
    } ,
  
    {
      "title"    : "C#: Quick Review on Delegates",
      "category" : "c-sharp",
      "tags"     : "",
      "url"      : "/tech-blog/2014/05/16/c-quick-review-on-delegates.html",
      "date"     : "2014-05-16 00:00:00 +0000",
      "content": "<p>A <strong>delegate</strong> is a type, much like the <strong>C/C++ function pointer</strong>, that can reference or encapsulate any method with the same method signature as the delegate.</p>\n\n<p>Declaring a delegate is like declaring a regular method but without the method body and using the <em>delegate</em> keyword.</p>\n\n<p>// declaring a delegate that accepts string as input and returns void\npublic delegate void MyDelegate(string msg);</p>\n\n<p>// declaring a method with similar method signature as the delegate\npublic static void MyDelegateMethod(string msg)\n{\n    Console.WriteLine(msg);\n}</p>\n\n<p>// instantiating the delegate\nMyDelegate d = MyDelegateMethod;</p>\n\n<p>// calling the delegate\nd(“Hello Delegate!!!”);</p>\n\n<p> </p>\n\n<p> </p>\n\n<p>The instantiated delegate is an object, and as such can be passed as a parameter or assigned to a property.</p>\n\n<p>// here is a method accepting a delegate as a parameter\n// the delegate parameter is often called the callback method\npublic static void PassMeTheDelegate(MyDelegate callBack)\n{\n    callBack(“Passed as a parameter”);\n}</p>\n\n<p>// passing the instantiated delegate as a parameter to another method\n// basically passing a callback method to another method\nPassMeTheDelegate(d);</p>\n\n<p>// assigning the instantiated delegate to another variable\nMyDelegate v = d;\nv(“Assigned to a variable”);</p>\n\n<p> </p>\n\n<p> </p>\n\n<p>A delegate can call more than one method when invoked and this is referred to as <em>multicasting</em>, a feature extensively used in <em>event handling</em>.</p>\n\n<p>// instantiate another delegate,\n//  encapsulating another method with same method signature\nMyDelegate e = MyDelegateMethod2;</p>\n\n<p>// to multicast, add the delegates using the addition operator\nMyDelegate multiCast = d + e;</p>\n\n<p>// invoking a multicast delegate will invoke \n//  each of the delegate methods in the invocation list\nmultiCast(“I am multicasting!”);</p>\n\n<p>// and you can also remove a method from the invocation list\nmultiCast -= d;\nmultiCast(“Now I am not”);</p>\n\n<p> </p>\n\n<p> </p>\n\n<p>Because delegates are derived from <a href=\"http://msdn.microsoft.com/en-us/library/system.delegate.aspx\">System.Delegate</a>, you can call the methods and properties defined by that class on the delegate.  Multicast delegates or delegates with more than one method in their invocation list derive from <a href=\"http://msdn.microsoft.com/en-us/library/system.multicastdelegate.aspx\">MulticastDelegate</a>, which is a subclass of System.Delegate.</p>\n\n<p>So far we have instantiated a delegate using a named method, where the method is defined elsewhere.  Another way of instantiating a delegate is with <em>anonymous methods</em> and <em>lambda expressions</em>, both are forms of inline code that you can pass as parameter or assign to property in place of a named method, except that lambda expressions are more concise.  Check out my post <a href=\"https://rodansotto.github.io/tech-blog/2013/11/11/c-quick-notes-on-some-cool-features.html\" title=\"C#: Quick notes on some cool features…\">here</a> on anonymous methods and lambda expressions.</p>\n"
    } ,
  
    {
      "title"    : "Using CSS Media Queries",
      "category" : "web-design",
      "tags"     : "",
      "url"      : "/tech-blog/2014/05/14/using-css-media-queries.html",
      "date"     : "2014-05-14 00:00:00 +0000",
      "content": "<p><a href=\"http://rodansotto.files.wordpress.com/2014/05/usingmediaqueries21.jpg\"><img src=\"/tech-blog/assets/images/usingmediaqueries21.jpg\" alt=\"UsingMediaQueries2\" /></a>CSS media queries allows your site to be responsive by changing the styles and layout when viewed from different devices such as mobile devices.</p>\n\n<p>Before media queries, web developers resort to creating a separate web site for mobile viewing.  With media queries you don’t have to anymore.  So what do media queries look like and how do you use them?</p>\n\n<p>Media queries extend the existing media types, such as the <em>screen</em> and <em>print</em>, that HTML4 and CSS2 supports.</p>\n\n<p>&lt;link rel=“stylesheet” type=“text/css” media=“screen” href=“screen.css”&gt;</p>\n\n<p> </p>\n\n<p>It queries the media type for  conditions, capabilities or features.  In the example below it asks the screen if it is in portrait orientation, and if it is, asks it to load the stylesheet portrait-screen.css.</p>\n\n<p>&lt;link rel=“stylesheet” media=“screen and (orientation: portrait)” \nhref=“portrait-screen.css” /&gt;</p>\n\n<p> </p>\n\n<p>But the best way to use media queries is within CSS stylesheets using <em>@media</em>.</p>\n\n<p>@media screen and (max-device-width: 400px) {\n    h1 { color: green }\n}</p>\n\n<p> </p>\n\n<p>CSS <em>@import</em> can also be used to conditionally load stylesheets, but, just like the <em><link /></em> tag, it adds to HTTP requests.</p>\n\n<p>@import url(“360maxwidth-screen.css”) screen and (max-width: 360px);</p>\n\n<p> </p>\n\n<p>The most commonly used media features are <em>width</em>, which is the device’s viewport width, and <em>device-width</em>, which is the device’s screen width.  And you can prefix min and max to almost all of the media features to define a range (e.g. <em>min-width</em> and  <em>max-width</em>).</p>\n\n<p>Below is the formal syntax definition of media queries:</p>\n\n<p>media_query_list: &lt;media_query&gt; [, &lt;media_query&gt; ]*\nmedia_query: [[only | not]? &lt;media_type&gt; [ and &lt;expression&gt; ]*]\n  | &lt;expression&gt; [ and &lt;expression&gt; ]*\nexpression: ( &lt;media_feature&gt; [: &lt;value&gt;]? )\nmedia_type: all | aural | braille | handheld | print |\n  projection | screen | tty | tv | embossed\nmedia_feature: width | min-width | max-width\n  | height | min-height | max-height\n  | device-width | min-device-width | max-device-width\n  | device-height | min-device-height | max-device-height\n  | aspect-ratio | min-aspect-ratio | max-aspect-ratio\n  | device-aspect-ratio | min-device-aspect-ratio | max-device-aspect-ratio\n  | color | min-color | max-color\n  | color-index | min-color-index | max-color-index\n  | monochrome | min-monochrome | max-monochrome\n  | resolution | min-resolution | max-resolution\n  | scan | grid</p>\n\n<p> </p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries\">CSS media queries</a> from Mozilla Developer Network lists all the media features available with examples and also explains the formal syntax definition.</p>\n\n<p>To illustrate the benefits of using media queries, open this page <a href=\"https://rodansotto.github.io/projects/css/fixedwidth.html\">https://rodansotto.github.io/projects/css/fixedwidth.html</a> in your choice of browser.  It is a classic example of a web page using the 960 grid system, which by the way, is a popular fixed grid layout system used by web designers for years.  It has 960px total width, 10px left and right margin, and 940px total content area.  If you continually resize your browser to decrease the width, it will just continue clipping the content.  If you view it on a mobile device, it will show the whole page but scaled down.  If it shows the page at 100 percent, still the content is clipped.</p>\n\n<p>If I want the page to display nicely, say on a Nexus 7 tablet with 800 width resolution and a Nexus S smartphone with 480 width resolution, I need to add the following media queries to my CSS.</p>\n\n<p>/* Nexus 7 tablet styles/layout <em>/\n@media screen and (max-width: 604px) {\n}\n/</em> Nexus S smartphone styles/layout <em>/  <br />\n@media screen and (max-width: 320px) {\n    /</em> … */\n}</p>\n\n<p> </p>\n\n<p>Notice that the above media queries target a screen width of 604px for Nexus 7 instead of 800px.  This is because the ratio between the pixels you know, which is device-independent pixels, and the Nexus 7 device’s pixels is not 1:1 but 1.325:1.  For Nexus S it’s 1.5:1.</p>\n\n<p><a href=\"https://rodansotto.github.io/projects/css/usingmediaqueries.html\">https://rodansotto.github.io/projects/css/usingmediaqueries.html</a> displays the same page but using media queries so you can view the site nicely on a Nexus 7 and Nexus S devices.  If you don’t have any of these devices, you can resize your browser to decrease the width and notice how the page changes it’s layout at 604px and at 320px browser width.  You can view the HTML code from your browser when you right-click and select View page source or View source.  For CSS code, just use the same URL but with <em>.css</em> as the file extension instead of <em>.html</em>.</p>\n\n<p>In conclusion, it’s nice and all having media queries available to make sure your site is displayed nicely on mobile devices.  But this is just a step in the right direction towards having a responsive web design.  Media queries can only get you as far as changing the styles and layouts for specific widths or viewports and anything in between you will still have the problem with content being clipped.  And this is where fluid layout comes in, which will be covered on the next post.</p>\n"
    } ,
  
    {
      "title"    : "Testing an HTML Page on the Android Emulator Browser",
      "category" : "android",
      "tags"     : "",
      "url"      : "/tech-blog/2014/05/12/testing-an-html-page-on-the-android-emulator-browser.html",
      "date"     : "2014-05-12 00:00:00 +0000",
      "content": "<p><a href=\"http://rodansotto.files.wordpress.com/2014/05/htmlonandroid.jpg\"><img src=\"/tech-blog/assets/images/htmlonandroid.jpg\" alt=\"HTMLonAndroid\" /></a>Although you can easily test your HTML page’s responsive design using Chrome’s <a href=\"https://developers.google.com/chrome-developer-tools/docs/mobile-emulation\">Mobile Emulation</a> feature, you can also do it, albeit the harder way, by loading the page on the Android emulator’s browser.</p>\n\n<p>First you must run the <strong>Android Virtual Device (AVD) Manager</strong> to launch your Android emulator.  You don’t necessarily have to run the IDE that came with your Android emulator (e.g. Eclipse or Android Studio).  You can use the batch file <strong>android.bat</strong> which you can find under <strong>sdk/tools</strong> of your Android installation folder.  In the <strong>command prompt</strong>, just type in <strong>“android.bat avd”</strong>.</p>\n\n<p>Once you have the AVD manager running, select the device you want to emulate.  But before starting the device, make sure you have specified a size for the <strong>SD card</strong>, as we will be using this to store the HTML page.  <strong>2GB</strong> should be OK.</p>\n\n<p>Next, you need to copy the HTML page from the computer to the Android emulator’s SD card storage using the <strong>Android Debug Bridge</strong> program or <strong>adb.exe</strong>, which you can find under <strong>sdk/platform-tools</strong>.  Using a command prompt, run adb with the following options:</p>\n\n<ul>\n  <li><strong>“adb devices”</strong> which will list the devices attached including the emulator ones.  To connect to the emulator you just started, you need to get the <strong>device number</strong> assigned to the emulator from the device list.  Or you can get the number from the emulator window bar.</li>\n  <li><strong>“adb connect localhost:<em>5554”</em></strong> which will connect you to the device emulator.   The number <strong><em>5554</em></strong> should be replaced with the device number for your emulator.</li>\n  <li><strong>“adb push C:\\YourFolder\\YourHTMLPage.html sdcard/.”</strong>  which will copy your HTML page from your computer’s local folder to the Android emulator’s <strong>sdcard</strong> folder.  Note that the Android OS is based on Linux kernel which is why the destination path follows the Linux syntax.</li>\n  <li><strong>“adb shell”</strong> which will bring you to the Android emulator file system.  You can go to the SD card folder to check if your HTML page was copied successfully by entering <strong>“cd sdcard”</strong> and then <strong>“ls –al”</strong>.  It’s exactly a Linux file system at your fingertip.  If you want to create a folder under the SD card folder you can use <strong>mkdir</strong>.  To get out of the shell, just type in <strong>exit</strong>.</li>\n</ul>\n\n<p>You can also copy any accompanying CSS and JavaScript files for the HTML page you just copied.</p>\n\n<p>Now you are ready to view the HTML page on the Android emulator browser.  On the emulator, open up the browser and type in the URL <a href=\"$YourHTMLPage.html\"><strong>file:///sdcard/YourHTMLPage.html</strong></a> on the address window.</p>\n\n<p>Note that by default, these mobile browsers will automatically shrink the page to fit the mobile device width.  The following meta tag should be used to override this and display the page at 100 percent.</p>\n\n<p>&lt;meta name=“viewport” content=“width=device-width,initial-scale=1.0”/&gt;</p>\n"
    } ,
  
    {
      "title"    : "Always wondered how you can write custom code in SQL Server reports?",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2014/05/08/always-wondered-how-you-can-write-custom-code-in-sql-server-reports.html",
      "date"     : "2014-05-08 00:00:00 +0000",
      "content": "<p>Well there are 2 ways of doing it actually.  One is embedding it inside the report itself, but you are limited to using only VB.NET.  The other one is creating a custom code assembly, either in VB.NET or C#, and referencing it from the report.  If you ask me, I prefer the custom code assembly so I can write it in C#.</p>\n\n<p>The following links go through the step by step of adding custom code:</p>\n\n<ul>\n  <li><a href=\"http://www.mssqltips.com/sqlservertip/3199/sql-server-reporting-services-embedding-net-code-for-report-formatting-and-error-handling/\">SQL Server Reporting Services Embedding .NET Code for Report Formatting and Error Handling</a></li>\n  <li><a href=\"http://www.mssqltips.com/sqlservertip/3224/sql-server-reporting-services-custom-code-assemblies/\">SQL Server Reporting Services Custom Code Assemblies</a></li>\n</ul>\n\n<p>For more information on MSDN, click <a href=\"http://msdn.microsoft.com/en-us/library/ms156028(v=sql.105).aspx\">here</a>.</p>\n"
    } ,
  
    {
      "title"    : "Responsive HTML5 and CSS3 Web Design: Responsive Enough? Err… Hello?!?",
      "category" : "web-design",
      "tags"     : "",
      "url"      : "/tech-blog/2014/04/03/responsive-html5-and-css3-web-design-responsive-enough-err-hello.html",
      "date"     : "2014-04-03 00:00:00 +0000",
      "content": "<p><a href=\"http://rodansotto.files.wordpress.com/2014/04/responsiveenough.jpg\"><img src=\"/tech-blog/assets/images/responsiveenough.jpg\" alt=\"ResponsiveEnough\" /></a>Looking at the figure above, it would be nice if the web site displays properly in other browser sizes from other devices.  Well have no fear, responsive web design is here.</p>\n\n<p>So what is responsive web design?  Responsive web design was coined by <a href=\"http://www.alistapart.com/articles/responsive-web-design/\">Ethan Marcotte</a>.  It is basically an approach to making web sites respond to the differing viewports of browsers on different devices by using 3 existing techniques:</p>\n\n<ul>\n  <li>flexible grid layout,</li>\n  <li>flexible images, and</li>\n  <li>media and media queries.</li>\n</ul>\n\n<p>One should design for the smallest viewport first then enhance for larger viewports.</p>\n\n<p>If you visit this site, <a href=\"http://mediaqueri.es/\" title=\"http://mediaqueri.es/\">http://mediaqueri.es/</a>, you will see how responsive web sites look or display at the different design “break points”.  Try one of the sites there and see for yourself by changing the browser size.</p>\n\n<p>Some tools to resize your browser quickly:</p>\n\n<ul>\n  <li>In IE9, use the Developer Toolbar and go to Tools –&gt; Resize.</li>\n  <li>In Chrome, you can use the Developer Toolbar too but this is to emulate a device.  You go to the Emulation Panel beside the Console panel, after showing the console. See <a href=\"https://developers.google.com/chrome-developer-tools/docs/mobile-emulation\">Mobile Emulation</a>.</li>\n  <li>Alternatively, you can use a Chrome browser extension <a href=\"https://chrome.google.com/webstore/detail/resolution-test/idhfcdbheobinplaamokffboaccidbal\">Resolution Test</a>.</li>\n</ul>\n\n<p>So how do HTML5 and CSS3 help in making web sites responsive?  The following are some of the features in HTML5 and CSS3, just to give you an idea.</p>\n\n<p><em>For HTML5:</em></p>\n\n<ul>\n  <li>Streamlined markup and more meaningful semantic elements provide for a leaner and faster-loading code base.</li>\n  <li>Feedback to user on form submissions negates the need for more resource heavy JavaScript form processing.</li>\n  <li><em>&lt;header&gt;&lt;nav&gt;</em> replaces your usual <em>&lt;div class=”navigation”&gt;</em> section.</li>\n</ul>\n\n<p><em>For CSS3:</em></p>\n\n<ul>\n  <li>Use of relative measurement units (i.e. em or ems and percentages) instead of pixels.</li>\n  <li>Media queries that targets specific CSS rules at specific viewports.</li>\n  <li><em>border-radius</em> property and <em>background-image linear-gradient</em> property that allow for a rounded button with gradient background image without actually using any images.</li>\n  <li>3D transformations that make animation lightweight, maintainable, and perfect for a responsive design, although IE9 does not support this.</li>\n  <li>In essence, CSS3’s media queries, modules, gradients, shadows, typography, animations, and transformations pushes responsive design even further.</li>\n  <li>Check this site, <a href=\"http://www.csszengarden.com/\" title=\"http://www.csszengarden.com/\">http://www.csszengarden.com/</a>.  It demonstrates what can be accomplished through CSS-based design.</li>\n</ul>\n\n<p>This is just the first in a series of posts on responsive web design using HTML5 and CSS3.  Next I’ll go into more details and more examples.</p>\n"
    } ,
  
    {
      "title"    : "Android Development: main() Method, Application Lifecycle, and Event Handling",
      "category" : "android",
      "tags"     : "",
      "url"      : "/tech-blog/2014/03/18/android-development-main-method-application-lifecycle-and-event-handling.html",
      "date"     : "2014-03-18 00:00:00 +0000",
      "content": "<p><img src=\"https://rodansotto.files.wordpress.com/2017/11/androiddevimg02.jpg?w=300\" alt=\"AndroidDevImg02\" />So, I was going through some tutorials in Android development and along the way created my first applications that just demonstrate the programming features that are available in Android.  It does not seem to me a far fetch programming paradigm as this is mostly familiar to someone with a windows or web development background, but with some subtle differences of course.  My purpose for this post and future posts as well is to list these nuances.</p>\n\n<p>The first thing that a windows or web developer will ask, who is just beginning Android development, is how an Android application is started, thus the following question.</p>\n\n<p><em><strong>Is there a main() method in Android?</strong></em>  There is no <strong>main()</strong> method but there is one similar to it, the <strong>main activity</strong>’s <strong>onCreate()</strong> method.</p>\n\n<p><strong>Main activity</strong> is the first activity that is run by the Android OS when launching an android app.  The main activity is defined in the <strong>AndroidManifest.xml</strong> file.</p>\n\n<p>&lt;?xml version=“1.0” encoding=“utf-8”?&gt;\n&lt;manifest xmlns:android=“http://schemas.android.com/apk/res/android”\n    package=“com.example.app” &gt;</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;application\n    android:allowBackup\\=\"true\"\n    android:icon\\=\"@drawable/ic_launcher\"\n    android:label\\=\"@string/app_name\"\n    android:theme\\=\"@style/AppTheme\" \\&gt;\n    &lt;activity\n        android:name\\=\"com.example.app.MainActivity\"\n        android:label\\=\"@string/app_name\" \\&gt;\n        &lt;intent-filter\\&gt;\n            &lt;action android:name\\=\"android.intent.action.MAIN\" /&gt;\n\n            &lt;category android:name\\=\"android.intent.category.LAUNCHER\" /&gt;\n        &lt;/intent-filter\\&gt;\n    &lt;/activity\\&gt;\n&lt;/application\\&gt;\n</code></pre></div></div>\n\n<p>&lt;/manifest&gt;</p>\n\n<p>All android apps contain at least one activity.  An <strong>activity</strong> is much like a web page, in that it <strong>defines the screen layout and the behavior</strong>.  The activity’s <strong>screen layout</strong> is defined in an <strong>XML markup file</strong>.</p>\n\n<p>&lt;RelativeLayout xmlns:android=“http://schemas.android.com/apk/res/android”\n    xmlns:tools=“http://schemas.android.com/tools”\n    android:layout_width=“match_parent”\n    android:layout_height=“match_parent”\n    android:paddingLeft=“@dimen/activity_horizontal_margin”\n    android:paddingRight=“@dimen/activity_horizontal_margin”\n    android:paddingTop=“@dimen/activity_vertical_margin”\n    android:paddingBottom=“@dimen/activity_vertical_margin”\n    tools:context=“com.example.app.MainActivity”&gt;</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;Button\n    android:layout_width\\=\"wrap_content\"\n    android:layout_height\\=\"wrap_content\"\n    android:text\\=\"Click me!!!\"\n    android:id\\=\"@+id/button\"\n    android:layout_marginTop\\=\"30dp\"\n    android:onClick\\=\"buttonOnClick\"\n    android:layout_alignParentTop\\=\"true\"\n    android:layout_centerHorizontal\\=\"true\" /&gt;\n\n&lt;TextView\n    android:layout_width\\=\"wrap_content\"\n    android:layout_height\\=\"wrap_content\"\n    android:textAppearance\\=\"?android:attr/textAppearanceLarge\"\n    android:text\\=\"No text...\"\n    android:id\\=\"@+id/textView\"\n    android:layout_below\\=\"@+id/button\"\n    android:layout_centerHorizontal\\=\"true\"\n    android:layout_marginTop\\=\"22dp\" /&gt; &lt;/RelativeLayout\\&gt;\n</code></pre></div></div>\n\n<p>The activity’s <strong>behavior</strong> is defined in a <strong>Java class</strong>.</p>\n\n<p>public class MainActivity extends Activity {\n    //\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n    //\n    public void buttonOnClick(View v) {\n        Button b = (Button) v;\n        b.setText(“I’ve Been Clicked!”);\n        //\n        TextView t = (TextView) findViewById(R.id.textView);\n        t.setText(“You Clicked Me!”);\n    }\n}</p>\n\n<p>So for every screen that your android app will need, you usually create an activity.  The <strong>main activity</strong>’s <strong>onCreate()</strong> method is called by the Android OS when the app is launched.</p>\n\n<p><strong><em>So what’s in the app’s lifecycle?</em></strong>  Well, an android app goes through <strong>different states</strong> in its lifecycle as a user navigates through, out of, and back to it, such as, when the user receives a phone call or switches to another app, when the user is not actively using it, when the user leaves your app and return to it a later time; and when the screen rotates between landscape and portrait orientation.</p>\n\n<p>Knowing the different states in the lifecycle, how to take advantage of them by making sure your app does not crash, does not consume valuable system resource, and does not lose the user’s progress, will make you a good android app developer.</p>\n\n<p>The figure below describes the states an android app goes through and the different lifecycle callbacks that the system calls and that the app can implement.</p>\n\n<p><img src=\"/tech-blog/assets/images/basic-lifecycle.png\" alt=\"\" /></p>\n\n<p>So when the app is launched, it is created, started, and resumed, and stays in the resumed state until it is paused, and stays in the paused state until it is resumed, or stopped and stays in a stopped state until it is restarted or destroyed.</p>\n\n<p>Key points to remember here are:</p>\n\n<ul>\n  <li><strong>Created</strong> and <strong>Started</strong> are <strong>transient states</strong>, meaning the app does not stay in these states for long.  So basically the app is created, then quickly started, and immediately goes into a resumed state and stays there for some time.</li>\n  <li><strong>Resumed</strong>, <strong>Paused</strong>, and <strong>Stopped</strong> are static states, meaning these are the possible states that the app maybe currently in at any given time.  The difference between these 3 states are:\n    <ul>\n      <li><strong>Resumed</strong> or <strong>“running”</strong> state is when the activity is in the foreground and the user can interact with it.</li>\n      <li><strong>Paused</strong> state is when the activity is partially obscured by another activity, usually a dialog window.  The other activity that is in the foreground is semi-transparent or does not cover the entire screen.  The paused activity does not receive input and cannot execute code.</li>\n      <li><strong>Stopped</strong> state is when the activity is completely hidden and not visible to the user, thus it is in the background.  The activity instance and all its state information is retained, but it cannot execute any code.</li>\n    </ul>\n  </li>\n  <li><strong>Destroyed</strong> state is when the activity is completely removed from the system memory.</li>\n  <li>An activity is destroyed when the user presses the back button, or when it terminates itself, or when the system terminates it if it’s currently stopped and hasn’t been used in a long time or the other activity that is in the foreground requires more resources that the system must shut down background processes to recover memory.</li>\n  <li>If the system terminates an activity due to system constraints, the system retains the state of the activity such that when the user navigates back to it, it creates a new activity instance and brings it back to the state it was in when it was destroyed using the saved data.</li>\n</ul>\n\n<p><a href=\"http://developer.android.com/training/basics/activity-lifecycle/index.html\"><strong>Managing the Activity Lifecycle</strong></a> from the Android Developer website explains it in more detail including when to implement the different lifecycle callbacks.</p>\n\n<p><strong><em>What’s different then in handling events in Android?</em></strong>  Similar to how you handle events on windows, you do the same in Android but with some caveat.  You should know that the easiest way to handle event is to create a function, an event handler function, and assign this function to the object’s event through the properties windows.  You can still do this in Android but only with the <strong>onClick</strong> event unfortunately.</p>\n\n<p>public void onButtonClick(View v) {\n    // process event\n}</p>\n\n<p>For other events, you need to code them by hand.  There are 3 ways to hookup to an object’s event using code:</p>\n\n<ul>\n  <li>Creating a subclass of the object’s event listener and creating an instance of it.</li>\n</ul>\n\n<p>@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    // …\n    Button button = (Button) findViewById(R.id.button);\n    MyOnClickListener Listener = new MyOnClickListener();\n    button.setOnClickListener(Listener);\n}\n//\npublic class MyOnClickListener \n        implements View.OnClickListener { \n    public void onClick(View v) {\n        // process event\n    }\n}</p>\n\n<ul>\n  <li>Implementing the object’s event listener interface in the activity class.</li>\n</ul>\n\n<p>public class MainActivity extends Activity\n        implements TextView.OnEditorActionListener {\n    //\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        // …\n        EditText et = (EditText) findViewById(R.id.editText);\n        et.setOnEditorActionListener(this);\n    }\n    //\n    @Override\n    public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {\n        TextView t = (TextView) findViewById(R.id.textView2);\n        t.setText(textView.getText());\n        return true;\n    }\n}</p>\n\n<ul>\n  <li>Using an anonymous class</li>\n</ul>\n\n<p>Button b = (Button) findViewById(R.id.button);\nb.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View view) {\n        TextView t = (TextView) findViewById(R.id.textView2);\n        t.setText(“Regular button”);\n    }\n});</p>\n"
    } ,
  
    {
      "title"    : "WinForms: Using DevExpress, there is a quick way of making sure only one instance of a form is open",
      "category" : "net",
      "tags"     : "",
      "url"      : "/tech-blog/2014/03/03/winforms-using-devexpress-there-is-a-quick-way-of-making-sure-only-one-instance-of-a-form-is-open.html",
      "date"     : "2014-03-03 00:00:00 +0000",
      "content": "<p>If you are lucky enough to be using <strong>DevExpress</strong> and you don’t like the idea of using the <strong>Singleton</strong> pattern in enforcing this rule, then look no further.</p>\n\n<p>You can use DevExpress’ <strong>DocumentManager</strong> control to manage your opened forms.  My solution is to create a static <strong>FormManager</strong> class encapsulating the document manager control and providing the one important method <strong>ShowChildForm</strong> which the <strong>WinForms</strong> application can call, passing in the type of the form it wishes to open.  Very simple.</p>\n\n<p>Below is the code for the <strong>FormManager</strong> class:</p>\n\n<p>namespace WindowsFormsApplication1\n{\n    public static class FormManager\n    {\n        private static DocumentManager documentManager;\n        // <br />\n        public static void InitializeFormManager(Form parentForm)\n        {\n            documentManager = new DocumentManager();\n            documentManager.MdiParent = parentForm;\n            documentManager.View = new NativeMdiView();\n        }\n        //\n        public static void ShowChildForm(Type type)\n        {\n            if (documentManager == null)\n            {\n                return;\n            }\n            //  <br />\n            // check if child form is already open\n            // if it’s already open, then just activate it\n            foreach (BaseDocument doc in documentManager.View.Documents)\n            {\n                if (doc.Control.GetType() == type)\n                {\n                    documentManager.View.ActivateDocument(doc.Control);\n                    return;\n                }\n            }\n            //\n            // otherwise, create a new instance of the child form and display\n            Form childForm = (Form)Activator.CreateInstance(type);\n            childForm.MdiParent = documentManager.MdiParent;\n            childForm.Show();\n        }\n    }\n}</p>\n\n<p> </p>\n\n<p>And somewhere in your WinForms application UI code, you call this function:</p>\n\n<p>FormManager.ShowChildForm(typeof(MyForm));</p>\n"
    } ,
  
    {
      "title"    : "JavaScript: You think you know it well?",
      "category" : "javascript",
      "tags"     : "",
      "url"      : "/tech-blog/2014/02/13/javascript-you-think-you-know-it-well.html",
      "date"     : "2014-02-13 00:00:00 +0000",
      "content": "<p>Just because you are a C# or Java developer that you think you know JavaScript well.  Well I don’t.  But no worries, below are some quick pointers to remember:</p>\n\n<ul>\n  <li><em>null</em> and <em>undefined</em> are types, just like Numbers, Strings, Booleans, and Objects.  <em>null</em> indicates a deliberate non-value while <em>undefined</em> indicates an uninitialized value.</li>\n  <li>Primitive/literal values (<em>null</em>, <em>undefined</em>, <em>“string”</em>, <em>10</em>, <em>true</em>, <em>false</em>) are converted to objects (wrapper objects) when properties are accessed.</li>\n  <li>Functions and Arrays are special types of objects.</li>\n  <li>Built in Error types are there as well.</li>\n  <li><em>Object()</em>, <em>Array()</em>, <em>String()</em>, <em>Number()</em>, <em>Boolean()</em>, <em>Function()</em>, <em>Date()</em>, <em>RegExp()</em>, and <em>Error()</em> are native constructor functions.</li>\n  <li><em>parseInt()</em> and <em>parseFloat()</em> parse the number in string until it reaches an invalid character.</li>\n  <li>Unary + operator converts values to numbers (<em>+ “42” = 42</em> ) and returns <em>NaN</em> (Not a Number) if non-numeric.</li>\n  <li><em>isNaN()</em> tests for <em>NaN</em>.</li>\n  <li><em>isFinite()</em> tests for Infinity (1/0), -Infinity (-1/0), and <em>NaN</em>.</li>\n  <li><em>false</em>, <em>0</em>, empty string (<em>\"”</em> ), <em>NaN</em>, <em>null</em>, and <em>undefined</em> convert to false, and all others convert to true.</li>\n  <li>Blocks do not have scope, only functions have scope.</li>\n  <li><em>“3” + 4 + 5 = 345</em>, while <em>3 + 4 + “5” = 75</em>.</li>\n  <li>Triple-equals operator avoids type coercion.  <em>1 === true</em> is false, but <em>true === true</em> is true.</li>\n  <li>JavaScript objects are simple collections of name-value pairs where the name is a JavaScript string and the value is any JavaScript value.</li>\n  <li><em>array.length</em> isn’t necessarily the number of items in the array.  It is one more than the highest index.</li>\n  <li>No <em>return</em> statement or empty return with no value in a function returns <em>undefined</em>.</li>\n  <li><em>arguments</em> variable contains all the values passed to the function.</li>\n  <li>IIFEs (Immediately Invoked Function Expressions) is basically what it says.  It’s a function in an expression and invoked immediately ( <em>(function () { … })();</em>  )</li>\n  <li>To call functions recursively, you can use a named IIFE ( <em>(function myFunc() { myFunc(); })();</em>  ).  The name is only available to the function’s own scope.</li>\n  <li><em>this</em> inside a function refers to the current object if the function is called against an object or using dot notation or bracket notation; otherwise it will refer to the global object.</li>\n  <li>Global object or the head object in JavaScript in a web browser environment is the <em>window</em> object.  Variables you declare globally in your JavaScript code will become properties of the window object.</li>\n  <li>JavaScript does not have classes; it only has object prototypes. It uses functions as classes.  You declare the properties inside the function and declare the methods by assigning them to the function object’s <em>prototype</em>.</li>\n  <li><em>prototype</em> is an object shared by all instances of the object.  It forms part of a lookup chain, which has a special name called prototype chain.  Anything assigned to the object’s prototype becomes available to all instances of the object.</li>\n  <li>Inner or nested functions can access variables in their parent function’s scope.</li>\n  <li>Closure happens when an outer function returns the inner function and the inner function needs access to the outer function’s local variables.  The outer function’s scope object is actually retained even after the outer function has returned.  Only when there are no more references to the inner function will the outer function’s scope object be garbage collected.</li>\n  <li>Scope objects form a chain called the scope chain.  Scope object is created every time the function starts executing.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "Design Patterns: Factory Method, Abstract Factory, and Singleton",
      "category" : "design-patterns",
      "tags"     : "",
      "url"      : "/tech-blog/2014/02/11/design-patterns-factory-method-abstract-factory-and-singleton.html",
      "date"     : "2014-02-11 00:00:00 +0000",
      "content": "<p>Back again with design patterns, defining them briefly and the design principles they are based on, and providing several very good (almost) real-world C# examples that are available on the Internet.  In this series we have the factory patterns and the singleton pattern and their several different implementations.</p>\n\n<p><strong>Design Pattern #4: Factory Method Pattern</strong></p>\n<ul>\n  <li>Defines an interface for creating an object but lets subclasses decide which class to instantiate.  It lets a class defer instantiation to the subclasses.</li>\n  <li>Design Principle:\n    <ul>\n      <li><em>Design Principle #6</em> :  Depend on abstraction.  Do not depend on concrete classes.</li>\n    </ul>\n  </li>\n  <li>C# Examples:\n    <ul>\n      <li>\n        <p><a href=\"http://www.intstrings.com/ramivemula/articles/c-design-patternfactory-method/\">Example using multiple vehicle factories where each vehicle factory produces only one type of vehicle</a>.</p>\n\n        <blockquote>\n          <table style=\"font-size:.85em;\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\" width=\"898\"><tbody><tr><td valign=\"top\" width=\"150\">Product</td><td valign=\"top\" width=\"746\">Vehicle</td></tr><tr><td valign=\"top\" width=\"150\">ConcreteProduct</td><td valign=\"top\" width=\"746\">Bike, Car, Bus</td></tr><tr><td valign=\"top\" width=\"150\">Creator</td><td valign=\"top\" width=\"746\">Factory; with abstract method <em>GetVehicle()</em></td></tr><tr><td valign=\"top\" width=\"150\">ConcreteCreator</td><td valign=\"top\" width=\"746\">TwoWheeler, CompactFourWheeler, FourWheeler</td></tr></tbody></table>\n        </blockquote>\n      </li>\n      <li>\n        <p><a href=\"http://www.codeproject.com/Articles/184765/Factory-Method-Design-Pattern\">An online bookstore application using multiple distributors to send books to its customers</a>.  This example uses the <em>parameterized factory</em> implementation or the <em>procedural solution/basic noob</em> implementation, wherein the bookstore factory receives the customer location to determine which distributor to choose from.</p>\n\n        <blockquote>\n          <table style=\"font-size:.85em;\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\" width=\"896\"><tbody><tr><td valign=\"top\" width=\"153\">Product</td><td valign=\"top\" width=\"741\">IDistributor</td></tr><tr><td valign=\"top\" width=\"153\">ConcreteProduct</td><td valign=\"top\" width=\"741\">EastCoastDistributor, MidwestDistributor, WestCoastDistributor</td></tr><tr><td valign=\"top\" width=\"153\">Creator</td><td valign=\"top\" width=\"741\">IBookStore; with abstract method <em>GetDistributor()</em></td></tr><tr><td valign=\"top\" width=\"153\">ConcreteCreator</td><td valign=\"top\" width=\"741\">BookStoreA</td></tr></tbody></table>\n        </blockquote>\n      </li>\n      <li>\n        <p><a href=\"http://www.codeproject.com/Articles/37547/Exploring-Factory-Pattern\">A lodging inquiry system wherein a customer can get details of different types of available rooms</a>.  This example also shows the <em>registration with reflection</em> implementation, the <em>self registration without reflection</em> implementation and the <em>self registration with reflection</em> implementation.  It is actually using a <em>factory pattern</em>, a pattern that is the basis for the <em>factory method pattern</em> and the <em>abstract factory pattern</em>. The only difference between the factory pattern and the factory method pattern is in the creator. The factory method pattern requires an abstract class which defines the interface for several factories, thus abstracting the client from both the type of product and type of factory used to create the product.</p>\n\n        <blockquote>\n          <table style=\"font-size:.85em;\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\" width=\"896\"><tbody><tr><td valign=\"top\" width=\"154\">Product</td><td valign=\"top\" width=\"740\">IRoomType</td></tr><tr><td valign=\"top\" width=\"154\">ConcreteProduct</td><td valign=\"top\" width=\"740\">ACRoom, DeluxeRoom, NonACRoom</td></tr><tr><td valign=\"top\" width=\"154\">Creator</td><td valign=\"top\" width=\"740\">-</td></tr><tr><td valign=\"top\" width=\"154\">ConcreteCreator</td><td valign=\"top\" width=\"740\">RoomFactory; concrete class with concrete method <em>GetRoomType()</em></td></tr></tbody></table>\n        </blockquote>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<p><strong>Design Pattern #5: Abstract Factory Pattern</strong></p>\n<ul>\n  <li>Provides an interface for creating families of related or dependent objects without specifying their concrete classes.</li>\n  <li>Design Principle:\n    <ul>\n      <li>Same as the factory method pattern, it follows the <em>Design Principle #6</em>.</li>\n    </ul>\n  </li>\n  <li>C# Examples:\n    <ul>\n      <li>\n        <p><a href=\"http://gugiaji.wordpress.com/2013/01/19/abstract-factory-pattern-example-with-c/\">A drawing and printing machine that can process low and high resolution</a>.  This can be extended to process medium resolution by creating a medium resolution factory that provides the medium resolution display and print drivers.</p>\n\n        <blockquote>\n          <table style=\"font-size:.85em;\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\" width=\"896\"><tbody><tr><td valign=\"top\" width=\"154\">AbstractFactory</td><td valign=\"top\" width=\"738\">ResFactory; with abstract methods <em>getDispDrvr()</em> and <em>getPrtDrvr()</em></td></tr><tr><td valign=\"top\" width=\"154\">ConcreteFactory</td><td valign=\"top\" width=\"738\">LowResFact, HighResFact</td></tr><tr><td valign=\"top\" width=\"154\">AbstractProduct</td><td valign=\"top\" width=\"738\">DisplayDriver, PrintDriver</td></tr><tr><td valign=\"top\" width=\"154\">ConcreteProduct</td><td valign=\"top\" width=\"738\">LowDisplayDriver, HighDisplayDriver, LowPrintDriver, HighPrintDriver</td></tr><tr><td valign=\"top\" width=\"154\">Client</td><td valign=\"top\" width=\"738\">ApControl</td></tr></tbody></table>\n        </blockquote>\n      </li>\n      <li>\n        <p><a href=\"http://www.codeguru.com/csharp/.net/net_general/patterns/article.php/c4673/Abstract-Factory-Design-Pattern-Sample-in-C-and-VB-NET.htm\">An audio/video device object providing access to it’s audio and video properties</a>.  Again this can be extended to include Bluray by creating a Bluray object that exposes Bluray audio and video objects.</p>\n\n        <blockquote>\n          <table style=\"font-size:.85em;\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\" width=\"896\"><tbody><tr><td valign=\"top\" width=\"32\">AbstractFactory</td><td valign=\"top\" width=\"555\">IAVDevice; with abstract methods <em>GetAudio()</em> and <em>GetVideo()</em></td></tr><tr><td valign=\"top\" width=\"32\">ConcreteFactory</td><td valign=\"top\" width=\"555\">CCd, CDvd</td></tr><tr><td valign=\"top\" width=\"32\">AbstractProduct</td><td valign=\"top\" width=\"555\">IAudio, IVideo</td></tr><tr><td valign=\"top\" width=\"32\">ConcreteProduct</td><td valign=\"top\" width=\"555\">CCdAudio, CDvdAudio, CCdVideo, CDvdVideo</td></tr><tr><td valign=\"top\" width=\"32\">Client</td><td valign=\"top\" width=\"555\">CAVMaker</td></tr></tbody></table>\n        </blockquote>\n      </li>\n      <li>\n        <p><a href=\"http://blog.bekijkhet.com/2012/05/c-abstract-factory-pattern-combined.html\">An example using employee and customer factories that provides personal information</a>.  This example shows the <em>dependency injection</em> implementation and the <em>inversion of control container</em> implementation.  These types of implementations, factory pattern, dependency injection, and inversion of control container, are all techniques to implement <em>inversion of control</em>, a programming technique in which object coupling is bound at run time and is typically not known at compile time.  I will talk more about inversion of control on a separate post, as this I think, is a hot topic too in the object oriented programming world.</p>\n\n        <blockquote>\n          <table style=\"font-size:.85em;\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\" width=\"896\"><tbody><tr><td valign=\"top\" width=\"28\">AbstractFactory</td><td valign=\"top\" width=\"550\">IPersonAbstractFactory</td></tr><tr><td valign=\"top\" width=\"28\">ConcreteFactory</td><td valign=\"top\" width=\"550\">EmployeeFactory, CustomerFactory</td></tr><tr><td valign=\"top\" width=\"28\">AbstractProduct</td><td valign=\"top\" width=\"550\">IPerson</td></tr><tr><td valign=\"top\" width=\"28\">ConcreteProduct</td><td valign=\"top\" width=\"550\">Employee, Customer</td></tr><tr><td valign=\"top\" width=\"28\">Client</td><td valign=\"top\" width=\"550\">MySample</td></tr></tbody></table>\n        </blockquote>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<p><strong>Design Pattern #6: Singleton Pattern</strong></p>\n<ul>\n  <li>Ensures a class only has one instance and provides a global point of access to it</li>\n  <li>C# Examples:\n    <ul>\n      <li><a href=\"http://msdn.microsoft.com/en-us/library/ff650316.aspx\">Singleton implementations from MSDN</a>.  It shows 3 implementations: the <em>basic</em> implementation, the <em>static initialization</em> implementation, and the <em>multithreaded</em> or <em>double-check locking</em> implementation.</li>\n      <li><a href=\"http://csharpindepth.com/articles/general/singleton.aspx\">Singleton implementations from the book C# In Depth</a>.  It shows 6 implementations:\n        <ul>\n          <li>basic implementation that is not thread-safe</li>\n          <li>simple thread-safe implementation using a lock</li>\n          <li>attempted thread-safe using double-check locking implementation</li>\n          <li>static initialization implementation that is thread-safe without using locks but not quite as lazy</li>\n          <li>full lazy static initialization implementation\n            <div class=\"language-cs highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"k\">public</span> <span class=\"k\">sealed</span> <span class=\"k\">class</span> <span class=\"nc\">Singleton</span>  \n  <span class=\"p\">{</span>  \n  <span class=\"k\">private</span> <span class=\"nf\">Singleton</span><span class=\"p\">()</span>  \n  <span class=\"p\">{</span>  \n  <span class=\"p\">}</span>  \n              \n  <span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"n\">Singleton</span> <span class=\"n\">Instance</span> <span class=\"p\">{</span> <span class=\"k\">get</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">Nested</span><span class=\"p\">.</span><span class=\"n\">instance</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"p\">}</span>  \n                  \n  <span class=\"k\">private</span> <span class=\"k\">class</span> <span class=\"nc\">Nested</span>  \n  <span class=\"p\">{</span>  \n      <span class=\"c1\">// Explicit static constructor to tell C# compiler  </span>\n      <span class=\"c1\">// not to mark type as beforefieldinit  </span>\n      <span class=\"k\">static</span> <span class=\"nf\">Nested</span><span class=\"p\">()</span>  \n      <span class=\"p\">{</span>  \n      <span class=\"p\">}</span>  \n          \n      <span class=\"k\">internal</span> <span class=\"k\">static</span> <span class=\"k\">readonly</span> <span class=\"n\">Singleton</span> <span class=\"n\">instance</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">Singleton</span><span class=\"p\">();</span>  \n  <span class=\"p\">}</span>  \n  <span class=\"p\">}</span>\n</code></pre></div>            </div>\n          </li>\n          <li>C# 4.0’s Lazy<T> static initialization implementation\n</T>            <div class=\"language-cs highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"k\">public</span> <span class=\"k\">sealed</span> <span class=\"k\">class</span> <span class=\"nc\">Singleton</span>  \n  <span class=\"p\">{</span>  \n  <span class=\"k\">private</span> <span class=\"k\">static</span> <span class=\"k\">readonly</span> <span class=\"n\">Lazy</span><span class=\"p\">&lt;</span><span class=\"n\">Singleton</span><span class=\"p\">&gt;</span> <span class=\"n\">lazy</span> <span class=\"p\">=</span>  \n      <span class=\"k\">new</span> <span class=\"n\">Lazy</span><span class=\"p\">&lt;</span><span class=\"n\">Singleton</span><span class=\"p\">&gt;(()</span> <span class=\"p\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nf\">Singleton</span><span class=\"p\">());</span>  \n              \n  <span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"n\">Singleton</span> <span class=\"n\">Instance</span> <span class=\"p\">{</span> <span class=\"k\">get</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">lazy</span><span class=\"p\">.</span><span class=\"n\">Value</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"p\">}</span>  \n              \n  <span class=\"k\">private</span> <span class=\"nf\">Singleton</span><span class=\"p\">()</span>  \n  <span class=\"p\">{</span>  \n  <span class=\"p\">}</span>  \n  <span class=\"p\">}</span>\n</code></pre></div>            </div>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n  <li>This is the second in the Design Patterns series.  The first one is <a href=\"https://rodansotto.github.io/tech-blog/2013/11/05/design-patterns-strategy-observer-and-decorator.html\">Design Patterns: Strategy, Observer, and Decorator</a>.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "HTTP Fundamentals, Part 2: Communication Stack, HTTP Connections, and REST Style of Architecture",
      "category" : "web-design",
      "tags"     : "",
      "url"      : "/tech-blog/2014/02/05/http-fundamentals-part-2-communication-stack-http-connections-and-rest-style-of-architecture.html",
      "date"     : "2014-02-05 00:00:00 +0000",
      "content": "<p><strong>Communication Stack</strong></p>\n\n<p><strong>HTTP</strong> is the topmost layer in the communication stack and is called an application layer protocol.  From the web browser, it travels down a series of layers, and when it arrives at the web server, it then travels up through a series of layers.  The layers that make up the communication stack are:</p>\n\n<ul>\n  <li><strong>Application</strong> – An example would be <strong>HTTP</strong>.</li>\n  <li><strong>Transport</strong> – Responsible for error detection, flow control, and overall reliability.  An example would be <strong>TCP (Transmission Control Protocol)</strong>.</li>\n  <li><strong>Network</strong> – Responsible for taking pieces of information and moving them through the various switches, routers, gateways, repeaters, and other devices that move information from one network to the next and all around the world.  An example would be <strong>IP (Internet Protocol)</strong>.  This is where the <strong>IP address</strong> comes in to play.</li>\n  <li><strong>Data Link</strong> – This is where data have to travel over a piece of wire, a fibre optic cable, a wireless network, or a satellite link.  It’s focused more on 1s, 0s, and electric signals.  An example would be <strong>Ethernet</strong>.</li>\n</ul>\n\n<p><strong>HTTP</strong> relies on <strong>TCP</strong> to connect to the server.  It opens a <strong>TCP socket</strong> by specifying the <strong>server address</strong> (host name) and <strong>port</strong> (defaults to 80).  With an open socket, HTTP can write into it and read from it when it gets response from the server.</p>\n\n<p>A free tool you can use to view HTTP,  TCP and IP packets is <a href=\"http://www.wireshark.org/\"><strong>Wireshark</strong></a>.</p>\n\n<p> </p>\n\n<p><strong>HTTP Connections</strong></p>\n\n<p>Gone is the old days of simple web pages.  Nowadays, a webpage requires more than a single resource to fully render.  To compensate for this and so as not to bog down the Internet, several approaches have been employed   when using HTTP:</p>\n\n<ul>\n  <li><strong>Parallel Connections</strong> – Browsers can open more than one connection to download several resources at the same time but there is a limit to it that is set by the server.  This is better though than doing a request in a serial one-by-one fashion.</li>\n  <li><strong>Persistent Connections</strong> – Browsers can persist a connection to the server reducing overhead associated with opening and closing a TCP socket and thus improving performance.  <strong>This is the default connection style with HTTP 1.1</strong>.  These connections are only persistent for a period of time as set by either the server or the browser.  The server can also opt not to accept a persistent connection by specifying the <strong>Connection: close</strong> header in every HTTP response message.</li>\n  <li><strong>Pipelined Connections</strong> – Not widely used as parallel and persistent connections, this type of connection allow multiple requests to be sent by the browser before the browser waits for the first response.</li>\n</ul>\n\n<p> </p>\n\n<p><strong>REST Style of Architecture</strong></p>\n\n<p><strong>HTTP</strong> lends itself to the <strong><a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\">REpresentational State Transfer (REST)</a></strong> style of architecture.  If you think of resources and URLs as just not files on a web server’s file system, but more like as resource abstractions, you start to see the web as part of your application and as a flexible architectural layer you can build on.  The following are some <strong>RESTful</strong> aspects of a URL:</p>\n\n<ul>\n  <li>A URL cannot restrict the client or server to a specific type of technology.</li>\n  <li>A URL cannot force the server to store a resource using any particular technology.</li>\n  <li>A URL cannot specify the representation of a specific resource, and a resource can have multiple representations.  This is where content negotiation, discussed in <a href=\"https://rodansotto.github.io/tech-blog/2013/10/29/http-fundamentals-part-1-url-encoding-request-and-response.html\"><strong>Part 1</strong></a> of this series, kicks in.</li>\n  <li>A URL cannot say what a user wants to do with a resource.  This is where the HTTP methods comes in.</li>\n</ul>\n\n<p>Because an <strong>HTTP message</strong> is a <strong>simple</strong>, <strong>plain text message</strong> and <strong>fully self-describing</strong>, and together with the <strong>indirection provided by URLs</strong>, HTTP applications can rely on a number of <strong>services that provide value</strong> as a message moves between the client application and the server application.  Examples of services would be:</p>\n\n<ul>\n  <li><strong>Web server</strong>\n    <ul>\n      <li>Route message to proper application</li>\n      <li>Log message to a local file</li>\n      <li>Compress message if client supports it</li>\n    </ul>\n  </li>\n  <li><strong>Proxy server</strong> – A computer that sits between a client and server.  Can either be a <strong>forward proxy</strong> that sits closer to the client or a <strong>reverse proxy</strong> that sits closer to the server.  Note that a proxy server does not have to be a physical server.\n    <ul>\n      <li>Prevent message to go out to specific servers</li>\n      <li>Remove confidential data in the message</li>\n      <li>Log message to create audit trails</li>\n      <li>Compress message</li>\n      <li>Forward message to one of several web servers (load balancing)</li>\n      <li>Encrypt and decrypt message (SSL acceleration)</li>\n      <li>Filter out potentially dangerous message (cross-site scripting, SQL injection attack)</li>\n      <li>Store copies of frequently accessed resources and respond to messages requesting those resources directly (caching)</li>\n    </ul>\n  </li>\n</ul>\n\n<p>These services can be layered into the network without impacting the application, and that is the beauty of HTTP.  It is scalable, simple, reliable, and loosely coupled.  In fact, <strong>REST was initially described in the context of HTTP</strong>.</p>\n\n<p> </p>\n\n<p>*This article is Part 2 of the HTTP Fundamental series.  For Part 1, click <a href=\"https://rodansotto.github.io/tech-blog/2013/10/29/http-fundamentals-part-1-url-encoding-request-and-response.html\"><strong>here</strong></a>.</p>\n"
    } ,
  
    {
      "title"    : "Access VBA: How To Call A Windows Form Application with Arguments",
      "category" : "ms-access",
      "tags"     : "",
      "url"      : "/tech-blog/2014/01/17/access-vba-how-to-call-a-windows-form-application-with-arguments.html",
      "date"     : "2014-01-17 00:00:00 +0000",
      "content": "<p>To call a Windows Form application (*.exe) with arguments in VBA, you use the <strong><a href=\"http://office.microsoft.com/en-ca/access-help/shell-function-HA001228906.aspx\">Shell()</a></strong> function.</p>\n\n<p>Shell “C:\\Dev\\SampleWinFormWithArgs.exe arg1”, vbNormalFocus</p>\n\n<p> </p>\n\n<p>Inside the Windows Form application, you get the command line arguments using <strong>Environment.GetCommandLineArgs()</strong>.</p>\n\n<p>string[] args = Environment.GetCommandLineArgs();\n// you can call GetCommandLineArgs() anytime, anywhere\nforeach(string arg in args)\n{\n    // do stuff\n    // note that the first argument string is the application pathname\n}</p>\n"
    } ,
  
    {
      "title"    : "SQL Server: Quick Notes on SYNONYM, MERGE, TRY_CONVERT, TRY_CAST, PARSE, TRY_PARSE, CHECKSUM, ISNULL, COALESCE, NULLIF, and JOIN",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2014/01/15/sql-server-quick-notes-on-synonym-merge-try_convert-try_cast-parse-try_parse-checksum-isnull-coalesce-nullif-and-join.html",
      "date"     : "2014-01-15 00:00:00 +0000",
      "content": "<p><strong>SYNONYM</strong></p>\n\n<p>Starting in SQL Server 2005, you can use <strong><a href=\"http://msdn.microsoft.com/en-us/library/ms191230(v=sql.90).aspx\">SYNONYM</a></strong> in place of their referenced object in SQL statements.  It’s like an alias.  The benefit here is that if you decide to alter the name of the object being referenced by the synonym, let’s say you want to change the name of the table or use a totally different table, or change the location of the table, all you have to do is update the synonym to use the correct table and all the SQL statements using the synonym shouldn’t have to be changed at all.</p>\n\n<p>-- say for example you have the following synonym,\n-- where ClientToronto is the database name\nCREATE SYNONYM SYN_CUSTOMERS FOR ClientToronto.dbo.Customers\nGO\n-- \n-- and you have a SQL statement that uses that synonym\nSELECT * FROM SYN_CUSTOMERS\n-- \n-- if you ever need to run the same SQL statement for a different client,\n-- say for a client in Chicago, all you have to do is update the synonym\n-- to point to a different database\nDROP SYNONYM SYN_CUSTOMERS\nGO\nCREATE SYNONYM SYN_CUSTOMERS FOR ClientChicago.dbo.Customers\nGO\n--\n-- to check which object the synonym is referring to, \n-- you can use the system view sys.synonyms\nSELECT BASE_OBJECT_NAME FROM sys.synonyms WHERE NAME = ‘SYN_CUSTOMERS’</p>\n\n<p> </p>\n\n<p> </p>\n\n<p><strong>MERGE</strong></p>\n\n<p>Starting in SQL Server 2008, if you want to update a target table based on a source table, which will involve inserting new records and updating or deleting existing records on the target table, you can use <strong><a href=\"http://msdn.microsoft.com/en-us/library/bb510625(v=sql.105).aspx\">MERGE</a></strong> and it will perform an <strong>INSERT</strong> and <strong>UPDATE/</strong><strong>DELETE</strong> operations on the target table in a single statement, instead of using each operation separately.</p>\n\n<p>MERGE Customers AS TARGET\nUSING (SELECT CustomerCode, CustomerName FROM ImportCustomers) \n    AS SOURCE (CustomerCode, CustomerName)\nON TARGET.CustomerCode = SOURCE.CustomerCode\nWHEN MATCHED THEN \n    -- do an update when importing existing customers\n    UPDATE SET TARGET.CustomerName = SOURCE.CustomerName\nWHEN NOT MATCHED THEN \n    -- do an insert when importing new customers\n    INSERT (CustomerName, CustomerCode)\n    VALUES (SOURCE.CustomerName, SOURCE.CustomerCode)\n; \n-- note that the semicolon is required at the end of the MERGE statement</p>\n\n<p> </p>\n\n<p> </p>\n\n<p><strong>TRY_CONVERT, TRY_CAST, PARSE, TRY_PARSE</strong></p>\n\n<p>If you want to avoid getting an error when using <strong>CONVERT</strong> or <strong>CAST</strong>, use <strong><a href=\"http://msdn.microsoft.com/en-us/library/hh230993.aspx\">TRY_CONVERT</a></strong> and <strong><a href=\"http://msdn.microsoft.com/en-us/library/hh974669.aspx\">TRY_CAST</a></strong>.  These functions, which unfortunately are available only in SQL Server 2012, return NULL if the conversion or casting failed.  New in SQL Server 2012 too are <strong><a href=\"http://msdn.microsoft.com/en-us/library/hh213316.aspx\">PARSE</a></strong> and <strong><a href=\"http://msdn.microsoft.com/en-us/library/hh213126.aspx\">TRY_PARSE</a></strong> functions, used only for converting from string to date/time and number types, much like the <strong>TryParse()</strong> method in C#, if you know C#.</p>\n\n<p>SELECT TRY_CONVERT(DATETIME2, ‘1/1/2014’)\nSELECT TRY_CAST(‘1/1/2014’ AS DATETIME2)\nSELECT TRY_PARSE(‘1/1/2014’ AS DATETIME2)</p>\n\n<p> </p>\n\n<p> </p>\n\n<p><strong>CHECKSUM</strong></p>\n\n<p>The <a href=\"http://msdn.microsoft.com/en-us/library/ms189788(v=sql.90).aspx\"><strong>CHECKSUM</strong></a> function has been around since SQL Server 2005.  It’s main use is in building hash indexes.  But it can also be useful in synchronizing your data.  Let’s say you have 2 tables that you want to sync.  You can create a checksum value computed over a list of fields in your record whose changes you want to keep track of.  If a record’s checksum value is different, then sync the record.</p>\n\n<p> </p>\n\n<p><strong>ISNULL, COALESCE, NULLIF</strong></p>\n\n<p>You would think that <strong><a href=\"http://msdn.microsoft.com/en-us/library/ms184325(v=sql.90).aspx\">ISNULL</a></strong> function will return true if the expression is NULL.  But actually it replaces NULL with the specified replacement value and returns that value.  If it’s not NULL, it returns back the expression.  Much like <strong><a href=\"http://msdn.microsoft.com/en-us/library/ms190349(v=sql.90).aspx\">COALESCE</a></strong>, but COALESCE accepts multiple expressions and return the first non NULL expression.  Now <strong><a href=\"http://msdn.microsoft.com/en-us/library/ms177562(v=sql.90).aspx\">NULLIF</a></strong> is a totally different function, in that it returns a NULL value if the two specified expressions are equal.</p>\n\n<p> </p>\n\n<p><strong>JOIN</strong></p>\n\n<p>I already talked about SQL Server joins in this <a href=\"https://rodansotto.github.io/tech-blog/2007/05/05/sql-server-2005-joins-and-union.html\">post</a>.  But for a visual description, click <a href=\"http://www.codeproject.com/KB/database/Visual_SQL_Joins/Visual_SQL_JOINS_orig.jpg\">here</a>.</p>\n"
    } ,
  
    {
      "title"    : "JavaScript: Attaching/Detaching Event, OnLoad vs. DOMContentLoaded, Manipulating DOM and CSS",
      "category" : "javascript",
      "tags"     : "",
      "url"      : "/tech-blog/2013/12/17/javascript-attachingdetaching-event-onload-vs-domcontentloaded-manipulating-dom-and-css.html",
      "date"     : "2013-12-17 00:00:00 +0000",
      "content": "<p><strong>Event Handling, Attaching and Detaching Events</strong></p>\n\n<p>3 phases of event dispatch:</p>\n\n<ul>\n  <li><em>Capturing</em> – going down the DOM tree until it reaches the target element</li>\n  <li><em>Target</em></li>\n  <li><em>Bubbling</em> – going back up the DOM tree from the target element</li>\n</ul>\n\n<p>// standard way of accessing the Event object<br />\nvar eventHandlerDOM = function(evt) {<br />\n    alert(evt.type); //displays click<br />\n}</p>\n\n<p>// starting IE 9 you can use the standard way<br />\nvar eventHandlerIE8Older = function() {<br />\n    var evt = window.event;<br />\n    alert(evt.type);<br />\n}</p>\n\n<p>// cross-browser way<br />\nvar eventHandlerCB = function(evt) {<br />\n    if (!evt) evt = window.event;<br />\n    alert(evt.type);<br />\n}</p>\n\n<p>window.onload = function() {<br />\n    var btn = document.getElementById(“btn”);</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>// 2 ways of attaching an event  \nbtn.onclick = eventHandlerCB;  \n// or ...  \nif (btn.addEventListener) {  \n    btn.addEventListener(\"click\", eventHandlerCB, false);  \n}  \nelse {  \n    // starting IE 9, you can use the standard way using  \n    //  addEventListener  \n    btn.attachEvent(\"onclick\", eventHandlerCB);  \n}  \n  \nalert(\"events attached\");  \nalert(\"now detaching events...\");  \ndetachEvents();  \nalert(\"events detached\");       }  \n</code></pre></div></div>\n\n<p>// detaching events<br />\nvar detachEvents = function() {<br />\n    if (btn.removeEventListener) {<br />\n        btn.removeEventListener(“click”, eventHandlerCB, false);<br />\n    }<br />\n    else {<br />\n        // starting IE 9, you can use the standard way using<br />\n        //  removeEventListener<br />\n        btn.detachEvent(“onclick”, eventHandlerCB);<br />\n    }    <br />\n}</p>\n\n<p><strong><em>window.onload</em> Event vs. <em>document.DOMContentLoaded</em> event</strong></p>\n\n<p>The problem with running script on <em>window.onload</em> event is that if you have a rather large image to download, your script will run only after the image is downloaded.  <em>window.onload</em> event is triggered after everything, including external stylesheets, javascript files and images, has been downloaded.  An alternative, and usually a best practice, is to run your script on <em>document.DOMContentLoaded</em> event.</p>\n\n<p>var readyFunc = function() {<br />\n    var stat = document.getElementById(“statDOMReady”);<br />\n    stat.innerHTML = “DOM is ready!!!”;<br />\n}</p>\n\n<p>document.addEventListener(“DOMContentLoaded”, readyFunc, false);</p>\n\n<p>Note that <em>document.DOMContentLoaded</em> event is an <em>HTML5</em> specification.  Also if your script needs to work with CSS, you need to put all your external stylesheets in the header and all your external scripts in the footer so all the styles will be loaded before your scripts are run.</p>\n\n<p><strong>Manipulating DOM</strong></p>\n\n<p>A sample of what you can do for manipulating DOM:</p>\n\n<ul>\n  <li><em>document.createElement()</em> – create an Element node</li>\n  <li><em>document.createTextNode()</em> –  create a Text node</li>\n  <li><em>element.cloneNode()</em> – create a copy of a node and its attributes with option to include the descendants as well</li>\n  <li><em>element.appendChild()</em> – add a new child node as the last child node</li>\n  <li><em>element.insertBefore()</em> – insert a new child node before a specified child node</li>\n  <li><em>element.removeChild()</em> – remove a child node</li>\n  <li><em>element.replaceChild()</em> – replace a child node</li>\n  <li><em>document.createDocumentFragment()</em> – create an imaginary Node object; useful for adding content to your document, or extracting parts of your document and modifying it and inserting it back</li>\n</ul>\n\n<p><strong>Manipulating CSS</strong></p>\n\n<p>2 ways to import external stylesheets:</p>\n\n<!-- using <style> tag and @import -->\n<p>&lt;style type=“text/css”&gt;<br />\n    @import “myStylesheet.css”;<br />\n&lt;/style&gt;</p>\n\n<!-- using <link> tag and rel=\"stylesheet\" -->\n<p>&lt;link type=“text/css” href=“myStylesheet.css” rel=“stylesheet” /&gt;</p>\n\n<p>Persistent, preferred, and alternate stylesheets:</p>\n\n<!-- persistent stylesheet -->\n<p>&lt;link type=“text/css” href=“main.css” rel=“stylesheet” /&gt;</p>\n\n<!-- preferred stylesheet -->\n<p>&lt;link type=“text/css” href=“dflt.css” rel=“stylesheet” title=“Default” /&gt;</p>\n\n<!-- alternate stylesheet -->\n<p>&lt;link type=“text/css” href=“alt1.css” rel=“alternate stylesheet”<br />\n    title=“Alternate 1” /&gt;</p>\n\n<p><em>element.style</em>, <em>window.getComputedSyle()</em>, <em>element.currentStyle</em>, elements positioning properties:</p>\n\n<p>var p1 = document.getElementById(“p1”);<br />\np1.style.fontSize = “20px”;</p>\n\n<p>// standard way of getting the computed style<br />\nvar computedStyle = window.getComputedStyle(p1, null);<br />\nalert(computedStyle.fontSize); // displays 20px</p>\n\n<p>// IE way of getting the computed syle<br />\n// starting from IE9, you can use the standard way<br />\nvar computedStyle2 = p1.currentStyle;<br />\nalert(computedStyle2.fontSize); // displays 20px</p>\n\n<p>// cross-browser code for getting the computed style<br />\nif ( !(“getComputedStyle” in window) ) {<br />\n    alert(“getComputedStyle does not exist”)<br />\n    window.getComputedStyle = function(element) {<br />\n        return element.currentStyle;<br />\n    }<br />\n}</p>\n\n<p>// positioning properties of an element you can use<br />\nalert(p1.offsetTop);    // displays 130<br />\nalert(p1.offsetLeft);   // displays 8<br />\nalert(p1.offsetHeight); // displays 23<br />\nalert(p1.offsetWidth);  // displays 911<br />\n// below will display 0, because it’s parent is the body tag<br />\nalert(p1.offsetParent.offsetTop);<br />\nvar body = document.getElementsByTagName(“body”)[0];<br />\nalert(body.offsetTop);  // displays 0</p>\n"
    } ,
  
    {
      "title"    : "JavaScript: RegExp, Error, DOM, and Event",
      "category" : "javascript",
      "tags"     : "",
      "url"      : "/tech-blog/2013/12/09/javascript-regexp-error-dom-event.html",
      "date"     : "2013-12-09 00:00:00 +0000",
      "content": "<p>This post is a follow-up to my previous posts, <a href=\"https://rodansotto.github.io/tech-blog/2013/09/21/web-ui-working-with-objects-in-javascript.html\">Object Oriented Programming In Javascript</a> and <a href=\"https://rodansotto.github.io/tech-blog/2013/11/03/web-ui-javascript-array-and-how-its-different-from-object.html\">JavaScript Array and How It’s Different from Object</a>.  In this post I will touch on regular expressions, error handling, basic DOM scripting, image preloading, and timing events.</p>\n\n<p><strong>Regular Expressions</strong></p>\n\n<p>// creating patterns<br />\nvar pattern1 = new RegExp(“Rodan”);     // using constructor<br />\nvar pattern2 = /Rodan/;                 // using literal enclosed in “/”</p>\n\n<p>// testing strings against the patterns<br />\nalert(pattern1.test(“Rodan Sotto”));    // displays true<br />\nalert(pattern2.test(“John Doe”));       // displays false</p>\n\n<p>// using String methods search, match, and replace with regular expressions<br />\nvar string1 = “Rodan Sotto”;<br />\nvar string2 = “John Doe”;</p>\n\n<p>// below will display 6, the starting position of the substring found<br />\nalert(string1.search(/Sotto/)); <br />\n// below will display -1, which means no substring found<br />\nalert(string2.search(/Sotto/));</p>\n\n<p>alert(string1.match(/Sotto/)); // displays an array [“Sotto”]<br />\nalert(string2.match(/Sotto/)); // displays null</p>\n\n<p>// below will display “Rodan Nolastname”<br />\nalert(string1.replace(/Sotto/, “Nolastname”));<br />\n// below will display “John Doe”<br />\nalert(string2.replace(/Sotto/, “Nolastname”));</p>\n\n<p>See <a href=\"http://www.w3schools.com/js/js_obj_regexp.asp\">JavaScript RegExp Object</a> for more information.</p>\n\n<p><strong>Error Handling</strong></p>\n\n<p>var testErrorHandling = function () {<br />\n    try {<br />\n        alert(“Throwing an error inside the try block…”);<br />\n        throw(new Error(“You’ve got an error!!!”));<br />\n    }<br />\n    catch (error) {<br />\n        alert(error.message);<br />\n    }<br />\n    finally {<br />\n        alert(“Error or not, finally will get executed”);<br />\n    }<br />\n};</p>\n\n<p><strong>Basic DOM Scripting</strong></p>\n\n<p><em>W3Schools.com</em> has a very good beginner resource on <a href=\"http://www.w3schools.com/js/js_htmldom.asp\">HTML DOM</a>.</p>\n\n<ul>\n  <li><em>DOM</em> stands for <em>Document Object Model</em>.  Everything in DOM is a node.  A Node can be any of the following:\n    <ul>\n      <li>Document Node</li>\n      <li>Element Node</li>\n      <li>Attribute Node</li>\n      <li>Text Node</li>\n      <li>Comment Node</li>\n    </ul>\n  </li>\n  <li><em>Document Object</em>, which represents your web page, is the first object you will need to access the DOM.  It is the root node of the HTML document and the owner of all other nodes.  See <a href=\"http://www.w3schools.com/jsref/dom_obj_document.asp\">Document Object Properties and Methods</a>.</li>\n  <li><em>Element Object</em>, which represents an HTML element, is the second object you will need to access the DOM.  Most commonly a call to <em>document.getElementById()</em> method will return an element object.  An element object is also an element node.  It can have child nodes such as <em>element nodes</em>, <em>attribute nodes</em>, <em>text nodes</em>, or <em>comment nodes</em>.  See <a href=\"http://www.w3schools.com/jsref/dom_obj_all.asp\">Element Object Properties and Methods</a>.</li>\n  <li>An Element Object can be one of the following:\n    <ul>\n      <li><a href=\"http://www.w3schools.com/jsref/dom_obj_anchor.asp\">Anchor</a> Object</li>\n      <li><a href=\"http://www.w3schools.com/jsref/dom_obj_image.asp\">Image</a> Object</li>\n      <li><a href=\"http://www.w3schools.com/jsref/dom_obj_button.asp\">Button</a> Object</li>\n      <li>etc., each of which can have it’s own set of properties and method.</li>\n    </ul>\n  </li>\n  <li>And lastly, the <em>Attr Object</em> which represents an HTML attribute and always belongs to an HTML element.  See <a href=\"http://www.w3schools.com/jsref/dom_obj_attributes.asp\">Attr Object Properties and Methods</a>.</li>\n  <li><em>Events</em>.  See <a href=\"http://www.w3schools.com/jsref/dom_obj_event.asp\">HTML DOM Events</a>.  It lists the different events such as:\n    <ul>\n      <li>Mouse Events</li>\n      <li>Keyboard Events</li>\n      <li>Frame/Object Events</li>\n      <li>Form Events</li>\n      <li>It also lists the properties and methods of event objects that event handlers have access to such as:\n        <ul>\n          <li>Event Object</li>\n          <li>EventTarget Object</li>\n          <li>EventListener Object</li>\n          <li>DocumentEvent Object</li>\n          <li>MouseEvent Object</li>\n          <li>KeyboardEvent Object</li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<p><strong>Default Action Cancellation</strong></p>\n\n<p>var event_handler = function(evt) {<br />\n    if (!evt) evt = window.event;   // for IE</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>// ...  \n  \n// cancel default action  \nif (evt.preventDefault) {  \n    evt.preventDefault();       // for most browsers  \n}  \nelse {  \n    evt.returnValue = false;    // for IE  \n}   }  \n</code></pre></div></div>\n\n<p>window.onload = function() {<br />\n    var link = document.getElementById(“link”);<br />\n    link.onclick = event_handler;    <br />\n}</p>\n\n<p><strong>Image Preloading</strong></p>\n\n<p>var image = new Image();<br />\nimage.src = “image.jpg”;<br />\n// or<br />\nimage.src = link.href;</p>\n\n<p><strong>Timing Events</strong></p>\n\n<p>JavaScript also provides for executing code at specific time-intervals using <em>setInterval()</em> and <em>setTimeout()</em> methods.  See <a href=\"http://www.w3schools.com/js/js_timing.asp\">JavaScript Timing Events</a>.</p>\n"
    } ,
  
    {
      "title"    : ".NET: Regular Expression Testers and Quick Reference Guides",
      "category" : "net",
      "tags"     : "",
      "url"      : "/tech-blog/2013/12/03/net-regular-expression-testers-and-quick-reference-guides.html",
      "date"     : "2013-12-03 00:00:00 +0000",
      "content": "<p>I talked briefly about regular expressions in .NET Framework <a href=\"http://rodansotto.wordpress.com/?s=regular+expression#regex\">here</a>, how you can test for a match and how to extract or replace a matched group, or matched substring if you may.  The examples there used a named group to extract a matched group (e.g. **?<proto>**, **?<port>**, etc...).  It's worth mentioning that you can also extract a matched group using **$** (e.g. **$0**, **$1**, **$2**, ... **$n**, where **$0** is the whole string that was matched, **$1** is the first matched group, **$2**, the second matched group, and so on...).</port></proto></p>\n\n<p>Also it would be nice if you have a tool you can use to test out your regular expressions instead of testing it out in your code, compiling it, and running it.  Well there are tools out there available for you but the ones I liked the most are online tools and are listed below.</p>\n\n<p><strong>Online Regular Expression Tester</strong></p>\n\n<ul>\n  <li><a href=\"http://derekslager.com/blog/posts/2007/09/a-better-dotnet-regular-expression-tester.ashx\">A Better .NET Regular Expression Tester</a> - it’s user interface is not fancy but it does the job well.</li>\n  <li><a href=\"http://regexstorm.net/tester\">Regex Storm .Net</a> - this one is a much better user interface and does the job too.</li>\n  <li><a href=\"http://regexr.com/\">RegExr</a> - an online tool to learn, build, &amp; test. It has a cheatsheet and a very good sample text to test your regex.</li>\n</ul>\n\n<p><strong>Online Quick Reference Guides</strong></p>\n\n<ul>\n  <li><a href=\"http://www.cheatography.com/davechild/cheat-sheets/regular-expressions/\">Regular Expressions Cheat Sheets</a></li>\n  <li><a href=\"http://msdn.microsoft.com/en-us/library/az24scfc(v=vs.100).aspx\">MSDN - Regular Expression Language - Quick Reference</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "So what is Closure?",
      "category" : "c-sharpjavascript",
      "tags"     : "",
      "url"      : "/tech-blog/2013/12/02/so-what-is-closure.html",
      "date"     : "2013-12-02 00:00:00 +0000",
      "content": "<p>I’m not talking about closure in a relationship :).  I am talking about closure in programming.  I first encountered closure in JavaScript the hard way.  I was debugging for days the following code as to why it was not behaving the way I expect it to be.</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">setRowsOnclickEvent</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">table</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">tableList</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    \n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">table</span><span class=\"p\">.</span><span class=\"nx\">rows</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">row</span> <span class=\"o\">=</span> <span class=\"nx\">table</span><span class=\"p\">.</span><span class=\"nx\">rows</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">];</span>\n        \n        <span class=\"nx\">row</span><span class=\"p\">.</span><span class=\"nx\">onclick</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">table</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">tableList</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n            \n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">j</span> <span class=\"o\">&lt;</span> <span class=\"nx\">table</span><span class=\"p\">.</span><span class=\"nx\">rows</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">row</span> <span class=\"o\">=</span> <span class=\"nx\">table</span><span class=\"p\">.</span><span class=\"nx\">rows</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"p\">];</span>\n                \n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">j</span> <span class=\"o\">==</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">row</span><span class=\"p\">.</span><span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">selectRow</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">else</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">row</span><span class=\"p\">.</span><span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">unselectRow</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The JavaScript function above is setting the onclick event of all the rows in the table.  It iterates through each row in the table and assigns an inline function, an event handler, to the row’s onclick event.  Note that the event handler, or the inner function, uses the loop variable i of the outer function, containing the row number, so that whenever the row is clicked it get’s highlighted.</p>\n\n<p>My mistake was to think that the value of i is passed on to the event handler like a function parameter and placed on the stack.  Don’t make that mistake. The value of i actually closes on you, I mean on the event handler, or the inner function.  So variable i is a closure variable, while the inner function is a closure function.</p>\n\n<p>Again don’t make the mistake that assigning the event handler to the onclick event actually calls the event handler.  It’s an event handler so it can be called even after the outer function has been out of scope.</p>\n\n<p>So you ask, what happens to the value of i then? Well for closure situations like this, the compiler creates a special context object containing the closure variables so that closure functions, when they get executed, will have access to these variables even if the function that the closure variables are declared in are already out of scope.</p>\n\n<p>In the above JavaScript code, what’s happening is whenever any row is clicked, the last row always gets highlighted, so which is to say, the variable i always has the value of the last row number.  The reason is because, again, even if the closure function, or the event handler in our example, is inside a loop that iterates through each row and incrementing the closure variable i, when the loop exits, the closure variable i will contain the last value in the loop which is the last row number and that is the value that the event handler will get when it gets executed at a later time.  So the value of the closure variable i will be the value at runtime and not at capture time, or in our example, not at the time when the event handler is declared and assigned.</p>\n\n<p>Below is my solution to the JavaScript code above.  The solution is to wrap the event handler in another function where I pass in i as a function parameter, thereby forcing the compiler to capture the value of i as it increments itself inside the loop.</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">setRowsOnclickEvent</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">table</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">tableList</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    \n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">table</span><span class=\"p\">.</span><span class=\"nx\">rows</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">row</span> <span class=\"o\">=</span> <span class=\"nx\">table</span><span class=\"p\">.</span><span class=\"nx\">rows</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">];</span>\n        \n        <span class=\"nx\">row</span><span class=\"p\">.</span><span class=\"nx\">onclick</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">table</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">tableList</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n                \n                <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">j</span> <span class=\"o\">&lt;</span> <span class=\"nx\">table</span><span class=\"p\">.</span><span class=\"nx\">rows</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"kd\">var</span> <span class=\"nx\">row</span> <span class=\"o\">=</span> <span class=\"nx\">table</span><span class=\"p\">.</span><span class=\"nx\">rows</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"p\">];</span>\n                    \n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">j</span> <span class=\"o\">==</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"nx\">row</span><span class=\"p\">.</span><span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">selectRow</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n                    <span class=\"p\">}</span>\n                    <span class=\"k\">else</span> <span class=\"p\">{</span>\n                        <span class=\"nx\">row</span><span class=\"p\">.</span><span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">unselectRow</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>           \n        <span class=\"p\">})(</span><span class=\"nx\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><strong>EDIT:</strong>  The code above works by making the function (outer function) that wraps the event handler (inner function) as an IIFE (Immediately Invoked Function Expressions).  This creates a scope object for the outer function (remember Javascript scoping stops at the function level while C# continues at the block level) containing the current value of <em>i</em> in the loop which is retained even after the outer function has returned.  Then each row’s onclick event will end up having an inner function with access to a separate outer function’s scope object, each containing a different value of <em>i</em>.</p>\n\n<p>It’s not only the JavaScript language that has closure.  Other languages have it as well, like C#.  I encountered closure in C# the same way I did in JavaScript.  I was declaring/passing in a lambda expression to a function call inside a foreach loop, that references the foreach variable.  And since C# has a slightly different handling of closure than JavaScript, the solution is different.  In C#, one just need to assign the foreach or loop variable to a temporary variable and reference the temporary variable instead.</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kr\">public</span> <span class=\"k\">void</span> <span class=\"nx\">SomeFunction</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// ...</span>\n    <span class=\"nx\">foreach</span> <span class=\"p\">(</span><span class=\"nx\">Filter</span> <span class=\"nx\">filter</span> <span class=\"k\">in</span> <span class=\"nx\">filters</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"c1\">// have to assign filter value to temp variable in the loop</span>\n        <span class=\"c1\">//  because the lambda expression we're using here is in a closure</span>\n        <span class=\"nx\">string</span> <span class=\"nx\">filterVal</span> <span class=\"o\">=</span> <span class=\"nx\">filter</span><span class=\"p\">.</span><span class=\"nx\">Value</span><span class=\"p\">;</span>\n        <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">filter</span><span class=\"p\">.</span><span class=\"nx\">Field</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">Location Name</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n                <span class=\"nx\">locs</span> <span class=\"o\">=</span> <span class=\"nx\">locs</span><span class=\"p\">.</span><span class=\"nx\">Where</span><span class=\"p\">(</span><span class=\"nx\">l</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">l</span><span class=\"p\">.</span><span class=\"nx\">LocationName</span><span class=\"p\">.</span><span class=\"nx\">Contains</span><span class=\"p\">(</span><span class=\"nx\">filterVal</span><span class=\"p\">));</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"c1\">// ...</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>It’s not easy to wrap your mind around closure, at least for me.  <a href=\"http://www.smartik.net/2013/07/Closures-CSharp-vs-JS-Same-But-Different.html\">Closures in C# vs JavaScript - Same But Different</a> really explains it to me clearly, from a really really technical point of view, as in how the compiler handles closure both in C# and JavaScript.  Don’t worry it’s not a long read but one needs to really read through the code. I’ve got other links for further reading if need be:</p>\n\n<ul>\n  <li><a href=\"http://stackoverflow.com/questions/3416758/outer-variable-trap\">Outer Variable Trap in C#</a></li>\n  <li><a href=\"http://blogs.msdn.com/b/ericlippert/archive/2009/11/12/closing-over-the-loop-variable-considered-harmful.aspx\">Closing over the loop variable considered harmful in C#</a></li>\n  <li><a href=\"http://stackoverflow.com/questions/111102/how-do-javascript-closures-work\">How do JavaScript closures work?</a></li>\n  <li><a href=\"http://blogs.msdn.com/b/kartikb/archive/2009/02/08/closures.aspx\">JavaScript Closures ??</a></li>\n</ul>\n\n<p>I can’t guarantee you to become a closure relationship expert, but after going through the readings and links above,  I can guarantee you to become a closure programming expert ;).</p>\n"
    } ,
  
    {
      "title"    : "C#: Predicates in LINQ to Entities",
      "category" : "c-sharp",
      "tags"     : "",
      "url"      : "/tech-blog/2013/11/26/c-predicates-in-linq-to-entities.html",
      "date"     : "2013-11-26 00:00:00 +0000",
      "content": "<p>If you started programming <strong>MVC</strong>, in particular the <strong>Entity Framework Model</strong>, and find yourself filtering your data model using the **Where<TSource>()** method, you should know by now that you can chain this method instead of using the query syntax.</TSource></p>\n\n<p>// using query syntax - calling Where method once<br />\ncarQuery.Where(c =&gt; c.Color == ‘red’ &amp;&amp; c.Price &lt; 10000);</p>\n\n<p>// using method chaining - calling Where method multiple times<br />\ncarQuery.Where(c =&gt; c.Color == ‘red’).Where(c =&gt; c.Price &lt; 10000);</p>\n\n<p>// method chaining is useful in a loop<br />\nforeach (KeyValuePair&lt;string, string&gt; filter in filters)<br />\n{<br />\n    string filterVal = filter.Value;    <br />\n    switch (filter.Key)<br />\n    {        <br />\n        case “Color”:<br />\n            carQuery = carQuery.Where(c =&gt; c.Color == filterVal).<br />\n            break;<br />\n        case “Price”:<br />\n            int price = Int32.Parse(filterVal);<br />\n            carQuery = carQuery.Where(c =&gt; c.Price &lt; price).<br />\n            break;<br />\n    }<br />\n}</p>\n\n<p>There are other ways to do predicates but  are more advance topic than the ones mentioned above.  The links below talks about them:</p>\n\n<ul>\n  <li><a href=\"http://blogs.msdn.com/b/meek/archive/2008/05/02/linq-to-entities-combining-predicates.aspx\">LINQ to Entities: Combining Predicates</a></li>\n  <li><a href=\"https://www.simple-talk.com/dotnet/.net-framework/dynamic-linq-queries-with-expression-trees/\">Dynamic LINQ Queries with Expression Trees</a></li>\n  <li><a href=\"http://www.albahari.com/nutshell/predicatebuilder.aspx\">Dynamically Composing Expression Predicates</a></li>\n  <li><a href=\"https://www.simple-talk.com/dotnet/.net-framework/giving-clarity-to-linq-queries-by-extending-expressions/?utm_source=simpletalk&amp;utm_medium=pubemail&amp;utm_campaign=reflector&amp;utm_content=linqqueries&amp;utm_term=reflector19\">Giving Clarity to LINQ Queries by Extending Expressions</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "ASP.NET: Beginner&#39;s Resource on MVC 4, Entity Framework, and Razor",
      "category" : "asp-net-mvc",
      "tags"     : "",
      "url"      : "/tech-blog/2013/11/12/asp-net-mvc-ef-razor.html",
      "date"     : "2013-11-12 00:00:00 +0000",
      "content": "<p>New to MVC 4/Entity Framework/Razor?  Then here are some links that are useful:</p>\n\n<ul>\n  <li><a href=\"http://www.asp.net/mvc/tutorials/getting-started-with-ef-5-using-mvc-4\">Getting Started with EF 5 using MVC 4 Tutorial</a></li>\n  <li>The tutorial above uses Code First to a New Database, meaning you create the EF model classes and generate the database.  But if you have an existing database, you can use <a href=\"http://msdn.microsoft.com/en-us/data/jj200620\">Code First to an Existing Database</a>.</li>\n  <li>For a quick introduction on the new view engine in MVC called Razor, visit <a href=\"http://weblogs.asp.net/scottgu/archive/2011/05/12/asp-net-mvc-3-and-the-helper-syntax-within-razor.aspx\">Scott Guthrie’s blog posts on Razor</a>.  It will help you get started and understand what Razor is all about.  Start with the previous blog posts he has done from Introducing Razor and go down from there.</li>\n  <li><a href=\"https://www.simple-talk.com/dotnet/asp.net/a-look-at-the-razor-view-engine-in-asp.net-mvc/?utm_source=simpletalk&amp;utm_medium=email-main&amp;utm_content=razorviewengine-20131209&amp;utm_campaign=net\">A Look at the Razor View Engine in ASP.NET MVC</a> from Dino Esposito is also a good one.</li>\n  <li>Working with Razor will introduce you to the <a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.htmlhelper(v=vs.108).aspx\">HtmlHelper Class</a> that will generate the HTML code for you if you so desire.</li>\n  <li>For generating HTML table containing your data, the <a href=\"http://msdn.microsoft.com/en-us/library/system.web.helpers.webgrid(v=vs.111).aspx\">WebGrid Class</a> HTML helper will be useful.  You might need to do your own paging as it does not do server-side paging, meaning every time it goes to a new page it will query the database for all the records, not just the records for that page.</li>\n  <li><a href=\"http://msdn.microsoft.com/en-us/magazine/hh288075.aspx\">Get the Most out of WebGrid in ASP.NET MVC</a> shows you how to do server-side paging.</li>\n  <li>Extension methods will be useful and a good example is <a href=\"http://stackoverflow.com/questions/11698665/mvc3-web-grid-adding-action-links-at-the-begining-of-columns-list\">Extending the WebGrid HTML helper</a>.  To know more about extension methods, see <a href=\"http://msdn.microsoft.com/en-us/library/bb383977(v=vs.100).aspx\">Extension Methods</a> and <a href=\"http://msdn.microsoft.com/en-us/library/bb311042(v=vs.100).aspx\">How to: Implement and Call a Custom Extension Method</a>.</li>\n  <li><a href=\"http://www.entityframeworktutorial.net/EntityFramework4.3/Introduction.aspx\">Entity Framework Beginner’s Tutoral</a></li>\n  <li><a href=\"http://www.w3schools.com/tags/\">HTML Tags Reference</a></li>\n  <li><a href=\"http://www.w3schools.com/jsref/default.asp\">HTML DOM Reference</a></li>\n  <li><a href=\"http://www.w3schools.com/cssref/default.asp\">CSS Properties Reference</a></li>\n  <li><a href=\"http://learn.jquery.com/\">learn.jquery.com</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "C#: Quick notes on some cool features…",
      "category" : "c-sharp",
      "tags"     : "",
      "url"      : "/tech-blog/2013/11/11/c-quick-notes-on-some-cool-features.html",
      "date"     : "2013-11-11 00:00:00 +0000",
      "content": "<p>… namely object initializer, collection initializer, implicitly typed local variable, anonymous type, anonymous method, and lambda expression.  </p>\n\n<p> <strong>Object Initializer</strong></p>\n\n<p>// we have here an object we are going to initialize in some other class<br />\npublic class ToDoItem<br />\n{<br />\n    // the following are the auto-implemented or automatic properties<br />\n    public int ToDoItemID { get; set; }<br />\n    public string Description { get; set; }<br />\n    public DateTime DueDate { get; set; }<br />\n    public string Notes { get; set; }<br />\n}</p>\n\n<p>public class SomeOtherClass<br />\n{<br />\n    //…<br />\n    private void someMethod()<br />\n    {<br />\n        // so below we use the object initializer, enclosed by {}, to set the object’s<br />\n        //  properties at creation time without having to define a corresponding <br />\n        //  constructor<br />\n        // it uses the default constructor to process the the object initializers<br />\n        ToDoItem toDoItem = new ToDoItem <br />\n        { <br />\n            Description = “Attend French class”, <br />\n            DueDate = DateTime.Parse(“11/7/2013”), <br />\n            Notes = “@6:30p” <br />\n        };<br />\n    }<br />\n}</p>\n\n<p> </p>\n\n<p><strong>Collection Initializer</strong></p>\n\n<p>// collection initializer lets you specify one or more element initializers<br />\n//  which can be a simple value, an expression or an object initializer</p>\n\n<p>// initializing a list of ints using simple values<br />\nList&lt;int&gt; intList = new List&lt;int&gt; { 1, 2, 3, 4, 5 };</p>\n\n<p>// initializing a list of to do items using object initializers<br />\nList<ToDoItem> toDoList = new List<ToDoItem>   \n{   \n    new ToDoItem { Description = \"Visit Milton\", ..., Notes = \"\" },   \n    new ToDoItem { Description = \"Attend French class\", ..., Notes = \"@6:30p\" },   \n    new ToDoItem { Description = \"Attend Adv JavaScript class\", ..., Notes = \"@1p\" }   \n};</ToDoItem></ToDoItem></p>\n\n<p> </p>\n\n<p><strong>Implicitly Typed Local Variable</strong></p>\n\n<p>// implicitly typed local variable, whose type is determined at compile time, is declared<br />\n//  using the var keyword<br />\nvar x = 10;<br />\nint y = 10; // explicitly typed</p>\n\n<p> </p>\n\n<p><strong>Anonymous Type</strong></p>\n\n<p>// anonymous types are objects created with read-only properties and without explicit <br />\n//  type<br />\n// they are created using the new operator with an object initializer and assigned to a<br />\n//  variable declared as var<br />\nvar t = new<br />\n{<br />\n    Description = “Attend French class”,<br />\n    DueDate = DateTime.Parse(“11/7/2013”),<br />\n    Notes = “@6:30p”<br />\n};</p>\n\n<p>// they are typically used in the select clause of a LINQ query expression<br />\nvar toDoQuery =<br />\n    from toDo in toDoList<br />\n    select new {toDo.Description, toDo.DueDate};<br />\nforeach (var t in toDoQuery)<br />\n{<br />\n    Console.WriteLine(t.Description);<br />\n    Console.WriteLine(t.DueDate);<br />\n}</p>\n\n<p> </p>\n\n<p><strong>Anonymous Method</strong></p>\n\n<p>// anonymous method is another way of initializing a delegate<br />\n// before anonymous method, delegates are initialized with named method that is declared<br />\n//  elsewhere in the code<br />\n// with anonymous method, delegates can now be initialized inline as in below</p>\n\n<p>// first declare the delegate<br />\ndelegate void IntOpDelegate(int i, int j);</p>\n\n<p>private void DoIntOps()<br />\n{<br />\n    // then instantiate the delegate with unnamed inline statement block called the<br />\n    //  anonymous method<br />\n    IntOpDelegate intOpSum = delegate(int i, int j)<br />\n    {<br />\n        Console.WriteLine(“Sum: {0}”, i + j);<br />\n    };</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>IntOpDelegate intOpDiff = delegate(int i, int j)  \n{  \n    Console.WriteLine(\"Diff: {0}\", Math.Abs(i - j));  \n};  \n  \n// lastly, invoke the delegates  \nintOpSum(2, 3);  \nintOpDiff(4, 9);   }  \n</code></pre></div></div>\n\n<p> </p>\n\n<p><strong>Lambda Expression</strong></p>\n\n<p>// lambda expression uses =&gt; as the lambda operator<br />\n// left side of =&gt; contains the input parameter(s) and right side of =&gt; contains the<br />\n//  statement(s) or expression</p>\n\n<p>// example below is using lambda expression in place of anonymous method in our previous<br />\n//  example<br />\n// the right side of =&gt; contains one statement<br />\n// note that our delegate here does not return a value so the statement should not return<br />\n//  any value<br />\nIntOpDelegate intOpSum2 = (i, j) =&gt; Console.WriteLine(“Sum: {0}”, i + j);<br />\nintOpSum2(2, 3);</p>\n\n<p>// a lambda expression example with only 1 input parameter, hence () is not required<br />\nIntUnaryOpDelegate intOpInc = i =&gt; Console.WriteLine(“Increment: {0}”, i++);<br />\nintOpInc(4);</p>\n\n<p>// a lambda expression example with statements enclosed in {} on the right side of =&gt;<br />\nIntUnaryOpDelegate intOpInc2 = i =&gt; <br />\n{<br />\n    Console.Write(“Increment: “); <br />\n    Console.WriteLine(i++); <br />\n};<br />\nintOpInc2(4);</p>\n\n<p>// here the delegate returns a value so the right side of =&gt; contains an expression<br />\n// when you say expression it usually returns a value<br />\nIntUnaryOpDelegateWithRetVal intOpInc3 = i =&gt; i++;<br />\nConsole.WriteLine(“Increment: {0}”, intOpInc3(4));</p>\n\n<p>// you can also use statements in place of an expression as in below, but expression is<br />\n//  more elegant<br />\nIntUnaryOpDelegateWithRetVal intOpInc4 = i =&gt; { return i++; };<br />\nConsole.WriteLine(“Increment: {0}”, intOpInc4(4));</p>\n"
    } ,
  
    {
      "title"    : "Design Patterns: Strategy, Observer, and Decorator",
      "category" : "design-patterns",
      "tags"     : "",
      "url"      : "/tech-blog/2013/11/06/design-patterns-strategy-observer-and-decorator.html",
      "date"     : "2013-11-06 00:00:00 +0000",
      "content": "<p>Here and in the next posts, I will talk about design patterns, it’s definition, the guiding design principles they embody, and their C# examples.  But before you dive into design patterns, here is a refresher on <a href=\"https://rodansotto.github.io/tech-blog/2013/11/05/design-patterns-the-four-oo-basics.html\">four OO basics</a>.</p>\n\n<p><strong>Design Pattern #1: Strategy Pattern</strong></p>\n<ul>\n  <li>Defines a family of algorigthms, encapsulates each one, and makes them interchangeable.  It lets the algorithm vary independently from clients that use it.</li>\n  <li>Design Principles:\n    <ul>\n      <li><em>Design Principle #1</em> : Separate code that change from code that stays the same</li>\n      <li><em>Design Principle #2</em> : Program to an interface and not to an implementation</li>\n      <li><em>Design Principle #3</em> : Favor composition (HAS-A) over inheritance (IS-A)\n        <ul>\n          <li>Note: To implement composition, a class will have an interface type reference to a concrete implementation that is usually initialized during the class constructor</li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n  <li>C# Examples:\n    <ul>\n      <li><a href=\"http://newguid.net/vs2008-vs2010/2010/design-patternsc-basic-example-strategy-pattern/\">Basic calculation of two numbers (+,-) that can expand to any number of operators (/,*,etc.)</a></li>\n      <li><a href=\"http://dotnetcodr.com/2013/04/29/design-patterns-and-practices-in-net-the-strategy-pattern/\">Simple shipping cost calculation that can take in different shipping methods</a>.  This example also shows how to implement the strategy pattern using the <a href=\"http://msdn.microsoft.com/en-us/library/900fyy8e(v=vs.110).aspx\">delegate</a> approach.</li>\n      <li><a href=\"http://blog.lowendahl.net/design-patterns/strategy-pattern/\">Consultant search algorithm using different strategies</a>.  It also has <a href=\"http://blog.lowendahl.net/design-patterns/strategy-patterns-using-delegates/\">delegate implementation</a>.</li>\n    </ul>\n  </li>\n</ul>\n\n<p><strong>Design Pattern #2: Observer Pattern</strong></p>\n<ul>\n  <li>Defines a one-to-many dependency between objects so that  when one object changes state, all of its dependents are notified and  updated automatically.  A good example is a newspaper publisher and its  subscribers.</li>\n  <li>Design Principles:\n    <ul>\n      <li><em>Design Principle #4</em> : Strive for loosely coupled designs between objects that interact</li>\n    </ul>\n  </li>\n  <li>C# Examples:\n    <ul>\n      <li><a href=\"http://sourcemaking.com/design_patterns/observer/c-sharp-dot-net\">Structural C# code implementation</a></li>\n      <li><a href=\"http://dotnetanalysis.blogspot.ca/2012/07/introduction-to-observer-pattern-in-c.html\">Simple notification service when a database is down</a></li>\n      <li><a href=\"http://www.dotnetexamples.com/2013/08/observer-design-pattern.html\">Simple investor stock price monitoring application</a></li>\n    </ul>\n  </li>\n</ul>\n\n<p><strong>Design Pattern #3: Decorator Pattern</strong></p>\n<ul>\n  <li>Attaches additional responsibilities to an object dynamically.  Decorators provide a flexible alternative to sub-classing for extending functionality.  It does this by using composition and delegation.  Decorator classes have same types as the components they decorate, either through inheritance or interface implementation.  They add behavior by adding new functionality before and/or after method calls to the component.</li>\n  <li>Design Principles:\n    <ul>\n      <li><em>Design Principle #5</em> : Classes should be open for extension but closed for modification</li>\n    </ul>\n  </li>\n  <li>C# Examples:\n    <ul>\n      <li><a href=\"http://www.c-sharpcorner.com/UploadFile/rmcochran/csharp_wrapper302122006080905AM/csharp_wrapper3.aspx\">Crazy example about a normal dude who got super powers after a freak meteor shower</a></li>\n      <li><a href=\"http://www.c-sharpcorner.com/Blogs/12993/decorator-design-pattern-in-C-Sharp.aspx\">Simple pizza ordering with add-ons such as cheese, pepper, or chicken</a></li>\n      <li><a href=\"http://www.csharpque.com/2013/05/DecoratorPattern.html\">Calculating selling price of sugar after transportation cost, profit, and sales tax have been added</a></li>\n    </ul>\n  </li>\n</ul>\n"
    } ,
  
    {
      "title"    : "Design Patterns: The Four OO Basics",
      "category" : "design-patterns",
      "tags"     : "",
      "url"      : "/tech-blog/2013/11/05/design-patterns-the-four-oo-basics.html",
      "date"     : "2013-11-05 00:00:00 +0000",
      "content": "<p>Before going into design patterns, one must need to know the four OO basics:</p>\n\n<ul>\n  <li>\n    <p><strong>Abstraction</strong> is showing only the necessary details to the outside world. It is the abstract form of anything. It is implemented using <a href=\"http://msdn.microsoft.com/en-us/library/87d83y5b(v=vs.110).aspx\">interface</a> and <a href=\"http://msdn.microsoft.com/en-us/library/vstudio/sf985hc5(v=vs.110).aspx\">abstract class</a>.</p>\n  </li>\n  <li>\n    <p><strong>Encapsulation</strong> is hiding the details from the outside world. It is the opposite of abstraction. It is implemented using private and protected <a href=\"http://msdn.microsoft.com/en-us/library/vstudio/ms173121(v=vs.110).aspx\">access modifiers</a> inside a class.</p>\n  </li>\n  <li>\n    <p><strong>Polymorphism</strong>, as it’s name suggests, means many shapes. In OOP it is providing a single interface to entities of different types. It is implemented in C# as <a href=\"http://msdn.microsoft.com/en-us/library/vstudio/sf985hc5(v=vs.110).aspx\">abstract classes</a> and <a href=\"http://msdn.microsoft.com/en-us/library/9fkccyh4(v=vs.110).aspx\">virtual functions</a>. See <a href=\"http://www.tutorialspoint.com/csharp/csharp_polymorphism.htm\">Polymorphism in C#</a>.</p>\n  </li>\n  <li>\n    <p><strong>Inheritance</strong> is a way for an entity to inherit the characteristics of another entity, thus establishing a parent-child relationship, or in a more technical OO term, an IS-A relationship. It is implemented using base and derived classes.</p>\n  </li>\n</ul>\n"
    } ,
  
    {
      "title"    : "JavaScript Array and How It’s Different from Object",
      "category" : "javascript",
      "tags"     : "",
      "url"      : "/tech-blog/2013/11/03/javascript-array-and-how-its-different-from-object.html",
      "date"     : "2013-11-03 00:00:00 +0000",
      "content": "<p>It’s important to know arrays and objects in JavaScript because they are often used to store client-side data.  Below are quick points on arrays and objects:</p>\n\n<p>// arrays and objects can be confusing at first<br />\n// just remember that arrays in Javascript are ordered lists<br />\n//  and are normally looped through using numerical index starting with 0<br />\n// objects, on the other hand, have property names associated with values<br />\n// confusion always happen when objects are used like associative arrays,<br />\n//  arrays that use names as index to access their associated values</p>\n\n<p>// declaring an array</p>\n\n<p>// as an empty array<br />\nvar myArray1 = [];<br />\nalert(myArray1.length); // displays 0, since it”s empty</p>\n\n<p>// with initialized values<br />\nvar myArray2 = [“apple”, “orange”, “banana”, “strawberry”];<br />\nalert(myArray2[1]); // displays orange, the second element in the array</p>\n\n<p>// using Array constructor<br />\nvar myArray3 = new Array(“red”, “green”, “blue”);<br />\nalert(myArray3.join(“, “)); // displays red, green, blue</p>\n\n<p>// object on the other hand has a different declaration syntax<br />\n// while array is declared using square brackets [],<br />\n//  object is declared using curly braces {}<br />\n// BUT both use [] to access their elements/properties<br />\nvar myObject1 = {};<br />\nvar myObject2 = {<br />\n    “fruit1”: “apple”,<br />\n    “fruit2”: “orange”,<br />\n    “fruit3”: “banana”,<br />\n    “fruit4”: “strawberry”<br />\n}<br />\nalert(myObject2[“fruit2”]); // displays orange</p>\n\n<p>// one method that is quite used most often for arrays is the push() method<br />\n// it”s a convenient way to add to your array<br />\nalert(myArray2.length); // displays 4<br />\nmyArray2.push(“grape”);<br />\nmyArray2.push(“cherry”);<br />\nalert(myArray2.length); // displays 6, after adding 2 more in the array</p>\n\n<p>Hopefully that helps clarify the confusion.</p>\n\n<p><a href=\"http://www.javascriptkit.com/jsref/\">JavaScript Kit</a> has a comprehensive reference with explanations and examples including reference to Array object that you might want to look further into; definitely a good resource to add to your toolbox.  I already had it added to my Favorite Links.</p>\n\n<p>Also, <a href=\"http://flippinawesome.org/2013/11/25/fun-with-javascript-native-array-functions/\">Fun with JavaScript Native Array Functions</a> talks about a slew of array functions in detail.</p>\n"
    } ,
  
    {
      "title"    : "HTTP Fundamentals, Part 1: URL, Encoding, Request and Response",
      "category" : "web-design",
      "tags"     : "",
      "url"      : "/tech-blog/2013/10/29/http-fundamentals-part-1-url-encoding-request-and-response.html",
      "date"     : "2013-10-29 00:00:00 +0000",
      "content": "<p>HTTP fundamentals a web developer needs to know:</p>\n\n<ul>\n  <li>\n    <p><strong>HTTP address</strong> is called a <strong>URL</strong> (<strong>Uniform Resource Locator</strong>). Everything on the Internet is a resource.</p>\n\n    <p> </p>\n\n    <p>Example: http://mydevsite:1234/mydevpage?first=Rodan&amp;last=Sotto#comment</p>\n\n    <p> </p>\n\n    <p><strong>URL</strong> consists of the following parts:</p>\n\n    <p> </p>\n\n    <p>&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;/&lt;path&gt;?&lt;query&gt;#&lt;fragment&gt;</p>\n\n    <p> </p>\n\n    <ul>\n      <li><strong>Scheme</strong> describes how to access a particular resource. In our example above, it’s <strong>HTTP</strong>. It can be <strong>HTTPS</strong>, <strong>FTP</strong>, or <strong>MAILTO</strong>.</li>\n      <li><strong>Host</strong> is the name of the computer hosting the resource. In our example, it’s <strong>mydevsite</strong>.</li>\n      <li><strong>Path</strong> is the path to the specific resource. In our example, it’s <strong>/mydevpage</strong>. A <strong>URL</strong> does not have to point to a specific file, like an image (<strong><em>.jpg**) or **ASPX** file (</em></strong>.aspx<strong>). Nowadays, URLs are dynamic and, for **search engine optimization</strong> (<strong>SEO</strong>), they usually contain descriptive keywords. See <a href=\"http://blog.woorank.com/2013/05/url-optimization-5-best-practices-for-seo/\"><strong>URL optimization for SEO</strong></a><em>.</em></li>\n      <li><strong>Port</strong> is specified if the host is listening to <strong>HTTP requests</strong> on a port number other than <strong>80</strong>, which is the <strong>default HTTP port number</strong>. Usually specified when testing, debugging, or developing web sites. In our example, its <strong>1234</strong>.</li>\n      <li><strong>Query</strong>, or <strong>query string</strong>, comes after <strong>?</strong> (the <strong>question mark</strong>) and contains <strong>name=value</strong> pairs separated by <strong>&amp;</strong> (the ampersand). In our example, its <strong>first=Rodan&amp;last=Sotto</strong>.</li>\n      <li><strong>Fragment</strong> is the part after the <strong>#</strong> sign. This is processed by the browser to display the element identified by the fragment at the top of the screen. In our example, the <strong>comment</strong> section is displayed on top of the screen.</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>URL encoding</strong> is the process of encoding unsafe characters found in the URL. The Internet standards list characters that are unsafe for URLs and thus they are encoded using <strong>%</strong> (the percent sign). One unsafe character is the space character and is usually encoded to <strong>%20</strong>. See <a href=\"http://www.blooberry.com/indexdot/html/topics/urlencoding.htm\"><strong>URL unsafe characters</strong></a>.</p>\n\n    <p> </p>\n\n    <p>Example: http://mydevsite:1234/mydevpage/my%20file.txt</p>\n\n    <p> </p>\n  </li>\n  <li>\n    <p><strong>Content type</strong> is the <strong>MIME</strong> (<strong>Multipurpose Internet Mail Extensions</strong>) type that the server sends to the client so the requested resource can be displayed properly. The content type for an HTML resource, for example, is <strong>“text/html”</strong>, where <strong>“text”</strong> is the primary media type and <strong>“html”</strong> is the media subtype. If the client did not receive any content type information, it can guess the content type by scanning the first bytes of the response, and if that fails, will use the <strong>file extension</strong> instead. The client can also specify which content types it will accept when requesting a resource with multiple representations, a process called <strong>content type negotiation</strong>.</p>\n  </li>\n  <li>\n    <p><strong>HTTP request</strong> and <strong>HTTP response</strong> form a <strong>single HTTP transaction</strong>. These 2 different message types are carefully formatted readable text messages that both server and client understand. Anyone that can send data over a network can participate, like the good old command line <strong>Telnet</strong>. Tools, such as <strong>Fiddler</strong>, can be used to inspect HTTP messages.</p>\n  </li>\n  <li><strong>HTTP Request Methods</strong>:\n    <ul>\n      <li><strong>GET</strong> to retrieve a resource</li>\n      <li><strong>PUT</strong> to store a resource</li>\n      <li><strong>DELETE</strong> to remove a resource</li>\n      <li><strong>POST</strong> to update a resource</li>\n      <li><strong>HEAD</strong> to retrieve the headers for a resource</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>Redirect</strong> response is sent by the server to the client to mean that the resource has moved to a new location and the client needs to send a request again to the new location. <strong>Redirect</strong> is also used to make sure all requests for resources from a server go through a specific location, a <strong>SEO</strong> practice known as <strong><a href=\"http://www.mattcutts.com/blog/seo-advice-url-canonicalization/\">URL canonicalization</a></strong>.</p>\n  </li>\n  <li>\n    <p><strong>POST/Redirect/GET</strong> pattern is a common web design pattern employed by web applications when servicing POST requests so that the client is left with a response from a GET request. This avoids the issues with user refreshing or printing the page as a result of of the response of a POST request.</p>\n  </li>\n  <li>3 common types of HTTP requests:\n    <ul>\n      <li>\n        <p><strong>GET request</strong> , for example when clicking a link.</p>\n\n        <p> </p>\n\n        <p>GET http://mydevsite:1234/mydevpage/mydefault.aspx HTTP/1.1\n  Host: mydevsite.com</p>\n\n        <p> </p>\n      </li>\n      <li>\n        <p><strong>POST request</strong>, when filling up a form whose method is POST. Form inputs go into the HTTP message body.</p>\n\n        <p> </p>\n\n        <p>POST http://mydevsite:1234/mydevpage HTTP/1.1\n  Host: mydevsite.com\n  firstName=Rodan&amp;lastName=Sotto</p>\n\n        <p> </p>\n      </li>\n      <li>\n        <p><strong>Forms and GET request</strong>, when filling up a form whose method is GET. Form inputs go into the query string of the URL. Use this type of request if the operation does not require writing to the server, basically a safe retrieval operation. An example would be a search.</p>\n\n        <p> </p>\n\n        <p>GET http://mydevsite:1234/mydevpage?first=Rodan&amp;last=Sotto HTTP/1.1\n  Host: mydevsite.com</p>\n\n        <p> </p>\n      </li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>HTTP request message</strong> consists of the following parts:</p>\n\n    <p> </p>\n\n    <p>[method] [URL] [version]\n  [headers]\n  [body]</p>\n\n    <p> </p>\n  </li>\n  <li><strong>HTTP request headers</strong>, the <strong>Host</strong> header is one of them, contain useful information that can help the server process a request. Except for the host header, all request headers are optional. Popular request headers are:\n    <ul>\n      <li><strong>Referer</strong> – URL of the referring page</li>\n      <li><strong>User-Agent</strong> – information on the client software making the request, usually the browser</li>\n      <li><strong>Accept</strong> – content types the client is willing to accept; used for content type negotiation</li>\n      <li><strong>Accept-Language</strong> – languages the client prefers</li>\n      <li><strong>Cookie</strong> – cookie information</li>\n      <li><strong>If-Modified-Since</strong> – date the client last retrieved the resource; requests the server to only send the resource if it’s been modified since that time</li>\n    </ul>\n  </li>\n  <li>\n    <p>A <strong>full HTTP request</strong> might look like the one below. Note that some headers contain multiple values, like the Accept header. The <strong>*** (asterisk) in one of the values, usually provided as the last value, means anything. The **q=[0..1]</strong> represents relative degree of preference, 1.0 being the highest and the default value. In our example below, the Accept header tells us the client will accept any content types but likes HTML best.</p>\n\n    <p> </p>\n\n    <p>GET http://mydevsite/ HTTP/1.1\n  Host: mydevsite.com\n  Connection: keep-alive\n  User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) Chrome/16.0.912.75 Safari/535.7\n  Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8\n  Referer: http://www.google.com/url?&amp;q=mydevsite\n  Accept-Encoding: gzip,deflate,sdch\n  Accept-Language: en-US,en;q=0.8\n  Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3</p>\n\n    <p> </p>\n  </li>\n  <li>\n    <p><strong>HTTP response message</strong> consists of the following parts:</p>\n\n    <p> </p>\n\n    <p>[version] [status] [reason]\n  [headers]\n  [body]</p>\n\n    <p> </p>\n  </li>\n  <li>\n    <p>A <strong>full HTTP response</strong> might look like the one below:</p>\n\n    <p> </p>\n\n    <p>HTTP/1.1 200 OK\n  Cache-Control: private\n  Content-Type: text/html; charset=utf-8\n  Server: Microsoft-IIS/7.0\n  X-AspNet-Version: 2.0.50727\n  X-Powered-By: ASP.NET\n  Date: Sat, 14 Jan 2012 04:00:08 GMT\n  Connection: close\n  Content-Length: 17151\n  &lt;html&gt;\n  &lt;head&gt;\n  &lt;title&gt;My Development Site&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n  … content …\n  &lt;/body&gt;\n  &lt;/html&gt;</p>\n\n    <p> </p>\n  </li>\n  <li><strong>HTTP Response Status Code Categories</strong>\n    <ul>\n      <li>100-199 – <strong>Informational</strong></li>\n      <li>200-299 – <strong>Successful</strong></li>\n      <li>300-399 – <strong>Redirection</strong></li>\n      <li>400-499 – <strong>Client Error</strong></li>\n      <li>500-599 – <strong>Server Error</strong></li>\n    </ul>\n  </li>\n  <li><strong>Common HTTP Response Status Codes</strong>\n    <ul>\n      <li><strong>200</strong> – OK</li>\n      <li><strong>301</strong> – Moved Permanently; redirect response used in URL canonicalization</li>\n      <li><strong>302</strong> – Moved Temporarily; redirect response used in the POST/Redirect/GET pattern</li>\n      <li><strong>304</strong> – Not Modified; in response to the If-Modified-Since request header</li>\n      <li><strong>400</strong> – Bad Request</li>\n      <li><strong>403</strong> – Forbidden</li>\n      <li><strong>404</strong> – Not Found</li>\n      <li><strong>500</strong> – Internal Server Error; usually happens due to programming errors in a web application</li>\n    </ul>\n  </li>\n</ul>\n"
    } ,
  
    {
      "title"    : "CSS Fundamentals",
      "category" : "web-design",
      "tags"     : "",
      "url"      : "/tech-blog/2013/10/14/css-fundamentals.html",
      "date"     : "2013-10-14 00:00:00 +0000",
      "content": "<p>In my last blog <a href=\"https://rodansotto.github.io/tech-blog/2013/05/19/web-ui-html-css-javascript-and-jquery-putting-them-all-together-part-1.html\">here</a>, I talked about ways to put CSS in an HTML, the preferred method using external style sheets, and how styles are overwritten when using more than one method.  I also talked about the syntax for declaring a CSS property.</p>\n\n<p>Here I am going to go through some of the basic CSS properties that one would need to know in order to have a good understanding of the capabilities of the CSS, and also a means to brush up one’s CSS knowledge if it ever becomes rusty.  So here they are:</p>\n\n<p>/* comments <em>/<br />\n/</em></p>\n<ul>\n  <li>declaring a CSS property <em>/<br />\np {<br />\n border-style: solid;<br />\n}<br />\n/</em></li>\n  <li>declaring multiple CSS properties <em>/<br />\np {<br />\n background-color: #00FF00;<br />\n font-size: 8px;<br />\n}<br />\n/</em></li>\n  <li>setting font-size using em which is a relative measure</li>\n  <li>1em = default font size, 2em = twice as big, and 0.5em = half the size <em>/<br />\np {<br />\n font-size: 2em;<br />\n}<br />\n/</em></li>\n  <li>declaring fall back fonts in case user’s computer does not have the font</li>\n  <li>note CSS has default fonts and they are serif, sans-serif, and cursive <em>/<br />\np {<br />\n font-family: Verdana, serif;<br />\n}<br />\n/</em></li>\n  <li>styling a table’s border property to 1px, solid line, and color black <em>/<br />\ntable {<br />\n border: 1px solid black;<br />\n}<br />\n/</em></li>\n  <li>styling a link’s text-decoration property to hide the underline <em>/<br />\na {<br />\n text-decoration: none;<br />\n color: #cc0000;<br />\n}<br />\n/</em></li>\n  <li>creating a button</li>\n  <li>use border-radius property to give the button a rounder look</li>\n  <li>use margin: auto to put equal left and right margin on the button,</li>\n  <li>centering it on the page</li>\n  <li>use text-align to set alignment of text inside the button <em>/<br />\ndiv {<br />\n height: 50px;<br />\n width: 120px;<br />\n border: 2px solid #6495ed;<br />\n background-color: #bcd2ee;<br />\n border-radius: 5px;<br />\n margin: auto;<br />\n text-align: center;<br />\n}<br />\n/</em></li>\n  <li>styling every element on the page using the universal (*) selector */</li>\n  <li>{<br />\n  color: black;<br />\n}<br />\n/*</li>\n  <li>styling an element nested somewhere inside another element or</li>\n  <li>is a child of another element using nested selectors <em>/<br />\ndiv h3 {<br />\ncolor: red;<br />\n}<br />\n/</em></li>\n  <li>styling an element nested directly inside another element or</li>\n  <li>is a direct child of another element <em>/<br />\nbody &gt; div &gt; p {<br />\ncolor: #7ac5cd;<br />\n}<br />\n/</em></li>\n  <li>note that more specific selectors will override other selectors</li>\n  <li>e.g. &lt;p&gt; selector will be overridden by nested selector body &gt; div &gt; p</li>\n  <li>nested selectors can be overridden too by the class and id selectors <em>/<br />\n/</em></li>\n  <li>so far we have used HTML element selectors and the universal selector <em>/<br />\n/</em></li>\n  <li>styling using the class selector - the . selector <em>/<br />\n.myClass {<br />\n font-family: cursive;<br />\n color: #0000cd;<br />\n}<br />\n/</em></li>\n  <li>styling using the id selector - the # selector <em>/<br />\n#myID {<br />\n font-family: Courier;<br />\n color: #cc0000;<br />\n}<br />\n/</em></li>\n  <li>note that the id selector is more specific than the class selector,</li>\n  <li>thus the id selector will override the class selector <em>/<br />\n/</em></li>\n  <li>using pseudo-class selectors - the : selector,</li>\n  <li>to select HTML items not part of the document tree <em>/<br />\n/</em></li>\n  <li>styling a link’s unvisited link <em>/<br />\na:link {<br />\n text-decoration: none;<br />\n color: #008b45;<br />\n}<br />\n/</em></li>\n  <li>styling a link’s visited link <em>/<br />\na:visited {<br />\n color: #ee9a00;<br />\n}<br />\n/</em></li>\n  <li>styling a link when it’s hovered over by the mouse <em>/<br />\na:hover {<br />\n color: #00ff00;<br />\n}<br />\n/</em></li>\n  <li>styling elements that are the first children of their parents <em>/<br />\np:first-child {<br />\n font-family: cursive;<br />\n}<br />\n/</em></li>\n  <li>styling elements that are not the first children of their parents -</li>\n  <li>the second, or the third, and so on… <em>/<br />\np:nth-child(2) {<br />\nfont-family: Tahoma;<br />\n}<br />\n/</em></li>\n  <li>CSS positioning <em>/<br />\n/</em></li>\n  <li>positioning using the display property</li>\n  <li>4 possible values:</li>\n  <li>block - stacks the elements on top of each other like blocks in a column</li>\n  <li>inline-block - puts the elements next to each other like blocks in a row</li>\n  <li>inline - puts the elements next to each other but not as blocks:</li>\n  <li>they don’t keep their dimensions</li>\n  <li>none - hides the element and it’s contents from the page <em>/<br />\ndiv {<br />\n height: 50px;<br />\n width: 100px;<br />\n border: 2px solid black;<br />\n border-radius: 5px;<br />\n display: block;<br />\n}<br />\n/</em></li>\n  <li>CSS box model</li>\n  <li>every element follows the box model in CSS,</li>\n  <li>where each element contains the content surrounded by padding, which</li>\n  <li>in turn is surrounded by border, which in turn is surrounded by margin</li>\n  <li>margin is the space around the element,</li>\n  <li>the space between the element and the elements around it</li>\n  <li>border is the edge of the element; set using the border property</li>\n  <li>padding is the space between the border and the content of the element</li>\n  <li>content is the actual stuff<br />\n/*</li>\n  <li>setting the margin using margin: auto <em>/<br />\ndiv {<br />\n height: 50px;<br />\n width: 120px;<br />\n border: 2px solid #6495ed;<br />\n background-color: #bcd2ee;<br />\n margin: auto;<br />\n}<br />\n/</em> setting the margin using margin: top right bottom left <em>/<br />\ndiv {<br />\n height: 50px;<br />\n width: 120px;<br />\n border: 2px solid #6495ed;<br />\n background-color: #bcd2ee;<br />\n margin: 20px 50px 10px 5px;<br />\n}<br />\n/</em> setting the margin using margin-top, margin-right, margin-bottom,</li>\n  <li>and margin-left properties <em>/<br />\ndiv {<br />\nheight: 50px;<br />\nwidth: 120px;<br />\nborder: 2px solid #6495ed;<br />\nbackground-color: #bcd2ee;<br />\nmargin-top: 20px;<br />\nmargin-right: 50px;<br />\nmargin-bottom: 10px;<br />\nmargin-left: 5px;<br />\n}<br />\n/</em></li>\n  <li>note that you can use negative values on the margins,</li>\n  <li>which will move the element in the other direction <em>/<br />\n/</em></li>\n  <li>setting the padding is similar to setting the margin</li>\n  <li>you can use padding property to set top, right, bottom, left padding</li>\n  <li>you can use padding property to give it one value,</li>\n  <li>to apply same value of padding on all sides</li>\n  <li>or you can use the padding-top, padding-right, padding-bottom,</li>\n  <li>and padding-left properties <em>/<br />\ndiv {<br />\nheight: 50px;<br />\nwidth: 120px;<br />\nborder: 2px solid #6495ed;<br />\nbackground-color: #bcd2ee;<br />\npadding: 10px;<br />\n}<br />\n/</em></li>\n  <li>positioning using the float property</li>\n  <li>setting float to right will put the element on right side of the page</li>\n  <li>setting float to left will put the element on left side of the page <em>/<br />\ndiv {<br />\n height: 50px;<br />\n width: 120px;<br />\n border: 2px solid #6495ed;<br />\n background-color: #bcd2ee;<br />\n float: right;<br />\n}<br />\n/</em></li>\n  <li>note that floating elements will go on top of non-floating elements,</li>\n  <li>unless you set the clear property to the following values:</li>\n  <li>left will move the non-floating element below any floating elements</li>\n  <li>on the left side</li>\n  <li>right will move the non-floating element below any floating elements</li>\n  <li>on the right side</li>\n  <li>both will move it below any floating elements on left and right sides <em>/<br />\ndiv {<br />\n height: 50px;<br />\n background-color: #69D2E7;<br />\n clear: both;<br />\n}<br />\n/</em></li>\n  <li>positioning using the position property</li>\n  <li>CSS positioning, by default, is static,</li>\n  <li>meaning elements are positioned where they would normally go</li>\n  <li>setting position to absolute will position the element relative</li>\n  <li>to the first parent element that does not have a static position</li>\n  <li>if there is no such element then it is positioned relative to &lt;html&gt;</li>\n  <li>setting position to relative will position the element relative</li>\n  <li>to where it would have been placed if it had a default static position</li>\n  <li>setting position to fixed will anchor the element to the browser window</li>\n  <li>and stays put even when you scroll up or down */<br />\ndiv {<br />\nheight: 50px;<br />\nbackground-color: #69D2E7;<br />\nposition: fixed;<br />\n}</li>\n</ul>\n\n<p>You could also look at this <a href=\"http://www.codecademy.com/glossary/css\">link</a> for a quick review of CSS basics.</p>\n"
    } ,
  
    {
      "title"    : "SQL Server: How to Linked Server an Access Database",
      "category" : "ms-accesssql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2013/10/12/sql-server-how-to-linked-server-an-access-database.html",
      "date"     : "2013-10-12 00:00:00 +0000",
      "content": "<p>Below is the script to create a linked server to an Access database:</p>\n\n<p>EXEC master.dbo.sp_addlinkedserver <br />\n    @server = N’MyLinkedServerAccessDB’, <br />\n    @srvproduct = N’Access’, <br />\n    @provider = N’Microsoft.Jet.OLEDB.4.0’, <br />\n    @datasrc = N’C:\\MyAccessDB.mdb’</p>\n\n<p>Plus you also need to create the linked server login.  What’s important to note here is that the password for the admin account in the Access database is blank by default, unless you have set the password.</p>\n\n<p>EXEC master.dbo.sp_addlinkedsrvlogin <br />\n    @rmtsrvname = N’MyLinkedServerAccessDB’,<br />\n    @useself = N’False’,<br />\n    @locallogin = N’sa’,<br />\n    @rmtuser = N’admin’,<br />\n    @rmtpassword = ‘’</p>\n"
    } ,
  
    {
      "title"    : "General: Recursive Programming",
      "category" : "general",
      "tags"     : "",
      "url"      : "/tech-blog/2013/10/12/general-recursive-programming.html",
      "date"     : "2013-10-12 00:00:00 +0000",
      "content": "<p>So what is recursive programming?  As someone who took up Computer Science, this is something you learn in school but never really used it at work.  Unless you work in a specialized field, it is not something that one might use when programming business applications.</p>\n\n<p>Remember Fibonacci?  Fibonacci numbers are defined as the sum of the two preceding numbers.</p>\n\n<p>0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, …</p>\n\n<p>I still remember Fibonacci because I was given a test on it in my job interview 4 years ago.  In fact, I blogged about it <a href=\"https://rodansotto.github.io/tech-blog/2009/04/14/general-fibonacci-sequence-using-a-loop-versus-a-recursive-function.html\">here</a>.  You can use a loop function to program Fibonacci, but a recursive function is the way to go, as in below:</p>\n\n<p>public int fibonacci(int n)<br />\n{<br />\n   if (n &lt;= 0) return 0;<br />\n   else if (n == 1) return 1;<br />\n   else return fibonacci(n - 1) + fibonacci(n - 2);<br />\n}</p>\n\n<p>You can use recursive functions to implement linked lists and binary search as well.  Go to this <a href=\"http://www.cs.cmu.edu/~adamchik/15-121/lectures/Recursions/recursions.html\">link</a> to quickly refresh yourself on recursive programming.</p>\n"
    } ,
  
    {
      "title"    : "Object Oriented Programming In Javascript",
      "category" : "javascript",
      "tags"     : "",
      "url"      : "/tech-blog/2013/09/21/working-with-objects-in-javascript.html",
      "date"     : "2013-09-21 00:00:00 +0000",
      "content": "<p>Yes, there is OOP in JavaScript.  The below code are notes that I took during my first week of Advanced Javascript class that I am currently enrolled in at Ryerson University.  These are working code.  I used the free <a href=\"http://komodoide.com/komodo-edit/\">Komodo</a> editor from ActiveState.  It is a cool editor with colored syntax and intellisense and works with HTML and Javascript, and even Perl, PHP, Phyton and Ruby.</p>\n\n<p>// creating native object types like dates, strings, numbers, and booleans<br />\nvar date = new Date();<br />\nvar str1 = “Sotto”;<br />\nvar str2 = new String(“Rodan”);<br />\nvar num1 = 0.35;<br />\nvar num2 = new Number(0.4);<br />\nvar bool1 = true;<br />\nvar bool2 = new Boolean(false);</p>\n\n<p>// calling native object types’ properties and methods<br />\nvar strLen = str1.length;<br />\nvar fixedNum = num1.toFixed(4);</p>\n\n<p>// creating custom objects, in this example blank objects<br />\nvar obj1 = new Object();<br />\nvar obj2 = {};</p>\n\n<p>// adding properties and methods after creating a custom object<br />\nobj1.prop1 = “Object1’s Property1”;<br />\nobj1[“prop1”] = “Object1’s Property1 using []”;<br />\nobj1.func1 = function () {<br />\n    return “Object1’s Function1”;<br />\n};<br />\nobj1[“func1”] = function () {<br />\n    return “Object1’s Function1 using []”;<br />\n};</p>\n\n<p>// you can also add properties and methods to the native objects<br />\n//  using the prototype object<br />\nDate.prototype.myCustomProperty = “My Custom Property”;<br />\nvar date = new Date();<br />\n//alert(date.myCustomProperty);</p>\n\n<p>// some like the Math object does not have the prototype object<br />\n//  so you add directly<br />\nMath.myCustomProperty = “My Custom Property”;<br />\n//alert(Math.myCustomProperty);</p>\n\n<p>// removing property or function from an object<br />\ndelete obj1.func1;<br />\nobj1.func1(); // displays undefined</p>\n\n<p>// creating a custom object with properties and functions<br />\n// notice you use , to separate each properties and functions in {}<br />\nvar invoice = {<br />\n  taxRate: 0.35,<br />\n  dueDays: 30,<br />\n  getSalesTax: function(subTotal) {<br />\n    return (subTotal * invoice.taxRate);<br />\n  },<br />\n  getTotal: function(subTotal, salesTax) {<br />\n    return (subTotal + salesTax);<br />\n  }<br />\n};</p>\n\n<p>// creating object references<br />\nvar today2 = new Date();<br />\nvar now = today2;</p>\n\n<p>// creating a class<br />\n// you create a constructor function first<br />\nvar Vehicle = function(make, model) {<br />\n    this.make = make;<br />\n    this.model = model;<br />\n    this.miles = 0;<br />\n}</p>\n\n<p>// then create the class methods and other properties<br />\n//  through the prototype object<br />\nVehicle.prototype.drive = function(miles) {<br />\n    this.miles += miles;<br />\n    return this;<br />\n}</p>\n\n<p>Vehicle.prototype.canFly = false;</p>\n\n<p>var myCar = new Vehicle(“Honda”, “CRV”);<br />\nmyCar.drive(300);</p>\n\n<p>// creating a sub class (inheritance)<br />\nvar Car = function(make, model, door, suv) {<br />\n    this.make = make;<br />\n    this.model = model;<br />\n    this.door = door;<br />\n    // example of optional arguments<br />\n    if (arguments.length == 4) {<br />\n        this.suv = suv<br />\n    }<br />\n    else {<br />\n        this.suv = false;<br />\n    };<br />\n    this.miles = 0;<br />\n};</p>\n\n<p>Car.prototype = new Vehicle();</p>\n\n<p>var my2ndCar = new Car(“Honda”, “Odyssey”, 4, false);<br />\nmy2ndCar.drive(50).drive(100);</p>\n\n<p>// notice above the method is called one after the other<br />\n// this is possible if the method is a cascading method<br />\n// a cascading method is one that returns the this object</p>\n\n<p>// looping through the object’s properties and methods<br />\nfor (var property in my2ndCar) {<br />\n    alert(property);<br />\n}</p>\n\n<p>// checking if the object’s property is enumerable<br />\nalert(my2ndCar.propertyIsEnumerable(“make”)); // displays true<br />\nalert(my2ndCar.propertyIsEnumerable(“drive”)); // displays false</p>\n\n<p>// using the in operator<br />\nalert(“make” in my2ndCar); // displays true<br />\nalert(“drive” in my2ndCar); // displays true</p>\n\n<p>// using the instanceof operator<br />\nalert(my2ndCar instanceof Car); // displays true<br />\nalert(my2ndCar instanceof Vehicle); // displays true<br />\nalert(my2ndCar instanceof Object); // displays true<br />\nalert(my2ndCar instanceof String); // displays false</p>\n\n<p>// using the typeof operator<br />\nalert(typeof my2ndCar); // displays object<br />\nalert(typeof Vehicle); // displays function<br />\nalert(typeof Car); // displays function<br />\nalert(typeof my2ndCar.make); // displays string<br />\nalert(typeof my2ndCar.drive); // displays function</p>\n"
    } ,
  
    {
      "title"    : "Design Patterns: Fundamentals",
      "category" : "design-patterns",
      "tags"     : "",
      "url"      : "/tech-blog/2013/09/17/fundamental-design-patterns.html",
      "date"     : "2013-09-17 00:00:00 +0000",
      "content": "<p>Fundamental design patterns are divided into 3 categories:</p>\n\n<ul>\n  <li>Creational\n    <ul>\n      <li><a href=\"/tech-blog/2014/02/11/design-patterns-factory-method-abstract-factory-and-singleton.html\">Singleton</a></li>\n      <li>Builder</li>\n      <li>Prototype</li>\n      <li><a href=\"/tech-blog/2014/02/11/design-patterns-factory-method-abstract-factory-and-singleton.html\">Abstract Factory</a></li>\n      <li><a href=\"/tech-blog/2014/02/11/design-patterns-factory-method-abstract-factory-and-singleton.html\">Factory Method</a></li>\n    </ul>\n  </li>\n  <li>Behavioral\n    <ul>\n      <li>Mediator</li>\n      <li>Visitor</li>\n      <li>Template Method</li>\n      <li>Iterator</li>\n      <li>Command</li>\n      <li>Memento</li>\n      <li><a href=\"/tech-blog/2013/11/06/design-patterns-strategy-observer-and-decorator.html\">Observer</a></li>\n      <li>Interpreter</li>\n      <li>Chain of Responsibility</li>\n      <li>State</li>\n      <li><a href=\"/tech-blog/2013/11/06/design-patterns-strategy-observer-and-decorator.html\">Strategy</a></li>\n    </ul>\n  </li>\n  <li>Structural\n    <ul>\n      <li><a href=\"/tech-blog/2013/11/06/design-patterns-strategy-observer-and-decorator.html\">Decorator</a></li>\n      <li>Proxy</li>\n      <li>Composite</li>\n      <li>Facade</li>\n      <li>Flyweight</li>\n      <li>Bridge</li>\n      <li>Adapter</li>\n    </ul>\n  </li>\n</ul>\n\n<p><strong>EDIT:</strong> The above patterns are called the 23 Gang of Four (GoF) patterns.  More information can be found from this <a href=\"http://www.dofactory.com/Patterns/Patterns.aspx\">link</a>.  The site provides a description, a UML class diagram and C# code as well.</p>\n"
    } ,
  
    {
      "title"    : "HTML Fundamentals",
      "category" : "web-design",
      "tags"     : "",
      "url"      : "/tech-blog/2013/09/14/html-fundamentals.html",
      "date"     : "2013-09-14 00:00:00 +0000",
      "content": "<p>Below are the fundamentals that you need to know to start creating HTML pages.  Good for brushing up your HTML skills if you feel you forgot them already.</p>\n\n<!-- comments -->\n<!-- tags are those enclosed in <> like <html> and <head> -->\n<!-- most tags have opening and closing tags like <p> and </p> -->\n<!-- few tags are self-enclosing tags like <img /> -->\n<!-- from opening tag to closing tag is what is called an element -->\n<!-- attributes are name=\"value\" pairs like in <p id=\"p1\"> -->\n<p>&lt;!DOCTYPE html&gt;<br />\n&lt;html&gt;&lt;/html&gt;<br />\n    &lt;head&gt;&lt;/head&gt;<br />\n        &lt;title&gt;&lt;/title&gt;<br />\n        &lt;link type=“text/css” rel=“stylesheet” href=“stylesheet.css” /&gt;<br />\n    &lt;body&gt;&lt;/body&gt;<br />\n        &lt;p&gt;&lt;/p&gt;<br />\n        &lt;strong&gt;&lt;/strong&gt; <!-- to bold text --><br />\n        &lt;em&gt;&lt;/em&gt; <!-- to italicize text --><br />\n        &lt;h1&gt;&lt;/h1&gt; to &lt;h6&gt;&lt;/h6&gt;<br />\n        &lt;img src=“image.jpg” /&gt;</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    &lt;a href\\=\"URL\"\\&gt;this is a text link&lt;/a\\&gt; &lt;!-- text link --&gt;  \n    &lt;a href\\=\"URL\"\\&gt;&lt;img src\\=\"image.jpg\" /&gt;&lt;/a\\&gt; &lt;!-- image link --&gt;  \n  \n    &lt;ul\\&gt; &lt;!-- you can nest lists --&gt;  \n        &lt;li\\&gt;&lt;/li\\&gt;  \n    &lt;/ul\\&gt;  \n    &lt;ol\\&gt;  \n        &lt;li\\&gt;&lt;/li\\&gt;  \n    &lt;/ol\\&gt;  \n  \n    &lt;!-- attributes for styling text (inline style) --&gt;  \n    &lt;p style\\=\"color:blue; font-size:10px; font-family:Courier\"\\&gt;  \n    &lt;body style\\=\"background-color:brown\"\\&gt;  \n    &lt;h3 style\\=\"text-align:center\"\\&gt;  \n  \n    &lt;table\\&gt;  \n        &lt;thead\\&gt;  \n            &lt;tr\\&gt; &lt;!-- row header --&gt;  \n                &lt;th\\&gt;&lt;/th\\&gt; &lt;!-- column header --&gt;  \n            &lt;/tr\\&gt;  \n        &lt;/thead\\&gt;  \n        &lt;tbody\\&gt;  \n            &lt;tr\\&gt;  \n                &lt;td\\&gt;&lt;/td\\&gt;  \n            &lt;/tr\\&gt;  \n        &lt;tbody\\&gt;  \n    &lt;/table\\&gt;  \n  \n    &lt;!-- attributes for styling table (inline style) --&gt;  \n    &lt;td colspan\\=\"2″ style=\"border:1px solid black\"\\&gt;  \n      \n    &lt;div\\&gt;&lt;/div\\&gt; &lt;!-- for dividing webpage into smaller pieces ---&gt;  \n      \n    &lt;!-- attributes for styling div (inline style) --&gt;  \n    &lt;div style\\=\"width:50px; height:50px\"\\&gt;&lt;/div\\&gt;  \n      \n    &lt;span\\&gt;&lt;/span\\&gt; &lt;!-- for styling even smaller parts like text --&gt;  \n    &lt;p\\&gt;This is black, this is &lt;span style\\=\"color:red\"\\&gt;red&lt;/span\\&gt;!&lt;/p\\&gt;  \n  \n    &lt;!-- NOTE:  \n        &lt;div&gt; is a block level element  \n        &lt;span&gt; is an inline level element  \n        Block level element has new lines before and after  \n         and consumes the whole width available  \n        Inline level element has no new lines,  \n         can be placed aside other elements  \n         and cannot define width  \n    --&gt;  \n</code></pre></div></div>\n\n<p>You could also look into this <a href=\"http://www.codecademy.com/glossary/html\">link</a> for a quick review of HTML basics.</p>\n"
    } ,
  
    {
      "title"    : "Webbing My Way To Frontend Development",
      "category" : "web-design",
      "tags"     : "",
      "url"      : "/tech-blog/2013/09/11/webbing-my-way-to-frontend-development.html",
      "date"     : "2013-09-11 00:00:00 +0000",
      "content": "<p>I just joined the <a href=\"http://www.linkedin.com/groups/Front-End-Developer-Group-2231152?trk=my_groups-b-grp-v\">Front End Developer Group</a> in LinkedIn and came across this posting with a link to a <a href=\"http://fredsarmento.me/frontend-tools/#!\">site</a> listing the best front end tools and resources.  And I say it really is one heck of a list.  For me just beginning to work my way to frontend development, this is really useful.  What actually caught my attention are the list of sites that offer free tutorials, and here they are:</p>\n\n<ul>\n  <li><a href=\"http://www.codecademy.com/\">Codeacademy</a></li>\n  <li><a href=\"http://www.codeschool.com/\">Code School</a></li>\n  <li><a href=\"http://teamtreehouse.com/\">Treehouse</a></li>\n  <li><a href=\"http://www.lynda.com/\">Lynda.com</a></li>\n  <li><a href=\"https://tutsplus.com/\">Tuts+</a></li>\n</ul>\n\n<p>I am so excited now in this journey of mine to learn more about frontend development, because I consider myself to be more middle-tier/backend developer.  I think it is time I get myself into it to bring out my creativity I guess.  Wish me luck!</p>\n"
    } ,
  
    {
      "title"    : "ASP.NET: What are web services?",
      "category" : "asp-net",
      "tags"     : "",
      "url"      : "/tech-blog/2013/06/12/asp-net-what-are-web-services.html",
      "date"     : "2013-06-12 00:00:00 +0000",
      "content": "<ul>\n  <li><strong>Web services</strong> are services provided over the web using standard technologies such as <strong>XML</strong>, a <strong>W3C</strong> standard.</li>\n  <li>Any application on any platform can consume a web service as long as it is able to understand XML.</li>\n  <li>XML is text based, thus it is quick and easy to download and even easier to use.</li>\n  <li>To consume an <strong>ASP.NET web service</strong>, look for an <strong>.asmx</strong> file.</li>\n  <li>An example of a web service is <a href=\"http://www.webservicex.net/ConvertTemperature.asmx\">http://www.webservicex.net/ConvertTemperature.asmx</a>.</li>\n  <li>There are <strong>3 methods</strong> used to communicate with a web service: <strong>HTTP-GET</strong>, <strong>HTTP-POST</strong>, and <strong>SOAP</strong>.</li>\n  <li>\n    <p>In <strong>HTTP GET</strong> and <strong>POST</strong>, the response body is an XML.  Below is an example response from the <strong>ConvertTemperature</strong> web service mentioned above, converting 21.5 degrees Celcius to degrees Farenheit.</p>\n\n    <p>&lt;?xml version=“1.0” encoding=“UTF-8”?&gt;\n  &lt;double xmlns=“http://www.webserviceX.NET/”&gt;70.7&lt;/double&gt;</p>\n\n    <p> </p>\n  </li>\n</ul>\n\n<p> </p>\n\n<ul>\n  <li><strong>SOAP</strong> (<strong>Simple Object Access Protocol</strong>) is basically a well-formed XML created just for the purpose of sending requests and receiving responses to and from the web service.</li>\n  <li>\n    <p>A <strong>SOAP request</strong> is wrapped in an <strong>HTTP-POST</strong>.  The example below is the SOAP request sent to the ConvertTemperature web service, separated into a request header and request body:</p>\n\n    <p>POST /ConvertTemperature.asmx HTTP/1.1\n  Host: www.webservicex.net\n  Content-Type: text/xml; charset=utf-8\n  Content-Length: [length]\n  SOAPAction: “http://www.webserviceX.NET/ConvertTemp”</p>\n\n    <p> </p>\n\n    <p>&lt;?xml version=“1.0” encoding=“utf-8”?&gt;\n  &lt;soap:Envelope xmlns:xsi=“http://www.w3.org/2001/XMLSchema-instance” xmlns:xsd=“http://www.w3.org/2001/XMLSchema” xmlns:soap=“http://schemas.xmlsoap.org/soap/envelope/”&gt;\n    &lt;soap:Body&gt;\n      &lt;ConvertTemp xmlns=“http://www.webserviceX.NET/”&gt;\n        &lt;Temperature&gt;21.5&lt;/Temperature&gt;\n        &lt;FromUnit&gt;degreeCelsius&lt;/FromUnit&gt;\n        &lt;ToUnit&gt;degreeFahrenheit&lt;/ToUnit&gt;\n      &lt;/ConvertTemp&gt;\n    &lt;/soap:Body&gt;\n  &lt;/soap:Envelope&gt;</p>\n\n    <p> </p>\n  </li>\n</ul>\n\n<p> </p>\n\n<ul>\n  <li>\n    <p>The corresponding <strong>SOAP</strong> response is below (response header not shown):</p>\n\n    <p>&lt;?xml version=“1.0” encoding=“utf-8”?&gt;\n  &lt;soap:Envelope xmlns:xsi=“http://www.w3.org/2001/XMLSchema-instance” xmlns:xsd=“http://www.w3.org/2001/XMLSchema” xmlns:soap=“http://schemas.xmlsoap.org/soap/envelope/”&gt;\n    &lt;soap:Body&gt;\n      &lt;ConvertTempResponse xmlns=“http://www.webserviceX.NET/”&gt;\n        &lt;ConvertTempResult&gt;70.7&lt;/ConvertTempResult&gt;\n      &lt;/ConvertTempResponse&gt;\n    &lt;/soap:Body&gt;\n  &lt;/soap:Envelope&gt;</p>\n\n    <p> </p>\n  </li>\n</ul>\n\n<p> </p>\n\n<ul>\n  <li>In the SOAP request and response body, you need to have at the minimum the SOAP tags **<Envelope>** and **&lt;Body&gt;**.  You can also have the optional SOAP tag **&lt;Header&gt;**.  Inside the **&lt;Body&gt;** SOAP tag contains other tags that are specific to the web service.</Envelope></li>\n</ul>\n\n<p> </p>\n\n<p>In my next post, I will talk about what is required to create a web service in ASP.NET.</p>\n"
    } ,
  
    {
      "title"    : "General: On a 64-bit OS/machine, what will be the issues in running your application that uses Access database directly or indirectly using SQL Server’s Linked Server object",
      "category" : "generalms-accesssql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2013/06/09/general-on-a-64-bit-osmachine-what-will-be-the-issues-in-running-your-application-that-uses-access-database-directly-or-indirectly-using-sql-servers-linked-server-object.html",
      "date"     : "2013-06-09 00:00:00 +0000",
      "content": "<p>If you have an application, say in <strong>.NET</strong>, that uses an <strong>Access</strong> database in some way or the other, or uses <strong>SQL Server</strong> that in turn links to an Access database through the <strong>Linked Server</strong> object, and you want to run your application and also the SQL Server on a <strong>64-bit</strong> OS/machine, you might be in for a lot of surprises.</p>\n\n<p> </p>\n\n<p>Here is why:</p>\n\n<ul>\n  <li>The <strong>Microsoft.Jet.OLEDB.4.0</strong> is only available on 32-bit.  Same with <strong>Microsoft.ACE.OLEDB.12.0</strong> if you are using a later version of Access like <strong>2007</strong> and up.  You can still run them on a 64-bit OS/machine in <strong>WoW64</strong> (a subsystem in 64-bit Windows that allows 32-bit applications to run on them).  Only problem is that the application that uses them need to run in 32-bit mode.  So much for running your application on 64-bit eh.  But fear not, there is a solution, although many of you might stay away from it, and that is linking your Access database in SQL Server and  having your application connect to the SQL Server instead.  So now you can run your application in 64-bit mode.</li>\n</ul>\n\n<p> </p>\n\n<ul>\n  <li>If you have a <strong>SQL Server</strong> that links to an <strong>Access</strong> database through the <strong>Linked Server</strong> object, you cannot install a 64-bit version of SQL Server on a 64-bit OS/machine or else your linked server to the Access database will not work.  You have to install a 32-bit version of the SQL Server.  Yes, that is the only solution, for now, until Microsoft comes up with a 64-bit version of the Access database engine, if that will still come.</li>\n</ul>\n\n<p> </p>\n\n<ul>\n  <li>If you have created a link to your Access database from your SQL Server, you might encounter a similar collation problem below when running your T-SQL queries involving joins to the linked server Access database:</li>\n</ul>\n\n<blockquote>\n  <p>Cannot resolve the collation conflict between “Latin1_General_CI_AS” and “SQL_Latin1_General_CP1_CI_AS” in the equal to operation.</p>\n</blockquote>\n\n<p> </p>\n\n<p>One way to solve this problem is by adding the <strong>COLLATE DATABASE_DEFAULT</strong> to every text fields that you are comparing with either on the <strong>WHERE</strong> or <strong>JOIN</strong> clause, such as the example below:</p>\n\n<p>SELECT *\nFROM \n    SQLServerTable1 s\n    INNER JOIN LinkedServerAccessDB…AccessDBTable1 AS a\n        ON s.DateField1 = a.DateField1\n        AND s.IntField1 = a.IntField1\n        AND s.TextField1 COLLATE DATABASE_DEFAULT = a.TextField1 COLLATE DATABASE_DEFAULT\n        AND s.TextField2 COLLATE DATABASE_DEFAULT = a.TextField2 COLLATE DATABASE_DEFAULT</p>\n\n<p> </p>\n\n<p> </p>\n\n<ul>\n  <li>Be aware that in using a linked server to an Access database that any <strong>DELETE</strong> statements that you execute within a transaction (where you can commit or rollback) will not work (at least for me it did not work) and will give you the below error message:</li>\n</ul>\n\n<blockquote>\n  <p>The requested operation could not be performed because OLE DB provider “Microsoft.Jet.OLEDB.4.0” for linked server “LinkedServerAccessDB” does not support the required transaction interface.</p>\n</blockquote>\n\n<p> </p>\n\n<p>Solution to this is to bring all DELETE statements out of the transaction and execute them after committing the transaction.</p>\n\n<p> </p>\n\n<p>So that’s it for this topic.  If you have any questions, feel free to comment :).</p>\n"
    } ,
  
    {
      "title"    : "SQL Server: Error Handling",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2013/05/29/sql-server-error-handling-2.html",
      "date"     : "2013-05-29 00:00:00 +0000",
      "content": "<p><strong>Error handling</strong> in SQL Server is similar to C#’s exception handling.  Syntax is below:</p>\n\n<p>BEGIN TRY\n    -- this is where you put your statements\nEND TRY\nBEGIN CATCH\n    -- this is where you handle the error\nEND CATCH</p>\n\n<p> </p>\n\n<p> </p>\n\n<p>And of course you can get more information about the error using the following:</p>\n\n<ul>\n  <li><strong>ERROR_PROCEDURE()</strong> – returns name of stored procedure or trigger where the error occurred</li>\n  <li><strong>ERROR_LINE()</strong> – returns the line number in the procedure or trigger where the error occurred</li>\n  <li><strong>ERROR_NUMBER()</strong> – returns the error number</li>\n  <li><strong>ERROR_MESSAGE()</strong> – returns the error message</li>\n</ul>\n\n<p> </p>\n\n<p>The following might also be useful in handling your errors:</p>\n\n<ul>\n  <li><strong>@@TRANCOUNT</strong> – holds the # of transactions ongoing; useful if you are using transactions and want to know if you have pending transactions after catching an error (<strong>IF @@TRANCOUNT &gt; 0</strong>) so you can maybe rollback</li>\n  <li><strong>@@PROCID</strong> – returns the object ID of the current stored procedure, UDF, or trigger</li>\n  <li><strong>OBJECT_NAME()</strong> – returns the name of the database object referred to by the object ID; passing <strong>@@PROCID</strong> will return the name of the current stored procedure, UDF, or trigger (<strong>OBJECT_NAME(@@PROCID</strong>)</li>\n  <li><strong>USER_NAME()</strong> – returns database user name (e.g. <strong>dbo</strong>); for more info go <a href=\"http://msdn.microsoft.com/en-us/library/ms188014(v=sql.110).aspx\">here</a></li>\n  <li><strong>SYSTEM_USER</strong> – returns the current Windows or SQL Server login name depending on how the user is logged in; for more info go <a href=\"http://msdn.microsoft.com/en-us/library/ms179930(v=sql.110).aspx\">here</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "HTML, CSS, Javascript, and jQuery: Putting them all together (Part 3)",
      "category" : "javascriptweb-design",
      "tags"     : "",
      "url"      : "/tech-blog/2013/05/20/html-css-javascript-and-jquery-putting-them-all-together-part-3.html",
      "date"     : "2013-05-20 00:00:00 +0000",
      "content": "<p><em>jQuery</em> is one of the Javascript frameworks out there, and it’s the most popular.  Basically it lets you write less Javascript code and do complicated things using simple calls to the framework. </p>\n\n<p>To use jQuery in your HTML page, first you need to download the library from it’s website <a href=\"http://jquery.com/\">jQuery.com</a>.  Just like adding an external Javascript file, you can point to the jQuery library you just downloaded using the _<script>_ tag’s _src_ attribute. </script></p>\n\n<p>Another way to add jQuery to your HTML page without downloading and hosting it yourself, is to include it from a <em>CDN (Content Delivery Network)</em>  like Google and Microsoft.  You can save download time this way if users have visited others sites that point their jQuery to one of these CDNs.</p>\n\n<p>jQuery’s syntax revolves around the idea of selecting or querying HTML elements and performing action on the elements.  Below is the basic syntax:</p>\n\n<p>$(selector).action()</p>\n\n<p>The $ indicates it’s a jQuery.  So if you see $ in an HTML page source, you know it’s using jQuery.  The selector is pretty much like the CSS selector.  The action defines what action needs to be done on the selected element.  Below is an example jQuery code:</p>\n\n<head>  \n    &lt;script src=\"//ajax.aspnetcdn.com/ajax/jQuery/jquery-1.9.1.min.js\"\\&gt;  \n        &lt;/script&gt;  \n    <script>  \n        $(document).ready(function(){  \n            $(\"p\").click(function(){  \n                alert(\"I'm a jQuery code!!!\");  \n            });  \n        });  \n    </script>  \n</head>\n\n<p>In the example above, I pointed my jQuery library to Microsoft’s CDN in the first _<script>_ tag.  My jQuery code is located on the second _<script>_ tag.  What it does is display a message when the _&lt;p&gt;_ tag is clicked, same as in my previous post but this time using jQuery.  It still uses Javascript coding but it adds it’s jQuery syntax on top of it.  You will notice that the code is wrapped inside the jQuery document ready event.  This is the usual practice when doing jQuery to ensure that the document is fully loaded.</script></script></p>\n\n<p>So now you know how <em>HTML</em>, <em>CSS</em>, <em>Javascript</em>, and <em>jQuery</em> ties together, it’s time to move forward to more meaty stuff, get more familiar and learn more about what these technologies can do.  This ends my 3-part post on this topic.  Below are the links to my other parts of this post:</p>\n\n<ul>\n  <li><a href=\"https://rodansotto.github.io/tech-blog/2013/05/19/web-ui-html-css-javascript-and-jquery-putting-them-all-together-part-1.html\">Web UI: HTML, CSS, Javascript, and jQuery: Putting them all together (Part 1)</a></li>\n  <li><a href=\"https://rodansotto.github.io/tech-blog/2013/05/20/web-ui-html-css-javascript-and-jquery-putting-them-all-together-part-2.html\" title=\"Web UI- HTML, CSS, Javascript, and jQuery- Putting them all together (Part 1)\">Web UI- HTML, CSS, Javascript, and jQuery- Putting them all together (Part 2)</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "HTML, CSS, Javascript, and jQuery: Putting them all together (Part 2)",
      "category" : "javascriptweb-design",
      "tags"     : "",
      "url"      : "/tech-blog/2013/05/20/html-css-javascript-and-jquery-putting-them-all-together-part-2.html",
      "date"     : "2013-05-20 00:00:00 +0000",
      "content": "<p>On my previous <a href=\"https://rodansotto.github.io/tech-blog/2013/05/19/web-ui-html-css-javascript-and-jquery-putting-them-all-together-part-1.html\">post</a>, I talked about <em>HTML</em> and <em>CSS</em>.  Now I’m going to talk about <em>Javascript</em>. </p>\n\n<p>Javascript is a popular scripting language that makes an HTML page dynamic.  To add Javascript code, you use the _<script>_ tag and you can put them in the _&lt;head&gt;_ or in the _&lt;body&gt;_ section of the HTML page.  It is recommended to put all of them in the _&lt;head&gt;_ section.  Below is an example of a Javascript function being called on a click event of the _&lt;p&gt;_ tag.</script></p>\n\n<head>  \n    &lt;script type=\"text/javascript\"\\&gt;  \n        function myFunction()   \n        {  \n            alert(\"Hello, Universe!!!\");  \n        }  \n    &lt;/script&gt;  \n</head>\n<body>  \n    &lt;p style=\"font-weight: bold; color: #0000FF\" onclick=\"myFunction()\"\\&gt;  \n        Hello, World!!!  \n    &lt;/p&gt;  \n</body>\n\n<p>Remember that Javascript code are executed as the HTML page is being parsed.  The example below will display the message when the HTML page is being loaded without having to wait for any event.  Notice that the Javascript code is not contained in a function declaration like the example above.</p>\n\n<head>  \n    &lt;script type=\"text/javascript\"\\&gt;  \n        alert(\"Javascript code not belonging to any function\");  \n    &lt;/script&gt;  \n</head>\n\n<p>If you have lots of Javascript code, it is preferred to put them in an external file with extension <em>.js</em> and use the _<script>_ tag’s _src_ attribute to point to this file.  That way you can also use this file in the other HTML pages.</script></p>\n\n<head>  \n    &lt;script src=\"MyJavaScript.js\"\\&gt;&lt;/script&gt;  \n</head>\n<body>  \n    &lt;p style=\"font-weight: bold; color: #0000FF\"   \n            onclick=\"myAnotherFunction()\"\\&gt;  \n        Hello, World!!!  \n    &lt;/p&gt;  \n</body>\n\n<p>The file <em>MyJavascript.js</em> contains the following Javascript code:</p>\n\n<p>function myAnotherFunction()<br />\n{<br />\n    alert(“Hello, Big Bang!!!”);<br />\n}</p>\n\n<p>Next post, I’ll cover the <em>jQuery</em>.</p>\n"
    } ,
  
    {
      "title"    : "HTML, CSS, Javascript, and jQuery: Putting them all together (Part 1)",
      "category" : "javascriptweb-design",
      "tags"     : "",
      "url"      : "/tech-blog/2013/05/19/html-css-javascript-and-jquery-putting-them-all-together-part-1.html",
      "date"     : "2013-05-19 00:00:00 +0000",
      "content": "<p><em>HTML</em> describes how the web page will look like.  Below is an example of an HTML page (created using Visual Studio 2012 by the way).  You have the <em>&lt;!DOCTYPE&gt;</em>, <em>&lt;html&gt;</em>, <em>&lt;head&gt;</em>, and <em>&lt;body&gt;</em> tags as always.</p>\n\n<p>&lt;!DOCTYPE html&gt;<br />\n&lt;html xmlns=“http://www.w3.org/1999/xhtml”&gt;<br />\n&lt;head&gt;<br />\n    &lt;title&gt;Example HTML Page&lt;/title&gt;<br />\n&lt;/head&gt;<br />\n&lt;body&gt;<br />\n    &lt;p&gt; Hello, World!!! &lt;/p&gt;<br />\n&lt;/body&gt;<br />\n&lt;/html&gt;</p>\n\n<p><em>CSS</em> was created to solve the problem of formatting an HTML page.  Everything that has got to do with style and layout should be done through CSS.  So how do we put CSS in an HTML page?  There are 3 ways:</p>\n\n<ul>\n  <li><em>Inline style</em>.  This is the least preferred way to add CSS because you will be mixing content with presentation.  Below is an example of an inline style.  You have the <em>style</em> attribute added to an HTML tag which can contain any CSS property inside the “”.</li>\n</ul>\n\n<p>&lt;p style=“font-weight: bold; color: #0000FF”&gt;<br />\n    Hello, World!!!<br />\n&lt;/p&gt;</p>\n\n<ul>\n  <li><em>Internal style sheet</em>.  You use this if you want to apply the style throughout the page.  The example below will style all <em>&lt;p&gt;</em> tags that are defined in the HTML page.  You use the _<style>_ tag under the _&lt;head&gt;_ section of the HTML page to contain your CSS declarations.</style></li>\n</ul>\n\n<p>&lt;head&gt;<br />\n    &lt;style type=“text/css”&gt;<br />\n        p {<br />\n            font-family: Arial, Helvetica, sans-serif;<br />\n            font-style: italic;<br />\n            color: #00FF00;<br />\n        }<br />\n    &lt;/style&gt;<br />\n&lt;/head&gt;</p>\n\n<ul>\n  <li><em>External style sheet</em>.  This is the preferred method.  Not only is the presentation separate from the content, but it can be reused in other HTML pages.  Below is how you add an external style sheet to an HTML page.  You use the <em><link /></em> tag under the <em>&lt;head&gt;</em> section of the HTML page.</li>\n</ul>\n\n<p>&lt;head&gt;<br />\n    &lt;link href=“MyStyleSheet.css” rel=“stylesheet” type=“text/css” /&gt;<br />\n&lt;/head&gt;</p>\n\n<p>The file <em>MyStyleSheet.css</em> contains the following CSS declarations:</p>\n\n<p>p {border-style: solid; background-color: #00FF00;}</p>\n\n<p><em>What if we have a CSS property declared in more than one place?</em>  If that happens, overriding will take place, with the inline style being the highest priority overriding the ones declared in both the internal or external style sheet, with internal style sheet second, and external style sheet third.  Also, if you place the <em><link /></em> tag after the _<style>_ tag, the external style sheet will override the internal style sheet.</style></p>\n\n<p><em>What is the syntax for declaring CSS property then?</em>  Easy.  You just have to specify a <em>selector</em> and one or more <em>declarations</em>.  Selector would be, in our example above, <em>p</em>, an HTML tag.  It can also be the tag’s attribute <em>id</em> or <em>class</em>, or many others as well which I will be discussing on another post geared towards CSS.</p>\n\n<p>Declarations are the <em>name: value;</em> pairs inside the curly braces <em>{}</em>.  In our example above, declarations would be the <em>{border-style: solid; background-color: #00FF00;}</em>.  You can see the CSS property <em>border-style</em> is set to <em>solid</em> value.</p>\n\n<p><a href=\"http://www.w3schools.com/\">W3Schools</a> has a nice visual way of explaining the CSS syntax:</p>\n\n<p><img src=\"/tech-blog/assets/images/selector.gif\" alt=\"\" /></p>\n\n<p>So that’s it for HTML and CSS.  On my next post, I will be talking about the <em>Javascript</em> and <em>jQuery</em> part.</p>\n"
    } ,
  
    {
      "title"    : "C#: How many versions of C# do we have right now?",
      "category" : "c-sharp",
      "tags"     : "",
      "url"      : "/tech-blog/2013/05/13/c-how-many-versions-of-c-do-we-have-right-now.html",
      "date"     : "2013-05-13 00:00:00 +0000",
      "content": "<p>The latest version of <strong>C#</strong> that came with <strong>Visual Studio 2012</strong> and <strong>.NET Framework 4.5</strong> is <strong>5.0</strong>.  For those who are still working on <strong>.NET Framework 2.0</strong>, the version of C# you are using is <strong>2.0</strong>.  Between these, you have <strong>3.0</strong> and <strong>4.0</strong>.  So naturally you might ask what are the differences between these versions?  Don’t fear, help is here ;).  Fortunately, there are some information on the Internet that can provide you with these differences and in more detail than I can possibly explain here in my post.  Below are the links you can go to.  Enjoy!</p>\n\n<ul>\n  <li><a href=\"http://en.wikipedia.org/wiki/C_Sharp_(programming_language)#Versions\">Summary of differences in versions</a></li>\n  <li><a href=\"http://msdn.microsoft.com/en-us/library/bb308966.aspx\">What’s new in C# 3.0</a></li>\n  <li><a href=\"http://msdn.microsoft.com/en-us/magazine/ff796223.aspx\">What’s new in C# 4.0</a></li>\n  <li><a href=\"http://blogs.msdn.com/b/mvpawardprogram/archive/2012/03/26/introduction-of-new-features-in-c-5-0.aspx\">What’s new in C# 5.0</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "SQL Server: Common Table Expression (CTE), ROW_NUMBER(), RANK(), Derived Table, OPENXML()",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2013/05/08/sql-server-common-table-expression-cte-row_number-rank-derived-table-openxml.html",
      "date"     : "2013-05-08 00:00:00 +0000",
      "content": "<ul>\n  <li>\n    <p><strong>Common Table Expression (CTE)</strong> is easy to use since you don’t have to create a table or even drop them after use and you can reference it multiple times and anywhere in the query.  You would use it like this in it’s simplest form:</p>\n\n    <p>WITH Table2 AS\n  (\n      SELECT *\n      FROM Table1\n  )\n  SELECT *\n  FROM Table2</p>\n\n    <p> </p>\n  </li>\n</ul>\n\n<p> </p>\n\n<ul>\n  <li>\n    <p><strong>ROW_NUMBER()</strong> and <strong>RANK()</strong> is useful in numbering or ranking the records based on a criteria.  Both of them are used pretty much the same way and below is an example of using <strong>RANK()</strong> in it’s simplest form:</p>\n\n    <p>SELECT *, RANK() OVER(ORDER BY Grade DESC) AS StudentRank\n  FROM StudentGrades</p>\n\n    <p> </p>\n  </li>\n</ul>\n\n<p> </p>\n\n<ul>\n  <li>\n    <p><strong>Derived Table</strong> allows you to substitute a query in place of a table in the <strong>FROM</strong> or <strong>JOIN</strong> clause for example.  Below is one such use:</p>\n\n    <p>SELECT *\n  FROM\n  (\n      SELECT *\n      FROM Table1\n  ) AS Table2</p>\n\n    <p> </p>\n  </li>\n</ul>\n\n<p> </p>\n\n<ul>\n  <li><strong>OPENXML()</strong> is useful if you want to view your XML data in a series of rows and columns pretty much like a table.  For more information, click <a href=\"http://msdn.microsoft.com/en-us/library/ms186918(v=sql.90).aspx\">here</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : ".NET Framework: From 2.0 to 3.0, to 3.5, to 4.0, and finally to 4.5, what’s the difference?",
      "category" : "net",
      "tags"     : "",
      "url"      : "/tech-blog/2013/05/05/net-framework-from-2-0-to-3-0-to-3-5-to-4-0-and-finally-to-4-5-whats-the-difference.html",
      "date"     : "2013-05-05 00:00:00 +0000",
      "content": "<p>I thought it would be nice to know what the differences between these <strong>.NET Framework</strong> versions are.  I will not be discussing here the differences in versions of <strong>ASP.NET</strong> as this will be a topic on its own under the ASP.NET section.  Same with <strong>C#</strong>, it will be a topic on its own under the C# section.  Plus I won’t be discussing all the differences here, only the things that matter to me most.  So let’s start.</p>\n\n<ul>\n  <li><strong>.NET Framework 3.0</strong>\n    <ol>\n      <li>The only update to this version (from <strong>2.0</strong>) is the inclusion of the following technologies:</li>\n      <li><strong>Windows Communication Foundation (WCF)</strong>.  Important to follow this technology if you are into developing service-oriented applications.</li>\n      <li><strong>Windows Presentation Foundation (WPF)</strong> .  If you are mostly developing web applications, you probably will not be needing this.</li>\n      <li><strong>Windows Workflow Foundation (WF)</strong>.</li>\n      <li><strong>Windows Cardspace</strong>.</li>\n      <li><strong>.NET Framework 3.0</strong> did not come with any version of Visual Studio.  But <strong>.NET Framework 2.0</strong> did and it came with <strong>Visual Studio 2005</strong></li>\n    </ol>\n  </li>\n  <li>\n    <p><strong>.NET Framework 3.5</strong></p>\n\n    <ol>\n      <li>The following are some of the features added:</li>\n      <li><strong>Language-Integrated Query (LINQ)</strong> which allows you to query .NET Framework collections, SQL Server databases, ADO.NET Datasets, and XML documents.</li>\n      <li><strong>Workflow Services</strong> which allow you to author <strong>WCF</strong> services using <strong>WF</strong> or expose existing <strong>WF</strong> workflow as a <strong>WCF</strong> service.</li>\n      <li><strong>WCF REST Programming Model</strong> which allows you to expose WCF web services through basic <strong>HTTP</strong> requests without requiring <strong>SOAP</strong>.\n        <ul>\n          <li>You can now easily work with syndication feeds in <strong>Atom</strong>, <strong>RSS</strong>, or other custom formats, if you’re into blogging applications.</li>\n          <li>With new support to <strong>ASP.NET AJAX</strong> and <strong>Javascript Object Notation (JSON)</strong> data format, you can now expose operations from a WCF service to AJAX clients.</li>\n          <li>So what is <strong>REST</strong> and <strong>JSON</strong>?</li>\n          <li><strong>REST</strong> which stands for <strong>Representational State Transfer</strong> is basically an architectural style attributed to a distributed system, like the <strong>World Wide Web</strong>, consisting of clients and servers, dealing with requests and responses revolving around resources.</li>\n          <li><strong>JSON</strong> is an alternative to <strong>XML</strong> for sending data over a network connection that is also text-based like XML but derived from the <strong>Javascript</strong> language.  It would look something like this:</li>\n        </ul>\n      </li>\n    </ol>\n\n    <p>{\n      “firstName”: “John”,\n      “lastName”: “Smith”,\n      “age”: 25,\n      “address”: {\n          “streetAddress”: “21 2nd Street”,\n          “city”: “New York”,\n          “state”: “NY”,\n          “postalCode”: 10021\n      },\n      “phoneNumbers”: [\n          {\n              “type”: “home”,\n              “number”: “212 555-1234”\n          },\n          {\n              “type”: “fax”,\n              “number”: “646 555-4567”\n          }\n      ]\n  }</p>\n\n    <ol>\n      <li><strong>Peer-to-Peer Networking</strong> which allows you to share and collaborate between several network devices without using any server.</li>\n      <li><strong>ADO.NET Entity Framework</strong> which allows you to work with data in a much higher level of abstraction without having to concern with tables and columns, thus reducing code required to create and maintain data-oriented applications.</li>\n      <li><strong>.NET Framework 3.5</strong> was released with <strong>Visual Studio 2008</strong>.</li>\n      <li>For a complete list of what’s new in 3.5, go to this <a href=\"http://msdn.microsoft.com/en-us/library/bb332048(v=vs.90).aspx\">link</a>.</li>\n    </ol>\n  </li>\n  <li><strong>.NET Framework 4.0</strong>\n    <ol>\n      <li>The following are what’s new in this version:</li>\n      <li><strong>In-Process Side-by-Side Execution</strong> which allows you in your application to load and start multiple versions of .NET Framework in the same process.</li>\n      <li><strong>Application Domain Diagnostics and Performance Monitoring</strong> which allows you to monitor all application domains in the process, not just the process itself.</li>\n      <li><strong>Parallel Computing</strong> which allows you to write efficient, fine-grained, and scalable parallel code in a natural idiom without having to work directly with threads and thread pool.</li>\n      <li>The rest of the changes are mostly improvements on .NET Framework 3.5.</li>\n      <li><strong>.NET Framework 4.0</strong> was released with <strong>Visual Studio 2010</strong>.</li>\n      <li>For a complete list of what’s new in 4.0, go to this <a href=\"http://msdn.microsoft.com/en-us/library/vstudio/ms171868(v=vs.100).aspx\">link</a>.</li>\n    </ol>\n  </li>\n  <li><strong>.NET Framework 4.5</strong>\n    <ol>\n      <li>Some of the features added are:</li>\n      <li><strong>.NET for Windows Store apps</strong> which allows you to build Windows Store apps for Windows.</li>\n      <li><strong>Portable Class Libraries</strong> which allow you to build assemblies that can work without code modification on multiple platforms like <strong>Windows 7</strong>, <strong>Windows 8</strong>, <strong>Silverlight</strong>, <strong>Windows Phone</strong>, and <strong>XBox 360</strong>.</li>\n      <li>The rest of the changes are mostly improvements on .NET Framework 4.0.</li>\n      <li><strong>.NET Framework 4.5</strong> was released with <strong>Visual Studio 2012</strong>.</li>\n      <li>For a complete list of what’s new in 4.5, go to this <a href=\"http://msdn.microsoft.com/en-us/library/ms171868.aspx\">link</a>.</li>\n    </ol>\n  </li>\n</ul>\n"
    } ,
  
    {
      "title"    : "HTML: DOCTYPE, Elements, Attributes, Paragraphs, Empty HTML Elements, Formatting, Link Element, Head Element",
      "category" : "web-design",
      "tags"     : "",
      "url"      : "/tech-blog/2013/05/03/html-doctype-elements-attributes-paragraphs-empty-html-elements-formatting-link-element-head-element.html",
      "date"     : "2013-05-03 00:00:00 +0000",
      "content": "<p>So I just went through some HTML tutorials at W3Schools and I will just jot down some notes to remind me by.</p>\n\n<ul>\n  <li><em>&lt;!DOCTYPE html&gt;</em> is the first line you see in a HTML page.</li>\n  <li>HTML elements are those inside the start/opening tag (i.e. <em>&lt;html&gt;</em>) and end/closing tag (i.e. <em>&lt;/html&gt;</em>).</li>\n  <li>Attributes are found inside HTML elements that come in name/value pairs like <em>name=”value”</em>.</li>\n  <li>Paragraph tags are <em>&lt;p&gt;</em> and <em>&lt;/p&gt;</em>.</li>\n  <li>An example of an empty HTML element is the <em><br /></em> with no end/closing tag, but is recommended to close it like this <em><br /></em>.</li>\n  <li>There are a bunch of formatting tags available in HTML besides the usual bold and italic ones.  They are categorized as text formatting tags, computer output tags, and citation, quotations, and definition tags.  More information can be found here at this <a href=\"http://w3schools.com/html/html_formatting.asp\">link</a>.</li>\n  <li>The HTML Link (_<a>_ ) has an <em>id</em> attribute that you can use (i.e. <em>id=”mybookmark”</em> ) to create a bookmark inside an HTML document.  So in another _<a>_ tag you can set its <em>href</em> attribute to point to that bookmark (i.e. <em>href=”#mybookmark”</em> ).</a></a></li>\n  <li>Always add trailing slash to subfolder references in an HTML Link href attribute (i.e. <em>“www.w3schools.com/html/ “</em> ).</li>\n  <li>The <em>&lt;head&gt;</em> element is a container for _<title>_, _<style>,_ _<meta />_, _<link />_, _<script>_, _<noscript>_, and _<base />_.</noscript></script></style></title></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "Web Design: Introduction",
      "category" : "web-design",
      "tags"     : "",
      "url"      : "/tech-blog/2013/05/01/web-design-introduction.html",
      "date"     : "2013-05-01 00:00:00 +0000",
      "content": "<p>I created this section so I can take down some notes and be able to go back to them as I learn more about <em>HTML</em>, <em>CSS</em>, <em>Javascript</em>, and <em>AJAX</em>, especially now that there is a new version of <em>HTML 5</em> and <em>CSS 3</em>.  I have used them occasionally at my previous jobs but I feel I need to brush up on them and widen my knowledge.  Plus, I also want to learn other technologies out there like <em>jQuery</em>, etc.  To help me achieve this, I will mostly be referring to W3Schools tutorials.  I have added a link to their site under the <em>Favorites Links</em>.  So, let’s see how this goes and wish me luck.</p>\n"
    } ,
  
    {
      "title"    : "C#: Quick facts on numeric suffixes, verbatim string, null coalescing, short-circuiting, main entry point, fall through switch-case",
      "category" : "c-sharp",
      "tags"     : "",
      "url"      : "/tech-blog/2013/04/30/c-quick-facts-on-numeric-suffixes-verbatim-string-null-coalescing-short-circuiting-main-entry-point-fall-through-switch-case.html",
      "date"     : "2013-04-30 00:00:00 +0000",
      "content": "<p>Use a <strong>numeric suffix</strong> to explicitly declare a numeric literal to be of a specific numeric type (<strong>U</strong> for unsigned int, <strong>L</strong> for long, <strong>UL</strong> for unsigned long, <strong>M</strong> for decimal, <strong>F</strong> for float, and <strong>D</strong> for double).</p>\n\n<p>uint a = 123U;\nlong b = 1234L;\nulong c = 1234UL;\ndecimal d = 123.4M;\nfloat e = 123.4F;\ndouble f = 123.4D;</p>\n\n<p> </p>\n\n<p>Use <strong>verbatim string</strong> (prefixed with the <strong>@</strong> character) if you don’t want the characters in your string translated (e.g. if you have escape sequences, etc.), except for the double quote escape sequence, as in below:</p>\n\n<p>string s = @”Hello \\t ““Universe””!”; // Hello \\t “Universe”!</p>\n\n<p> </p>\n\n<p>Use <strong>null coalescing</strong> (<strong>??</strong>) if the variable you are working on can be null and you don’t want null.</p>\n\n<p>int? i = null;\nint j = i ?? 0;</p>\n\n<p> </p>\n\n<table>\n  <tbody>\n    <tr>\n      <td>Use **</td>\n      <td>** or **&amp;** if you are not **short-circuiting**, otherwise use **|</td>\n      <td>** or **&amp;&amp;**.  </td>\n    </tr>\n  </tbody>\n</table>\n\n<p>There are actually <strong>4 types of main entry point</strong> in a C# program.  They are:</p>\n\n<p>static void Main()\n{\n    // …\n}</p>\n\n<p>static int Main()\n{ \n    // … \n    return 0; \n}</p>\n\n<p>static void Main(string[] args) \n{ \n    // … \n}</p>\n\n<p>static int Main(string[] args) \n{ \n    // … \n    return 0; \n}</p>\n\n<p> </p>\n\n<p>There is no cascading of <strong>case</strong>  in <strong>switch</strong> which is why each case including the <strong>default</strong> need to have the <strong>break</strong>.  But you can cascade cases that have no statements, as in below.  Useful when you need to handle multiple cases in the same way.</p>\n\n<p>switch (i)\n{\n    case 1:\n    case 2:\n        Console.WriteLine(“1 or 2”);\n        break;\n    default:\n        break;\n}</p>\n"
    } ,
  
    {
      "title"    : "General: C#, HTML, CSS, Javascript, AJAX",
      "category" : "general",
      "tags"     : "",
      "url"      : "/tech-blog/2013/04/28/general-c-html-css-javascript-ajax.html",
      "date"     : "2013-04-28 00:00:00 +0000",
      "content": "<p>My previous job requires me to work on <strong>C#</strong>, and occasionally on <strong>HTML</strong>, <strong>CSS</strong>, <strong>Javascript</strong>, and <strong>AJAX</strong>.  To be honest, I like C# more than VB.NET, being a C programmer for a while way back starting from University days and was very good at it.  So I created a <strong>C#</strong> category on my blog because I plan on keeping my C# skills and improving on it.  I also created a <strong>Web UI</strong> category where I can put all my notes about HTML, CSS, Javascript, AJAX, and more.  I don’t use these skills much but since I wanted to work more on the front end of web development for some time now, I plan to keep these skills up to date and what better way to do this is to make use of the W3Schools site.  So I added a link to the website under <strong>Favorite Links</strong>.  I am so excited about these technologies that I can’t wait to be blogging more often.  Happy blogging!</p>\n"
    } ,
  
    {
      "title"    : "SQL Server: Multi-Tenant Data Architecture",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2013/04/25/sql-server-multi-tenant-data-architecture.html",
      "date"     : "2013-04-25 00:00:00 +0000",
      "content": "<p>As promised in my previous post, I will look briefly into ways on how to architect multi-tenant data.  Multi-tenant means servicing multiple clients or tenants.  In the case of a data architecture, it’s how to store data from multiple clients.  I learned there are three options to do this, not just two.  I know the two of them are the most common which I will talk first.</p>\n\n<p>First option, is using <strong>Separate Databases</strong>.  This is the simplest approach of all the three.  Basically each client has its own copy of the database, and sometimes depending on the client’s strict security requirements, can be located on a server separate from the others.  It may be inexpensive in terms of development cost to do this way initially, but in the long run, it will be more expensive in terms of operational cost.</p>\n\n<p>Second option, is using <strong>Shared Database and Shared Schema</strong>.  Only one database and one set of tables are used to store all the clients’ data.  The only thing that differentiates them from each other is an ID unique to each client.  In contrast to using separate databases, using shared database and shared schema has a higher development cost but a lower operational cost.</p>\n\n<p>These two options are popular, at least in my experience.  They are actually mostly used by application service provider companies.  In my last company, they use the separate databases option.  The company before that, I know they used the shared database and shared schema option.  Little did I know that there is a third option, which I still have yet to see implemented in an ASP company.</p>\n\n<p>So the third option, is using <strong>Shared Database and Separate Schemas</strong>.  What this means is that there is only database but each client has its own copy of the set of tables that are grouped into a schema unique to each client.  So basically, when onboarding a new client, a schema unique to the client is created first and assigned and defaulted to the client account.  From within that client’s schema, you then create the tables with the schema name as the qualifier for naming the tables to be created.  When accessing the client’s data, since the client’s default schema is set, you don’t have to qualify the table names with the client’s schema name.  Therefore, you use the same SQL statements for all clients.  There is no duplication of SQL statements here.</p>\n\n<p>These three options have their own pros and cons which I won’t be talking here.  This is just to give an idea what these options are.  If you need more information, check this <a href=\"http://msdn.microsoft.com/en-us/library/aa479086.aspx\">link</a>.</p>\n"
    } ,
  
    {
      "title"    : "ASP.NET: GET, POST, IsPostBack, QueryString, and Form",
      "category" : "asp-net",
      "tags"     : "",
      "url"      : "/tech-blog/2013/04/21/asp-net-get-post-ispostback-querystring-and-form.html",
      "date"     : "2013-04-21 00:00:00 +0000",
      "content": "<p>I have been asked a couple of times in my job interviews about <strong>GET</strong>, <strong>POST</strong>, <strong>IsPostBack</strong>, <strong>QueryString</strong>, and <strong>Forms</strong>.  These are the basics that one who has worked on ASP.NET should know.  Sometimes you get focused on higher level stuff especially if you are working with wrappers or some sort of framework on top of ASP.NET that you lose focus on the basics.  It happens.  At least to me it happens.</p>\n\n<p>So what is <strong>GET</strong>?  <strong>GET</strong> is one of the most common HTTP commands, just like POST, that is sent by the browser to the web server.  It tells the web server to get or fetch a page for the browser.  So when you type a URL</p>\n\n<p><a href=\"http://rodansotto.wordpress.com\">http://rodansotto.wordpress.com</a></p>\n\n<p> </p>\n\n<p>on your browser’s address window and press ENTER, the browser sends a GET command to the web server and the web server fetches the page and sends it back to the browser and the browser displays the page.  Simple.</p>\n\n<p><strong>POST</strong>, on the other hand, is sent by the browser to the web server if it needs to post or send back data or information to the web server.  So when you fill up information on a web page, say maybe you are creating a new user account, and pressed a submit button, the browser sends a POST command, attaches the information you entered and sends it to the web server.</p>\n\n<p><strong>IsPostBack</strong> is a property of the <strong>Page</strong> class representing a <strong>Web Forms</strong> page in <strong>ASP.NET</strong>.  You use this property to check if the page is being loaded or rendered or being requested for the first time (a GET command) as opposed to being loaded as a response to a postback (a POST command).</p>\n\n<p>Querystring is the string you see in a URL after the <strong>?</strong> character</p>\n\n<p><a href=\"http://search.microsoft.com/en-ca/results.aspx?form=MSHOME&amp;setlang=en-ca&amp;q=asp.net\">http://search.microsoft.com/en-ca/results.aspx?form=MSHOME&amp;setlang=en-ca&amp;q=asp.net</a></p>\n\n<p> </p>\n\n<p>It allows you to pass data from one page to another.  It can contain more than one name/value pair</p>\n\n<p>form=MSHOME\nsetlang=en\nq=asp.net</p>\n\n<p> </p>\n\n<p>separated by the <strong>&amp;</strong> character.  On the target page (e.g. <strong>results.aspx</strong>) one can access the name/value pair using the <strong>QueryString</strong> collection of the <strong>Request</strong> object</p>\n\n<p>Request.QueryString(“form”);\nRequest.QueryString(“setlang”);\nRequest.QueryString(“q”);</p>\n\n<p> </p>\n\n<p><strong>Form</strong> collection is another property of the <strong>Request</strong> object that allows you to access the information sent by the browser through a POST command.  It retrieves the values of the form elements.  So if we have the following form tag:</p>\n\n<p>&lt;form method=“POST” action = “getCustomer.aspx” &gt;\n    Enter Customer ID:\n    &lt;input type=“text” name=“Id”&gt;\n    &lt;input type=“submit” value=“Get Customer”&gt;\n&lt;/form&gt;</p>\n\n<p> </p>\n\n<p>we can retrieve the customer ID using the following code:</p>\n\n<p>Request.Form(“Id”);</p>\n"
    } ,
  
    {
      "title"    : "General: If we have Cloud, then what is SaaS? What about ASP?",
      "category" : "general",
      "tags"     : "",
      "url"      : "/tech-blog/2013/04/18/general-if-we-have-cloud-then-what-is-saas-what-about-asp-2.html",
      "date"     : "2013-04-18 00:00:00 +0000",
      "content": "<p>I was going through some job description that I was applying for and stumbled upon this tech jargon <strong>multi-tenant</strong> describing a data architecture, which I will be talking about on a separate post under SQL Server.  I searched the Internet and found out that this tech jargon is actually common in the <strong>SaaS</strong>, <strong>Cloud</strong> or <strong>ASP</strong> space.  From my limited understanding, these spaces deal, in one way or the other, with delivering software as a service.  As it turned out, multi-tenant means serving multiple clients or tenants and that makes logical sense when talking about these spaces.  But now I wonder, is there any difference between these spaces.</p>\n\n<p><strong>ASP</strong> stands for <strong>Application Service Provider</strong>.   So it’s actually a company that specializes in providing software as a service.  An ASP runs or hosts applications on behalf of the clients.  The clients pay or subscribe for that service.  How this software is delivered to the clients is what differentiates one from another ASP.  These ASPs initially delivered software through virtualization and for some client-server applications, the client side components of the application are installed on the users’ computers.  Nowadays, with Internet technologies, these applications are now delivered through browsers with no need for any installation on the users’ computers.</p>\n\n<p><strong>SaaS</strong> stands for <strong>Software as a Service</strong>.  So this is a type of software delivery model used by ASPs.  In an ideal situation, the application being provided to the clients is a multi-tenant application -  only  one running application servicing multiple clients or tenants.  Other ASPs employ a multi-instance application - for each client or group of clients, an instance of the application is running, thus multiple applications are serving multiple clients.</p>\n\n<p><strong>Cloud</strong> does not stand for anything.  If talking to non-technical people, it would make more sense to say <strong>Cloud Computing</strong>.  Cloud is more than SaaS.  In fact SaaS is just one type of service provided by Cloud.  Cloud is basically where one would go to use a computing resource that is delivered over a network, much like a SaaS.  But it’s not only software that is available in Cloud.  In fact, Cloud also provides the following types of services: <strong>IaaS</strong> (<strong>Infrastructure as a Service</strong>), <strong>PaaS</strong> (<strong>Platform as a Service</strong>), and <strong>NaaS</strong> (<strong>Network as a Service</strong>).</p>\n\n<p>Hopefully this clears up some confusion.  I have not provided enough description but enough to get one in the right direction.  As always, Internet is the best resource if you need to dig further in these technologies.</p>\n\n<p>EDIT: <a href=\"http://computer.howstuffworks.com/cloud-computing/cloud-computing.htm\">How Cloud Computing Works</a> explains what “cloud” is all about.</p>\n"
    } ,
  
    {
      "title"    : ".NET 2.0: Addendum to Notes on Foundation Part 1",
      "category" : "net",
      "tags"     : "",
      "url"      : "/tech-blog/2011/05/11/net-2-0-addendum-to-notes-on-foundation-part-1.html",
      "date"     : "2011-05-11 00:00:00 +0000",
      "content": "<p>Addendum to <a href=\"https://rodansotto.github.io/tech-blog/2009/03/28/net-2-0-notes-on-foundation-part-1-3.html\">.NET 2.0: Notes on Foundation Part 1</a></p>\n\n<p><strong>Value Types – Built-in, User-defined, and Enumerations</strong></p>\n\n<p><strong>Built-in value types</strong> in .NET are <strong>sbyte</strong>, <strong>byte</strong>, <strong>short</strong>, <strong>int</strong>, <strong>uint</strong>, <strong>long</strong>, <strong>float</strong>, <strong>double</strong>, <strong>decimal</strong>, <strong>char</strong>, <strong>bool</strong>, and <strong>date</strong>.  For performance, use <strong>int</strong> and <strong>double</strong> by default.  When using a nullable value type, you can use the <strong>HasValue</strong> method to determine if the variable has been set or not.  To get the value, use the <strong>Value</strong> method.</p>\n\n<p><strong>User-defined value types</strong> are types declared as <strong>struct</strong>.</p>\n\n<p>[sourcecode language=”csharp” gutter=”false” light=”true” toolbar=”false”]\nstruct MyStruct\n{\n  …\n}\n[/sourcecode]</p>\n\n<p>They are almost identical to classes except that they are stored on stack and contain their data directly.  Use <strong>struct</strong> only if it represents a single value, less than 16 bytes, will not be changed after creation, and will not be cast to a reference type.</p>\n\n<p><strong>Enumerations</strong> are declared using <strong>enum.</strong></p>\n\n<p>[sourcecode language=”csharp” gutter=”false” light=”true” toolbar=”false”]\nenum MyEnum : int { Raw, MediumRare, MediumWell, WellDone };\n[/sourcecode]</p>\n\n<p>They are used to assign names to values to improve readability and their names are displayed by default unless you type cast them.</p>\n\n<p><strong>Operator</strong></p>\n\n<p>Operator is new in .NET 2.0.  It allows a user-defined type to overload most of the operators provided by the language.  The example below overloads the + binary operator.</p>\n\n<p>[sourcecode language=”csharp” gutter=”false” light=”true” toolbar=”false”]\npublic static MyStruct operator +(MyStruct arg1, int arg2)\n{\n  arg1.Value += arg2;\n  return arg1;\n}\n[/sourcecode]</p>\n\n<p><strong>Reference Types</strong></p>\n\n<p>Reference types store the address of their data on the stack.  They are like pointers, if you’re coming from a C or C++ background.  The actual data is stored in the heap.  Since the heap is managed by the garbage collector, which recovers memory periodically, there is no need to dispose of the memory.  To trigger a garbage collection, you can call <strong>GC.Collect()</strong>.</p>\n\n<p>The following are the most common reference types:</p>\n\n<ul>\n  <li>\n    <p><strong>System.Object</strong> – from which all types are derived; where <strong>ToString()</strong>, <strong>GetType()</strong>, and <strong>Equals()</strong> come from</p>\n  </li>\n  <li>\n    <p><strong>System.String</strong> – behaves like a value type because it overrides the <strong>+</strong>, <strong>==</strong>, <strong>!=</strong>, and <strong>=</strong> operators</p>\n  </li>\n  <li>\n    <p><strong>System.Text.StringBuilder</strong></p>\n  </li>\n  <li>\n    <p><strong>System.Array</strong> – base class for all arrays</p>\n  </li>\n  <li>\n    <p><strong>System.IO.Stream</strong> – abstract base class for buffering file, device, and network I/O</p>\n  </li>\n  <li>\n    <p><strong>System.Exception</strong></p>\n  </li>\n</ul>\n\n<p><strong>Classes</strong></p>\n\n<p>A class can <strong>inherit</strong> from one base class and can implement any number of <strong>interface</strong> classes.  In C#, you use the <strong>:</strong> (colon) symbol to indicate either an inheritance or an interface implementation, which is why it’s good practice to prefix an interface class with I as in IMyInterface.</p>\n\n<p>Commonly used interfaces:</p>\n\n<ul>\n  <li>\n    <p><strong>IComparable</strong> – for sorting</p>\n  </li>\n  <li>\n    <p><strong>IDisposable</strong> – for  manually disposing objects that consume/lock resources such as databases</p>\n  </li>\n  <li>\n    <p><strong>IConvertible</strong> – for converting to a base type</p>\n  </li>\n  <li>\n    <p><strong>ICloneable</strong> – for copying object</p>\n  </li>\n  <li>\n    <p><strong>IEquatable</strong> – for comparing instances with <strong>==</strong> operator</p>\n  </li>\n  <li>\n    <p><strong>IFormattable</strong> – for formatting string</p>\n  </li>\n</ul>\n\n<p>Classes can also be declared as <strong>partial</strong>, allowing a class definition to be split across multiple files.</p>\n\n<p><strong>Generic</strong> classes allows one to specify the type for its generic types.  It reduces run-time errors and improves performance.</p>\n"
    } ,
  
    {
      "title"    : "General: Getting certified",
      "category" : "general",
      "tags"     : "",
      "url"      : "/tech-blog/2011/05/10/general-getting-certified.html",
      "date"     : "2011-05-10 00:00:00 +0000",
      "content": "<p>I’m excited to start in my new job next week.  I can’t wait.  Now that everything seems to be going back to normal (hopefully it stays that way), I plan on getting back on track to certify myself on .NET.  I browsed the Microsoft certification website and it seems getting certified with .NET Framework Foundation is a good bet.  Not only it applies to .NET 2.0 but to .NET 3.5 as well.  Again this blog will serve as my notes as I study for this certification.  Wish me luck!</p>\n"
    } ,
  
    {
      "title"    : ".NET 3.5: Introduction to XAML - Part 1",
      "category" : "net",
      "tags"     : "",
      "url"      : "/tech-blog/2011/04/29/net-3-5-introduction-to-xaml-part-1.html",
      "date"     : "2011-04-29 00:00:00 +0000",
      "content": "<p><strong>What is XAML</strong></p>\n\n<p>So what is <strong>XAML</strong> anyways?  It stands for e<strong>X</strong>tensible <strong>A</strong>pplication <strong>M</strong>arkup <strong>L</strong>anguage and is based on <strong><a href=\"http://www.w3schools.com/xml/default.asp\">XML</a></strong>.  It was initially created to be used in <strong>WPF</strong> (Windows Presentation Foundation) but is now being used also in <strong>WF</strong> (Windows Workflow Foundation), <a href=\"http://www.silverlight.net/\">Silverlight</a>, and <strong><a href=\"http://msdn.microsoft.com/en-us/windows/hardware/gg463373.aspx\">XPS</a></strong> (XML Paper Specification). </p>\n\n<p><strong>Why XAML</strong></p>\n\n<p>So why another markup language?  The reason behind creating this to be used in WPF is to allow the designers (those responsible for the graphical user interface) and developers (those who code the behavior)  to collaborate well, to have them work on their stuff separately, and once done merge their stuff without a hitch.  End result is a top notched graphical user interface and a perfectly working application.</p>\n\n<p><strong>XAML Tools</strong></p>\n\n<p>The major tools for creating XAML are: <a href=\"http://www.microsoft.com/expression/products/Design_Overview.aspx\">Expression Design</a>, <a href=\"http://www.microsoft.com/expression/products/Blend_Overview.aspx\">Expression Blend</a>, and Visual Studio (starting from version 2008).  As a developer, you can actually just use Visual Studio to create your visual elements in XAML and code-behind it.  But for more complex graphics, the two Expression products are more suitable.</p>\n\n<p><strong>XAML in WPF</strong></p>\n\n<p>Since XAML is a declarative language, it is used to describe objects in .NET, just like what HTML is used to describe what should be displayed on a Web page.  XAML describes objects form a subset of .NET namespaces, which include <strong>System.Windows</strong>, <strong>System.Windows.Controls</strong>, <strong>System.Windows.Data</strong>, and <strong>System.Windows.Media</strong>. </p>\n\n<p>Since XAML is XML based, it can be used to represent a tree of objects.  And as with all XML markups, XAML is case sensitive.</p>\n\n<p>XAML in WPF uses WPF namespace (the same namespace concept used in XML) to avoid confusion with XAML used in WF, and so on.</p>\n\n<p>XAML is compiled, at runtime, into <strong>BAML</strong> (Binary Application Markup Language), a more optimized form for parsing, and embedded as a resource in <strong>EXE</strong> or <strong>DLL</strong>.</p>\n\n<p>A sample XAML listed below describes a button object.  It will display a <strong>Button</strong> control on a <strong>StackPanel</strong> layout on the UI with default visual presentation and default behaviors.</p>\n\n<p>[sourcecode language=”xml” padlinenumbers=”true” gutter=”false” light=”true” toolbar=”false”]</p>\n<StackPanel>\n  <button content=\"Click Me\" />\n</StackPanel>\n<p>[/sourcecode]</p>\n\n<p>Other sample XAMLs:</p>\n\n<p>[sourcecode language=”xml” gutter=”false” light=”true” toolbar=”false”]\n<button background=\"Blue\" foreground=\"Red\" content=\"This is a button\"></button>\n[/sourcecode]</p>\n\n<p>[sourcecode language=”xml” gutter=”false” light=”true” toolbar=”false”]\n<button></button></p>\n<Button.Background>\n    <SolidColorBrush Color=\"Blue\" />\n  </Button.Background>\n<Button.Foreground>\n    <SolidColorBrush Color=\"Red\" />\n  </Button.Foreground>\n<Button.Content>\n    This is a button\n  </Button.Content>\n<p>&lt;/Button&gt;</p>\n\n<p>[/sourcecode]</p>\n\n<p>If you are coming form an ASP.NET or Web background, these XAML samples do look familiar.  Stylesheets is what comes into my mind though.</p>\n"
    } ,
  
    {
      "title"    : "SQL Server 2005: SELECT, INSERT, UPDATE, DELETE",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2011/04/27/sql-server-2005-select-insert-update-delete.html",
      "date"     : "2011-04-27 00:00:00 +0000",
      "content": "<p>The parts of a <strong>SELECT</strong> statement are:</p>\n\n<p>[sourcecode language=”sql” gutter=”false” light=”true” toolbar=”false”]\nSELECT \nFROM \nWHERE \nGROUP BY \nHAVING \nORDER BY \nFOR XML\nOPTION\n[/sourcecode]</p>\n\n<p>By default, <strong>ALL</strong> is assumed in <strong>SELECT</strong>, thus including every row.  Using <strong>SELECT DISTINCT</strong> excludes duplicate rows.  Note that you can also use <strong>DISTINCT</strong> in aggregate functions, like below:</p>\n\n<p>[sourcecode language=”sql” gutter=”false” light=”true” toolbar=”false”]\nSELECT COUNT (DISTINCT Column)\nFROM Table\n[/sourcecode]</p>\n\n<p>You can use <strong>ORDER BY</strong> on any column on the table even if it is not returned or not part of the <strong>SELECT</strong> list.  The <strong>FOR XML</strong> clause is used for outputting XML data while the <strong>OPTION</strong> clause is for making query hints.</p>\n\n<p>The <strong>INSERT</strong> statement can take either of the two following forms:</p>\n\n<p>[sourcecode language=”sql” gutter=”false” light=”true” toolbar=”false”]\nINSERT INTO Table (Column1, Column2)\nVALUES (Value1, Value2)</p>\n\n<p>INSERT INTO Table (Column1, Column2)\nSELECT …\n[/sourcecode]</p>\n\n<p>Note that the column list are optional on both forms.</p>\n\n<p>The parts of an <strong>UPDATE</strong> statement are:</p>\n\n<p>[sourcecode language=”sql” gutter=”false” light=”true” toolbar=”false”]\nUPDATE\nSET\nFROM\nWHERE\n[/sourcecode]</p>\n\n<p>An <strong>UPDATE</strong> can be created from multiple tables but only one table is affected, meaning only one table can be the subject of an update action.</p>\n\n<p>The <strong>DELETE</strong> statement has the shortest syntax.  Just provide the table name and optionally a <strong>WHERE</strong> clause.</p>\n"
    } ,
  
    {
      "title"    : "SQL Server 2005: Data Types and Books Online",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2011/04/26/sql-server-2005-data-types-and-books-online.html",
      "date"     : "2011-04-26 00:00:00 +0000",
      "content": "<p>To know more about SQL Server 2005 data types, click <a href=\"http://msdn.microsoft.com/en-us/library/ms187752(v=SQL.90).aspx\">here</a>.  For SQL Server 2005 Books Online, click <a href=\"http://msdn.microsoft.com/en-us/library/ms130214(v=SQL.90).aspx\">here</a>.</p>\n"
    } ,
  
    {
      "title"    : "SQL Server 2005: Interview Q&amp;A",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2011/04/21/sql-server-2005-interview-questions-answers.html",
      "date"     : "2011-04-21 00:00:00 +0000",
      "content": "<p>I recently had a technical interview and the following questions gave me a  hard time:</p>\n\n<ul>\n  <li>How many non-clustered indexes can you have?  I know you can only have 1 clustered index but I have no idea for the non-clustered.  The answer is <strong>249</strong>.  But in SQL Server 2008, this number was increased to 999.</li>\n  <li>Which among the 2 key constraints allow you to have a <strong>NULL</strong> value, <strong>PRIMARY KEY</strong> or <strong>UNIQUE</strong>?  I know primary keys should not be null, and I am right.  The <strong>UNIQUE</strong> constraint will allow you to add only one NULL value and more than that will be considered as duplicate.</li>\n  <li>\n    <p>How do you add a <strong>DEFAULT</strong> constraint in an existing table using SQL?  You could easily do this on the SQL Server Management Studio, but since it’s asking for the SQL, it should look like the following:</p>\n\n    <p>[sourcecode language=”sql” padlinenumbers=”true” autolinks=”true” gutter=”false” light=”true” toolbar=”false”]\n  ALTER TABLE MyTable \n    ADD CONSTRAINT MyConstraint \n      DEFAULT ‘MyDefault’ FOR MyColumn\n  [/sourcecode]</p>\n  </li>\n  <li>\n    <p>What are the T-SQL statements used for transactions?  These should be <strong>BEGIN TRAN</strong>, <strong>COMMIT TRAN</strong>, <strong>ROLLBACK TRAN</strong>, and <strong>SAVE TRAN</strong>.  The SAVE TRAN is like a bookmark or a save point.  You can roll back to a save point.</p>\n  </li>\n  <li>\n    <p>What is a <strong>RANK()</strong> function?  This one I have never used.  It is a built-in function in T-SQL under the Ranking Functions category.  For more information, click <a href=\"http://msdn.microsoft.com/en-us/library/ms176102(v=SQL.90).aspx\">here</a>.</p>\n  </li>\n  <li>What is a <strong>ROLLUP</strong> operator?  Again I have never used this.  It is used to summarize data.  I probably will have to get familiar with this since I do lots of reporting.  It might make my SQL statements shorter.  For more information, click <a href=\"http://msdn.microsoft.com/en-us/library/ms191500(v=SQL.90).aspx\">here</a>.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "General: I’m back blogging again :)",
      "category" : "general",
      "tags"     : "",
      "url"      : "/tech-blog/2011/04/20/general-im-back-blogging-again.html",
      "date"     : "2011-04-20 00:00:00 +0000",
      "content": "<p>These past 2 years have been busy for me, with a new job and a new baby in 2009.  Unfortunately I left my job to take a family-related sabbatical for 8 months.   Now I am looking for another job and blogging again.</p>\n\n<p>Since my last blog on the following technologies: .NET Framework 2.0 and briefly on <a href=\"http://msdn.microsoft.com/en-us/library/bb332048.aspx\">3.5</a> (should probably look at <a href=\"http://msdn.microsoft.com/en-us/library/bb822048.aspx\">3.0</a> first), Visual Basic 2005, SQL Server 2005, and ASP.NET 2.0, newer versions have appeared.  We now have <a href=\"http://msdn.microsoft.com/en-us/library/ms171868.aspx\">.NET Framework 4.0</a>, <a href=\"http://msdn.microsoft.com/en-us/library/we86c8x2.aspx\">Visual Basic 2010</a> (previous to that <a href=\"http://msdn.microsoft.com/en-us/library/y17w47af(v=vs.90).aspx\">Visual Basic 2008</a>), <a href=\"http://www.microsoft.com/sqlserver/2008/en/us/whats-new.aspx\">SQL Server 2008</a> and <a href=\"http://www.asp.net/learn/whitepapers/aspnet4\">ASP.NET 4.0</a> (previous to that <a href=\"http://www.asp.net/downloads/vs2008\">ASP.NET 3.5</a> and <a href=\"http://msdn.microsoft.com/en-us/library/fa1h9d0d(v=vs.85).aspx\">3.0</a>).</p>\n\n<p>I will try to touch briefly on these new versions and take a look what is new there while still focusing on the older versions.</p>\n\n<p>I also plan on putting up a portfolio of my work that I did as an independent contractor, showcasing my work on desktop, web, and mobile applications.</p>\n"
    } ,
  
    {
      "title"    : ".NET 3.5: Quick look at what is in WPF",
      "category" : "net",
      "tags"     : "",
      "url"      : "/tech-blog/2009/04/18/net-3-5-quick-look-at-what-is-in-wpf.html",
      "date"     : "2009-04-18 00:00:00 +0000",
      "content": "<p><strong>Windows Presentation Foundation (WPF)</strong> seems to be the successor to <strong>Windows Forms</strong> for desktop development.  The following are some of the highlights in WPF:</p>\n\n<ul>\n  <li>Separation of logic code from the presentation code where the presentation code is defined using a declarative syntax called <strong>Extensible Application Markup Language (XAML)</strong>.</li>\n  <li>Three kinds of application available for creation: <strong>Windows applications</strong>, <strong>Navigation applications</strong>, and <strong>XAML Browser Applications (XBAPs)</strong>.  <strong>Windows applications</strong> are similar to Windows Forms applications.  <strong>Navigation applications</strong> are similar to web sites in that they provide a page-based user experience but they run on the desktop computer like Windows applications.  <strong>XBAPs</strong> are similar to Navigation applications except that they run in Windows Internet Explorer.</li>\n  <li>Unprecedented support for displaying <strong>graphics</strong>, <strong>images</strong>, and <strong>media files</strong>.</li>\n  <li><strong>Binding</strong> of a property to any object or source.  Use of <strong>data templates</strong> to configure how your data is displayed in the presentation layer.</li>\n  <li>Use of <strong>Styles</strong>, <strong>Animations</strong>, and <strong>Triggers</strong> to provide consistent user interface appearance, add interactivity, and change the user interface appearance in response to different conditions.</li>\n  <li>New document and printing model where you can work with <strong>XML Paper Standard (XPS) Documents</strong> and <strong>Flow Documents</strong>.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : ".NET 3.5: Quick look at what is in WCF",
      "category" : "net",
      "tags"     : "",
      "url"      : "/tech-blog/2009/04/18/net-3-5-quick-look-at-what-is-in-wcf.html",
      "date"     : "2009-04-18 00:00:00 +0000",
      "content": "<p><strong>Windows Communication Foundation (WCF)</strong> is a platform for building service-oriented applications.  The following are some of the highlights in WCF:</p>\n\n<ul>\n  <li>Defines the following three core contracts with its consumers when creating WCF services: <strong>Service contract</strong>, <strong>Data contract</strong>, and <strong>Message contract</strong>.</li>\n  <li>Use of <strong>service endpoint</strong> to expose WCF services to consumers.</li>\n  <li>Availability of various service hosting applications: managed application such as <strong>Console application</strong>, <strong>Windows service</strong>, or <strong>Windows Forms application</strong>, Web server using <strong>IIS</strong> or <strong>Windows Process Activation Service (WAS)</strong>.  <strong>WAS</strong> also supports non-<strong>HTTP</strong> protocols such as <strong>TCP</strong>, <strong>MSMQ</strong>, and <strong>named pipes</strong>.  Also available is the WCF-provided host (<strong>wcfSvcHost.exe</strong>).</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "General: Fibonacci sequence using a loop versus a recursive function",
      "category" : "general",
      "tags"     : "",
      "url"      : "/tech-blog/2009/04/14/general-fibonacci-sequence-using-a-loop-versus-a-recursive-function.html",
      "date"     : "2009-04-14 00:00:00 +0000",
      "content": "<p>I recently had a phone interview and one of the technical questions they asked me is how to implement a Fibonacci sequence in code.  I started doing it in a loop but it got complicated so I changed to a recursive function.  Unfortunately, I got stuck with the recursive function and never actually finished it.  So after the phone interview I fired up my Visual Studio 2005 and started coding the Fibonacci sequence using a loop and using a recursive function and see which one is better.  The code below tells me recursive function is the way to go.</p>\n\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"630\"><tbody><tr><td valign=\"top\" width=\"628\"><font size=\"2\"><font face=\"Courier New\"><span style=\"color:#0000ff;\">static</span> <span style=\"color:#0000ff;\">int</span> Fibonacci_Loop(<span style=\"color:#0000ff;\">int</span> n)<br />{<br /><span style=\"color:#0000ff;\">&nbsp; if</span> (n == 0) <span style=\"color:#0000ff;\">return</span> 0;<br /><span style=\"color:#0000ff;\">&nbsp; if</span> (n == 1) <span style=\"color:#0000ff;\">return</span> 1;<br /><br /><span style=\"color:#0000ff;\">&nbsp; int</span> nMinus2 = 0;<br /><span style=\"color:#0000ff;\">&nbsp; int</span> nMinus1 = 1;<br /><span style=\"color:#0000ff;\">&nbsp; int</span> nValue = 1;<br /><span style=\"color:#0000ff;\">&nbsp; for</span> (<span style=\"color:#0000ff;\">int</span> i = 2; i &lt;= n; i++)<br />&nbsp; {<br />&nbsp;&nbsp;&nbsp; nValue = nMinus1 + nMinus2;<br />&nbsp;&nbsp;&nbsp; nMinus2 = nMinus1;<br />&nbsp;&nbsp;&nbsp; nMinus1 = nValue;<br />&nbsp; }<br /><br /><span style=\"color:#0000ff;\">&nbsp; return</span> nValue;<br />}<br /><br /><span style=\"color:#0000ff;\">static</span> <span style=\"color:#0000ff;\">int</span> Fibonacci_Recursive(<span style=\"color:#0000ff;\">int</span> n)<br />{<br /><span style=\"color:#0000ff;\">&nbsp; if</span> (n == 1) <span style=\"color:#0000ff;\">return</span> 1;<br /><span style=\"color:#0000ff;\">&nbsp; if</span> (n == 0) <span style=\"color:#0000ff;\">return</span> 0;<br /><span style=\"color:#0000ff;\">&nbsp; return</span> Fibonacci_Recursive(n - 1) + Fibonacci_Recursive(n - 2);<br />}</font></font></td></tr></tbody></table>\n"
    } ,
  
    {
      "title"    : ".NET 2.0: Notes on Foundation Part 5 (C#)",
      "category" : "net",
      "tags"     : "",
      "url"      : "/tech-blog/2009/04/08/net-2-0-notes-on-foundation-part-5-c.html",
      "date"     : "2009-04-08 00:00:00 +0000",
      "content": "<p><strong>Sequential Lists</strong></p>\n\n<p>If you need a collection that stores data in a sequential basis, you can use a <strong>Queue</strong> which is a first-in, first-out (<strong>FIFO</strong>) or <strong>Stack</strong> which is a last-in, first-out (<strong>LIFO</strong>).  <strong>Queue</strong>’s most important properties and methods are: <strong>Count</strong>, <strong>Dequeue()</strong>, <strong>Enqueue()</strong>, and <strong>Peek()</strong>.  Stack’s most important properties and methods are: <strong>Count</strong>, <strong>Pop()</strong>, <strong>Push()</strong>, and <strong>Peek()</strong>.</p>\n\n<p><strong>Dictionaries</strong></p>\n\n<p>Dictionaries are another type of collections that are used to store key/value pairs.  The most basic of all dictionary classes that are available in .NET Framework is the <strong>Hashtable</strong> class.</p>\n\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"630\"><tbody><tr><td valign=\"top\" width=\"628\"><font size=\"2\" face=\"Courier New\">Hashtable emailLookup = <span style=\"color:#0000ff;\">new</span> Hashtable();<br /><br /><span style=\"color:#008000;\">// using Add() method</span><br /><span style=\"color:#008000;\">// where 1st parameter is the key and 2nd parameter is the value</span><br />emailLookup.Add(<span style=\"color:#006080;\">\"jdoe@company.com\"</span>, <span style=\"color:#006080;\">\"Doe, John\"</span>);<br /><br /><span style=\"color:#008000;\">// using indexer to add key/value pair</span><br />emailLookup[<span style=\"color:#006080;\">\"jdoe@company.com\"</span>] = <span style=\"color:#006080;\">\"Doe, John\"</span>;<br /><br /><span style=\"color:#008000;\">// using indexer to access data</span><br />Console.WriteLine(emailLookup[<span style=\"color:#006080;\">\"jdoe@company.com\"</span>]);<br /><br /><span style=\"color:#008000;\">// iterating through the entries in the dictionary</span><br /><span style=\"color:#0000ff;\">foreach</span> (DictionaryEntry entry <span style=\"color:#0000ff;\">in</span> emailLookup)<br />{<br />&nbsp; Console.WriteLine(entry.Value);<br />}</font></td></tr></tbody></table>\n\n<p>All dictionary classes support the <strong>IDictionary</strong> interface which derives from <strong>ICollection</strong> interface.  <strong>IDictionary</strong>’s most important properties and methods are: <strong>Keys</strong>, <strong>Values</strong>, <strong>Add()</strong>, <strong>Clear()</strong>, <strong>Contains()</strong>, <strong>GetEnumerator()</strong>, and <strong>Remove()</strong>.  <strong>Hashtable</strong> also has additional methods for testing existence of keys and values: <strong>ContainsKey()</strong> and <strong>ContainsValue()</strong>.</p>\n\n<p><strong>Hashtable and Equality</strong></p>\n\n<p>The <strong>Hashtable</strong> uses a hash value, an integer, to aid in the storage of its keys.  It uses the <strong>GetHash()</strong> method that the <strong>Object</strong> class supports to test for equality.  The <strong>Object</strong>.<strong>GetHash()</strong> method returns a hash value that is unique to the object.  For <strong>String</strong> class, this <strong>GetHash()</strong> method is overridden so that two strings with the same text will be equal even though they are different instances. </p>\n\n<p>Care should be taken that when creating your own class that will be stored in a <strong>Hashtable</strong> that you override the <strong>GetHash()</strong> method if the test for equality is wrong.  You also might need to override the <strong>Equals()</strong> method because if the <strong>Hashtable</strong> finds that the two objects have same hash value, it will call their <strong>Equals()</strong> method to see if they are in fact equal.  The <strong>Object.Equals()</strong> method returns false if the two objects are different instances of the same class.</p>\n\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"630\"><tbody><tr><td valign=\"top\" width=\"628\"><font size=\"2\"><font face=\"Courier New\"><span style=\"color:#0000ff;\">public</span> <span style=\"color:#0000ff;\">class</span> Dog<br />{<br /><span style=\"color:#0000ff;\">&nbsp; string</span> _name;<br /><br /><span style=\"color:#0000ff;\">&nbsp; public</span> Dog(<span style=\"color:#0000ff;\">string</span> name)<br />&nbsp; {<br />&nbsp;&nbsp;&nbsp; _name = name;<br />&nbsp; }<br /><br /><span style=\"color:#0000ff;\">&nbsp; public</span> <span style=\"color:#0000ff;\">override</span> <span style=\"color:#0000ff;\">int</span> GetHashCode()<br />&nbsp; {<br /><span style=\"color:#0000ff;\">&nbsp;&nbsp;&nbsp; return</span> name.GetHashCode();<br />&nbsp; }<br /><br /><span style=\"color:#0000ff;\">&nbsp; public</span> <span style=\"color:#0000ff;\">override</span> <span style=\"color:#0000ff;\">bool</span> Equals(<span style=\"color:#0000ff;\">object</span> obj)<br />&nbsp; {<br />&nbsp;&nbsp;&nbsp; Dog otherDog = obj <span style=\"color:#0000ff;\">as</span> Dog;<br /><span style=\"color:#0000ff;\">&nbsp;&nbsp;&nbsp; if</span> (otherDog == <span style=\"color:#0000ff;\">null</span>) <span style=\"color:#0000ff;\">return</span> <span style=\"color:#0000ff;\">false</span>;<br /><span style=\"color:#0000ff;\">&nbsp;&nbsp;&nbsp; return</span> otherDog.name == name;<br />&nbsp; }<br />}</font></font></td></tr></tbody></table>\n\n<p>Another way to specify your own equality comparison is through the <strong>IEqualityComparer</strong> interface and this is useful if you do not want to change your classes to override the <strong>GetHash()</strong> and <strong>Equals()</strong> methods.</p>\n\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"630\"><tbody><tr><td valign=\"top\" width=\"628\"><font size=\"2\"><font face=\"Courier New\"><span style=\"color:#0000ff;\">public</span> <span style=\"color:#0000ff;\">class</span> InsensitiveComparer : IEqualityComparer<br />{<br />&nbsp; CaseInsensitiveComparer _comparer = <span style=\"color:#0000ff;\">new</span> CaseInsensitiveComparer();<br /><br /><span style=\"color:#0000ff;\">&nbsp; public</span> <span style=\"color:#0000ff;\">int</span> GetHashCode(<span style=\"color:#0000ff;\">object</span> obj)<br />&nbsp; {<br /><span style=\"color:#0000ff;\">&nbsp;&nbsp;&nbsp; return</span> obj.ToString().ToLowerInvariant().GetHashCode();<br />&nbsp; }<br /><br /><span style=\"color:#0000ff;\">&nbsp; public</span> <span style=\"color:#0000ff;\">new</span> <span style=\"color:#0000ff;\">bool</span> Equals(<span style=\"color:#0000ff;\">object</span> x, <span style=\"color:#0000ff;\">object</span> y)<br />&nbsp; {<br /><span style=\"color:#0000ff;\">&nbsp;&nbsp;&nbsp; if</span> (_comparer.Compare(x, y) == 0)<br />&nbsp;&nbsp;&nbsp; {<br /><span style=\"color:#0000ff;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return</span> <span style=\"color:#0000ff;\">true</span>;<br />&nbsp;&nbsp;&nbsp; }<br /><span style=\"color:#0000ff;\">&nbsp;&nbsp;&nbsp; else</span><br />&nbsp;&nbsp;&nbsp; {<br /><span style=\"color:#0000ff;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return</span> <span style=\"color:#0000ff;\">false</span>;<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp; }<br />}<br /><br /><span style=\"color:#008000;\">// to use the InsensitiveComparer class</span><br />Hashtable dehash = <span style=\"color:#0000ff;\">new</span> Hashtable(<span style=\"color:#0000ff;\">new</span> InsensitiveComparer());<br />dehash[<span style=\"color:#006080;\">\"First\"</span>] = <span style=\"color:#006080;\">\"1st\"</span>;<br />dehash[<span style=\"color:#006080;\">\"Second\"</span>] = <span style=\"color:#006080;\">\"2nd\"</span>;<br />dehash[<span style=\"color:#006080;\">\"Third\"</span>] = <span style=\"color:#006080;\">\"3rd\"</span>;<br />dehash[<span style=\"color:#006080;\">\"Fourth\"</span>] = <span style=\"color:#006080;\">\"4th\"</span>;<br />dehash[<span style=\"color:#006080;\">\"fourth\"</span>] = <span style=\"color:#006080;\">\"4th\"</span>;<br />Console.WriteLine(dehash.Count); // 4</font></font></td></tr></tbody></table>\n"
    } ,
  
    {
      "title"    : ".NET 3.5: WPF, WCF, WWF, ASP.NET 3.5, ADO.NET 3.5",
      "category" : "net",
      "tags"     : "",
      "url"      : "/tech-blog/2009/04/03/net-3-5-wpf-wcf-wwf-asp-net-3-5-ado-net-3-5.html",
      "date"     : "2009-04-03 00:00:00 +0000",
      "content": "<p>Now that .NET 3.5 is already out and I still have to get my certification on that .NET 2.0 Framework – Application Development Foundation, I decided to start ahead on learning these new technologies and not get left behind. </p>\n\n<p>The .NET Framework foundation is still important so I will still be continuing on that one except that I will start writing on .NET 3.5 in parallel.  I will probably start out with just a quick look at WPF, WCF, WWF, ASP.NET 3.5, and ADO.NET 3.5 just to get my feet wet.</p>\n"
    } ,
  
    {
      "title"    : ".NET 2.0: Notes on Foundation Part 4 (C#)",
      "category" : "net",
      "tags"     : "",
      "url"      : "/tech-blog/2009/04/03/net-2-0-notes-on-foundation-part-4-c.html",
      "date"     : "2009-04-03 00:00:00 +0000",
      "content": "<p><strong>Collections</strong></p>\n\n<p>Under <strong>System.Collections</strong> namespace are the following collections: <strong>ArrayList</strong>, <strong>SortedList</strong>, <strong>Queue</strong>, <strong>Stack</strong>, <strong>Hashtable</strong>, <strong>BitArray</strong>, <strong>StringCollection</strong>, <strong>StringDictionary</strong>, <strong>ListDictionary</strong>, <strong>HybridDictionary</strong>, and <strong>NameValueCollection</strong>.</p>\n\n<p><strong>ArrayList</strong></p>\n\n<p><strong>ArrayList</strong> is the most basic of all collections.  It is a simple resizeable, index-based collections of objects.</p>\n\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"630\"><tbody><tr><td valign=\"top\" width=\"628\"><font size=\"2\" face=\"Courier New\">ArrayList arrayList = <span style=\"color:#0000ff;\">new</span> ArrayList();<br /><br /><span style=\"color:#008000;\">// add individual items</span><br /><span style=\"color:#0000ff;\">string</span> s = <span style=\"color:#006080;\">\"Hello\"</span>;<br />arrayList.Add(s);<br />arrayList.Add(<span style=\"color:#006080;\">\"World!!!\"</span>);<br />arrayList.Add(100);<br />arrayList.Add(<span style=\"color:#0000ff;\">new</span> <span style=\"color:#0000ff;\">object</span>());<br /><br /><span style=\"color:#008000;\">// add multiple items</span><br /><span style=\"color:#0000ff;\">string</span>[] anArray = <span style=\"color:#0000ff;\">new</span> <span style=\"color:#0000ff;\">string</span>[] { <span style=\"color:#006080;\">\"less\"</span>, <span style=\"color:#006080;\">\"is\"</span>, <span style=\"color:#006080;\">\"more\"</span> };<br />arrayList.AddRange(anArray);<br /><span style=\"color:#0000ff;\">object</span>[] anotherArray = <span style=\"color:#0000ff;\">new</span> <span style=\"color:#0000ff;\">object</span>[] { <span style=\"color:#0000ff;\">new</span> <span style=\"color:#0000ff;\">object</span>(), <span style=\"color:#0000ff;\">new</span> ArrayList() };<br />arrayList.AddRange(anotherArray);<br /><br /><span style=\"color:#008000;\">// insert item at specific position</span><br />arrayList.Insert(3, <span style=\"color:#006080;\">\"Hi All\"</span>);<br /><br /><span style=\"color:#008000;\">// insert multiple items at specific position</span><br /><span style=\"color:#0000ff;\">string</span>[] moreStrings = <span style=\"color:#0000ff;\">new</span> <span style=\"color:#0000ff;\">string</span>[] { <span style=\"color:#006080;\">\"good morning\"</span>, <span style=\"color:#006080;\">\"nice to meet you\"</span> };<br />arrayList.InsertRange(4, moreStrings);<br /><br /><span style=\"color:#008000;\">// using indexer to set specific item</span><br />arrayList[3] = <span style=\"color:#006080;\">\"Hi All\"</span>;<br /><br /><span style=\"color:#008000;\">// remove item</span><br />arrayList.Add(<span style=\"color:#006080;\">\"Hello\"</span>);<br />arrayList.Remove(<span style=\"color:#006080;\">\"Hello\"</span>);<br /><br /><span style=\"color:#008000;\">// remove first item in ArrayList</span><br />arrayList.RemoveAt(0);<br /><br /><span style=\"color:#008000;\">// remove first four items in ArrayList</span><br />arrayList.RemoveRange(0, 4);<br /><br /><span style=\"color:#008000;\">// using Contains(), IndexOf(), and Clear() methods</span><br /><span style=\"color:#0000ff;\">string</span> myString = <span style=\"color:#006080;\">\"My String\"</span>;<br /><span style=\"color:#0000ff;\">if</span> (arrayList.Contains(myString))<br />{<br /><span style=\"color:#0000ff;\">&nbsp; int</span> index = arrayList.IndexOf(myString);<br />&nbsp; arrayList.RemoveAt(index);<br />}<br /><span style=\"color:#0000ff;\">else</span><br />{<br />&nbsp; arrayList.Clear();<br />}</font></td></tr></tbody></table>\n\n<p><strong>Iterating Over Items In Collections</strong></p>\n\n<p>To iterate items in a collection such as the <strong>ArrayList</strong>, you can use either the <strong>for</strong> loop, <strong>IEnumerator</strong> interface, or the <strong>foreach</strong> loop.</p>\n\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"630\"><tbody><tr><td valign=\"top\" width=\"628\"><font size=\"2\"><font face=\"Courier New\"><span style=\"color:#008000;\">// using for loop</span><br /><span style=\"color:#0000ff;\">for</span> (<span style=\"color:#0000ff;\">int</span> i = 0; i &lt; coll.Count; ++i)<br />{<br />&nbsp; Console.WriteLine(coll[i]);<br />}<br /><br /><span style=\"color:#008000;\">// using IEnumerator interface</span><br />IEnumerator enumerator = coll.GetEnumerator();<br /><span style=\"color:#0000ff;\">while</span> (enumerator.MoveNext())<br />{<br />&nbsp; Console.WriteLine(enumerator.Current);<br />}<br /><br /><span style=\"color:#008000;\">// using foreach loop</span><br /><span style=\"color:#0000ff;\">foreach</span> (<span style=\"color:#0000ff;\">object</span> item <span style=\"color:#0000ff;\">in</span> coll)<br />{<br />&nbsp; Console.WriteLine(item);<br />}</font></font></td></tr></tbody></table>\n\n<p><strong>Interfaces in Collections</strong></p>\n\n<p>.NET supports the following interfaces that are implemented by collections: <strong>IEnumerable</strong>, <strong>ICollection</strong>, and <strong>IList</strong>. </p>\n\n<p><strong>IEnumerable</strong> interface is used to provide a common way to iterate over a collection.  Its important properties and methods are: <strong>Current</strong>, <strong>MoveNext()</strong>, and <strong>Reset()</strong>.</p>\n\n<p><strong>ICollection</strong> is derived from <strong>IEnumerable</strong> and is used to provide a common way to get the items in the collection as well as to copy the collection to an <strong>Array</strong> object.  Its important properties and methods are: <strong>Count</strong>, and <strong>CopyTo()</strong>.</p>\n\n<p><strong>IList</strong> is derived from <strong>ICollection</strong> and is used to provide a common way to expose lists of items.  Its important properties and methods are: <strong>Item</strong>, <strong>Add()</strong>, <strong>Clear()</strong>, <strong>Contains()</strong>, <strong>IndexOf()</strong>, <strong>Insert()</strong>, <strong>Remove()</strong>, and <strong>RemoveAt()</strong>.</p>\n\n<p><strong>Sorting Items In Collections</strong></p>\n\n<p>To sort items in an <strong>ArrayList</strong>, you use the <strong>Sort()</strong> method.  The <strong>Sort()</strong> method uses the <strong>Comparer</strong> class which is a default implementation that supports the <strong>IComparer</strong> interface.</p>\n\n<p>To specify an <strong>IComparer</strong> object to use instead of the default, you use the overloaded <strong>Sort()</strong> method that takes in an <strong>IComparer</strong> object.</p>\n\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"400\"><tbody><tr><td valign=\"top\" width=\"400\"><font size=\"2\" face=\"Courier New\">coll.Sort(<span style=\"color:#0000ff;\">new</span> CaseInsensitiveComparer());</font></td></tr></tbody></table>\n\n<p>You can also write your own comparer by implementing the <strong>Compare()</strong> method of the <strong>IComparer</strong> interface.</p>\n\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"630\"><tbody><tr><td valign=\"top\" width=\"628\"><font size=\"2\"><font face=\"Courier New\"><span style=\"color:#0000ff;\">public</span> <span style=\"color:#0000ff;\">class</span> DescendingComparer : IComparer<br />{<br />&nbsp; CaseInsensitiveComparer _comparer = <span style=\"color:#0000ff;\">new</span> CaseInsensitiveComparer();<br /><br /><span style=\"color:#0000ff;\">&nbsp; public</span> <span style=\"color:#0000ff;\">int</span> Compare(<span style=\"color:#0000ff;\">object</span> x, <span style=\"color:#0000ff;\">object</span> y)<br />&nbsp; {<br /><span style=\"color:#008000;\">&nbsp;&nbsp;&nbsp; // reversing the compared objects to get descending comparisons</span><br /><span style=\"color:#0000ff;\">&nbsp;&nbsp;&nbsp; return</span> _comparer.Compare(y, x);<br />&nbsp; }<br />}<br /><br />coll.Sort(<span style=\"color:#0000ff;\">new</span> DescendingComparer());</font></font></td></tr></tbody></table>\n"
    } ,
  
    {
      "title"    : "Design Patterns: Mediator, Adapter, Proxy, and Observer Patterns",
      "category" : "design-patterns",
      "tags"     : "",
      "url"      : "/tech-blog/2009/04/02/design-patterns-mediator-adapter-proxy-and-observer-patterns.html",
      "date"     : "2009-04-02 00:00:00 +0000",
      "content": "<p><strong>Mediator Pattern</strong></p>\n\n<p>This pattern mediates between objects.  If you have several objects that need to interact with each other and you find yourself having common attributes and behaviors on each of your objects, you can use the mediator pattern.  You create a mediator object that encapsulates these common attributes and behaviors and if you need to change the way your objects interact with each other, you only have to change the mediator object.</p>\n\n<p><strong>Adapter Pattern</strong></p>\n\n<p>This pattern adapts an object to be usable by another object.  If you have an object A that is being used by another object B and later you upgraded object B thereby making object A unusable, you can use the adapter pattern.  You create an adapter object that fits between object A and object B and this will allow object A to remain usable by object B.</p>\n\n<p><strong>Proxy Pattern</strong></p>\n\n<p>This pattern allows a local code to work with a remote object all the while thinking it’s a local object.  If you have a code where you use a local object and later found yourself needing to use a remote object and you don’t want your local code to know it’s using a remote object, you can use the proxy pattern.  You create a proxy object that your local code will use and this proxy object will then connect to the remote object.</p>\n\n<p><strong>Observer Pattern</strong></p>\n\n<p>This pattern is about objects that are observing for a particular event to occur and waiting for the subject that they registered to to notify them when the event has occurred.  In .NET, this pattern is implemented as events or event handlers.</p>\n"
    } ,
  
    {
      "title"    : ".NET 2.0: Notes on Foundation Part 3 (C#)",
      "category" : "net",
      "tags"     : "",
      "url"      : "/tech-blog/2009/04/01/net-2-0-notes-on-foundation-part-3-c.html",
      "date"     : "2009-04-01 00:00:00 +0000",
      "content": "<p><strong>Isolated Storage</strong></p>\n\n<p>You use isolated storage in your .NET application if you want to save information on a hard drive without using a database or other means and still have safe access to it - meaning no need to worry if application has enough rights to do so.</p>\n\n<p>To create a store, use <strong>IsolatedStorageFile</strong> class, which is responsible for creating files and folders in isolated storage.  You first need to scope the data you want in the store, that is, if you like your data to be specific to the calling assembly and the local machine, or specific to the calling assembly and the current user.</p>\n\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"630\"><tbody><tr><td valign=\"top\" width=\"628\"><font size=\"2\"><font face=\"Courier New\"><span style=\"color:#008000;\">// specific to assembly and local machine</span><br />IsolatedStorageFile machineStore =<br />IsolatedStorageFile.GetMachineStoreForAssembly();<br /><br /><span style=\"color:#008000;\">// specific to assembly and current user</span><br /><font size=\"1\">IsolatedStorageFile userStore = IsolatedStorageFile.GetUserStoreForAssembly();</font></font></font></td></tr></tbody></table>\n\n<p>To work with files in the store, use <strong>IsolatedStorageFileStream</strong> class, which derives from <strong>FileStream</strong> class.</p>\n\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"630\"><tbody><tr><td valign=\"top\" width=\"628\"><font size=\"2\"><font face=\"Courier New\"><font size=\"1\"><font size=\"2\">IsolatedStorageFileStream userStream =<br /></font><span style=\"color:#0000ff;\">&nbsp; new</span> IsolatedStorageFileStream(<span style=\"color:#006080;\">\"UserSettings.set\"</span>, FileMode.Create, userStore);</font><br />StreamWriter userWriter = <span style=\"color:#0000ff;\">new</span> StreamWriter(userStream);<br />userWriter.WriteLine(<span style=\"color:#006080;\">\"User Prefs\"</span>);<br />userWriter.Close();<br /><br />IsolatedStorageFileStream userStream =<br /><span style=\"color:#0000ff;\">&nbsp; <font size=\"1\">new</font></span><font size=\"1\"> IsolatedStorageFileStream(<span style=\"color:#006080;\">\"UserSettings.set\"</span>, FileMode.Open, userStore);</font><br /><span style=\"color:#0000ff;\">string</span>[] files = userStore.GetFileNames(<span style=\"color:#006080;\">\"UserSettings.set\"</span>);<br /><span style=\"color:#0000ff;\">if</span> (files.Length == 0)<br />{<br />&nbsp; Console.WriteLine(<span style=\"color:#006080;\">\"No data saved for this user\"</span>);<br />}<br /><span style=\"color:#0000ff;\">else</span><br />{<br /><span style=\"color:#008000;\">&nbsp; // ...</span><br />}</font></font></td></tr></tbody></table>\n\n<p>You can also work with directories using the methods found in the <strong>IsolatedStorageFile</strong> class, such as <strong>CreateDirectory()</strong> and <strong>GetDirectoryNames()</strong>.</p>\n\n<p>Last important point in using isolated storage is that you have to explicitly permission your code to access it by annotating your class or method with the <strong>IsolatedStorageFilePermission</strong> class.</p>\n\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"630\"><tbody><tr><td valign=\"top\" width=\"628\"><font size=\"2\" face=\"Courier New\">[IsolatedStorageFilePermission(SecurityAction.Demand,<br />&nbsp; UserQuota=1024,<br />&nbsp; UsageAllowed=IsolatedStorageContainment.AssemblyIsolationByUser)]<br /><span style=\"color:#0000ff;\">class</span> MyClass<br />{<br /><span style=\"color:#008000;\">// ...</span><br />}</font></td></tr></tbody></table>\n\n<p><strong>Regular Expressions</strong></p>\n\n<p>To use regular expressions in your application, you use <strong>System.Text.RegularExpressions.Regex</strong> class.</p>\n\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"630\"><tbody><tr><td valign=\"top\" width=\"628\"><font size=\"2\"><font face=\"Courier New\"><span style=\"color:#008000;\">// checks if input string matches regular expression</span><br /><span style=\"color:#0000ff;\">if</span> (Regex.IsMatch(regexString, inputString)<br />&nbsp; Console.WriteLine(<span style=\"color:#006080;\">\"Input matches regular expression.\"</span>);<br /><span style=\"color:#0000ff;\">else</span><br />&nbsp; Console.WriteLine(<span style=\"color:#006080;\">\"Input DOES NOT match regular expression.\"</span>);<br /><br /><span style=\"color:#008000;\">// extracts matched data</span><br /><span style=\"color:#0000ff;\">string</span> inputString = <span style=\"color:#006080;\">\"Company Name: MyCompany, Inc.\"</span>;<br />Match m = Regex.Match(inputString, <span style=\"color:#006080;\">@\"Company Name: (.*$)\"</span>);<br />Console.WriteLine(m.Groups[1]);<br /><br /><span style=\"color:#008000;\">// reformats extracted substring</span><br />Regex r = <span style=\"color:#0000ff;\">new</span> Regex(<span style=\"color:#006080;\">@\"^(?&lt;proto&gt;\\w+)://[^/]+?(?&lt;port&gt;:\\d+)?/\"</span>,<br />RegexOptions.Compiled);<br />Console.WriteLine(r.Match(urlString).Result(<span style=\"color:#006080;\">\"${proto}${port}\"</span>));<br /><br /><span style=\"color:#008000;\">// replaces substring</span><br /><span style=\"color:#008000;\">// in this example, it replaces mm/dd/yy with dd-mm-yy</span><br />Console.WriteLine(Regex.Replace(inputString,<br /><span style=\"color:#006080;\">&nbsp; \"\\\\b(?&lt;month&gt;\\\\d{1,2})/(?&lt;day&gt;\\\\d{1,2})/(?&lt;year&gt;\\\\d{2,4})\\\\b\"</span>,<br /><span style=\"color:#006080;\">&nbsp; \"${day}-${month}-${year}\"</span>));</font></font></td></tr></tbody></table>\n\n<p>For quick help on how to form regular expressions go to this <a href=\"http://www.addedbytes.com/download/regular-expressions-cheat-sheet-v2/pdf/\">link</a>, which is a cheat sheet by the way.</p>\n\n<p><strong>Encoding and Decoding</strong></p>\n\n<p>To work with encodings, use the <strong>System.Text.Encoding</strong> class.</p>\n\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"630\"><tbody><tr><td valign=\"top\" width=\"628\"><p><font size=\"2\"><font face=\"Courier New\"><span style=\"color:#008000;\">// converts from one code page to another</span><br /><span style=\"color:#008000;\">// get Korean encoding</span><br />Encoding e = Encoding.GetEncoding(<span style=\"color:#006080;\">\"Korean\"</span>);<br /><span style=\"color:#008000;\">// convert ASCII bytes to Korean encoding</span><br /><span style=\"color:#0000ff;\">byte</span>[] encoded;<br />encoded = e.GetBytes(<span style=\"color:#006080;\">\"Hello, world!\"</span>);<br /><span style=\"color:#008000;\">// display the byte codes</span><br /><span style=\"color:#0000ff;\">for</span> (<span style=\"color:#0000ff;\">int</span> i = 0; i &lt; encoded.Length; i++)<br />&nbsp; Console.WriteLine(<span style=\"color:#006080;\">\"Byte {0}: {1}\"</span>, i, encoded[i]);<br /><br /><span style=\"color:#008000;\">// examines supported code pages</span><br />EncodingInfo[] eis = Encoding.GetEncodings();<br /><span style=\"color:#0000ff;\">foreach</span> (EncodingInfo ei <span style=\"color:#0000ff;\">in</span> eis)<br />{<br />&nbsp; Console.WriteLine(<span style=\"color:#006080;\">\"{0}: {1}, {2}\"</span>, ei.CodePage, ei.Name, ei.DisplayName);<br />}<br /><br /><span style=\"color:#008000;\">// specifies encoding type when writing a file</span><br /><font size=\"1\">StreamWriter utf7Writer = <span style=\"color:#0000ff;\">new</span> StreamWriter(<span style=\"color:#006080;\">\"utf7.txt\"</span>, <span style=\"color:#0000ff;\">false</span>, Encoding.UTF7);</font><br />utf7Writer.WriteLine(<span style=\"color:#006080;\">\"Hello World!!!\"</span>);<br />utf7Writer.Close();<br /><br /><span style=\"color:#008000;\">// specifies encoding type when reading a file</span><br />StreamReader utf7Reader = <span style=\"color:#0000ff;\">new</span> StreamReader(<span style=\"color:#006080;\">\"utf7.txt\"</span>, Encoding.UTF7);<br />Console.WriteLine(utf7Reader.ReadToEnd());<br />utf7Reader.Close();</font></font></p></td></tr></tbody></table>\n"
    } ,
  
    {
      "title"    : "Design Patterns: Introduction",
      "category" : "design-patterns",
      "tags"     : "",
      "url"      : "/tech-blog/2009/04/01/design-patterns-introduction.html",
      "date"     : "2009-04-01 00:00:00 +0000",
      "content": "<p>I will be writing about design patterns.  I believe design patterns should be part of your development tool as they provide you solutions to common problems that have been encountered by other developers before you.</p>\n\n<p>I will start with the most common design patterns such as: <strong>Mediator</strong>, <strong>Adapter</strong>, <strong>Proxy</strong>, <strong>Observer</strong>, <strong>Strategy</strong>, <strong>Decorator</strong>, <strong>Factory</strong>, <strong>Observer</strong>, <strong>Chain of Responsibility</strong>, <strong>Singleton</strong>, <strong>Flyweight</strong>, <strong>Facade</strong>, <strong>Template Method</strong>, <strong>Builder</strong>, <strong>Iterator</strong>, <strong>Composite</strong>, <strong>State</strong>, and <strong>Command</strong> patterns.</p>\n"
    } ,
  
    {
      "title"    : "ASP.NET 2.0: Crystal Reports – Fitting the report inside the available space in your web page",
      "category" : "asp-net",
      "tags"     : "",
      "url"      : "/tech-blog/2009/04/01/asp-net-2-0-crystal-reports-fitting-the-report-inside-the-available-space-in-your-web-page.html",
      "date"     : "2009-04-01 00:00:00 +0000",
      "content": "<p>If you prefer displaying a crystal report to a web page where you have other stuff in it (like say a top and left menu bar with a bottom footnote), and you want to display it on the available space in the web page (not on the whole web page), and you find it spilling over, don’t worry there is a solution to that.</p>\n\n<p>When you drop the <strong>CrystalReportsViewer</strong> control on your web page design surface, there is a property in it that gets set to <strong>True</strong> by default and its the main reason why its spilling over to the rest of your web page.  This property is the <strong>BestFitPage</strong>.  By setting this property to <strong>False</strong> and at the same time setting the <strong>Height</strong> and <strong>Width</strong> properties, the report will be displayed within the boundary you set and scrollbars will be provided automatically for you if necessary to view the whole report.</p>\n"
    } ,
  
    {
      "title"    : ".NET 2.0: Notes on Foundation Part 2 (C#)",
      "category" : "net",
      "tags"     : "",
      "url"      : "/tech-blog/2009/03/31/net-2-0-notes-on-foundation-part-2-c-2.html",
      "date"     : "2009-03-31 00:00:00 +0000",
      "content": "<p><strong>Explicit Conversion</strong></p>\n\n<p>The following are methods for explicit conversion: <strong>System.Convert</strong>, <strong>(type)</strong> cast operator, type.<strong>ToString</strong>, type.<strong>Parse</strong>, type.<strong>TryParse</strong>, and type.<strong>TryParseExact</strong>.</p>\n\n<p><strong>Conversion in Custom Types</strong></p>\n\n<p>The following are ways to provide conversion for your own types: conversion operators (which are new to .NET 2.0), <strong>ToString</strong> and <strong>Parse</strong> overrides, <strong>System.IConvertible</strong> implementation, and <strong>TypeConverter</strong> class implementation.</p>\n\n<p><strong>File System Classes</strong></p>\n\n<p>There are 2 types of these classes: informational and utility.  Informational classes are <strong>FileInfo</strong> and <strong>DirectoryInfo</strong>, both derived from <strong>FileSystemInfo</strong>.  <strong>DriveInfo</strong> is also an informational class but not derived from <strong>FileSystemInfo</strong>.  Utility classes are <strong>File</strong>, <strong>Directory</strong>, and <strong>Path</strong> (which is  a useful class for parsing file system paths).</p>\n\n<p>There is also this <strong>FileSystemWatcher</strong> class which provides methods for monitoring file system directories for changes.</p>\n\n<p><strong>Reading and Writing Files</strong></p>\n\n<p>The <strong>Stream</strong> class is an abstract class from which the following classes are derived from: <strong>FileStream</strong>, <strong>MemoryStream</strong>, <strong>CryptoStream</strong>, <strong>NetworkStream</strong>, and <strong>GZipStream</strong>.</p>\n\n<p>To start a read or write operation on a file stream, you begin with the <strong>File</strong> class.  It can return a <strong>FileStream</strong>, <strong>StreamReader</strong>, or <strong>StreamWriter</strong> object.</p>\n\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"630\"><tbody><tr><td valign=\"top\" width=\"628\"><font size=\"2\"><font face=\"Courier New\"><span style=\"color:#008000;\">// returns a FileStream object</span><br /></font><font face=\"Courier New\"><font size=\"1\">FileStream readFile = File.Open(<span style=\"color:#006080;\">@\"C:\\boot.ini\"</span>, FileMode.Open, FileAccess.Read);<br /></font>FileStream writeFile = File.Create(<span style=\"color:#006080;\">@\"c:\\myfile.txt\"</span>);<br /><br /><span style=\"color:#008000;\">// returns a StreamReader object</span><br />StreamReader reader = File.OpenText(<span style=\"color:#006080;\">@\"C:\\boot.ini\"</span>);<br /><br /><span style=\"color:#008000;\">// returns a StreamWriter object</span><br />StreamWriter writer = File.CreateText(<span style=\"color:#006080;\">@\"c:\\myfile.txt\"</span>);<br /><br /><span style=\"color:#008000;\">// reads the entire file</span><br />Console.WriteLine(File.ReadAllText(<span style=\"color:#006080;\">@\"C:\\boot.ini\"</span>));<br /><br /><span style=\"color:#008000;\">// writes string to new file</span><br />File.WriteAllText(<span style=\"color:#006080;\">@\"c:\\myfile.txt\"</span>, <span style=\"color:#006080;\">\"Hello World!!!\"</span>);</font></font></td></tr></tbody></table>\n\n<p>Do not confuse the <strong>File</strong> class with the <strong>FileInfo</strong> class.  The <strong>FileInfo</strong> class does not have the capability to work with file streams.  <strong>Directory</strong> class is also provided just like there is a <strong>DirectoryInfo</strong> class.</p>\n\n<p><strong>Reader and Writers</strong></p>\n\n<p>The <strong>StreamReader</strong> and <strong>StreamWriter</strong> classes are derived from <strong>TextReader</strong> and <strong>TextWriter</strong> abstract classes, respectively.  All text-based readers and writers are all derived from these abstract classes.  One example is the <strong>StringReader</strong> and <strong>StringWriter</strong> pair.  There is also a reader and writer pair for reading and writing binary data, the <strong>BinaryReader</strong> and <strong>BinaryWriter</strong>.</p>\n\n<p><strong>MemoryStream and BufferedStream</strong></p>\n\n<p><strong>MemoryStream</strong> class is commonly used to temporarily store data in memory before storing it to a more permanent area, such as a file.</p>\n\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"400\"><tbody><tr><td valign=\"top\" width=\"400\"><font size=\"2\"><font face=\"Courier New\"><span style=\"color:#008000;\">// Create an instance of MemoryStream</span><br />MemoryStream memStrm = <span style=\"color:#0000ff;\">new</span> MemoryStream();<br /><br /><span style=\"color:#008000;\">// Use StreamWriter to write to the MemoryStream</span><br />StreamWriter writer = <span style=\"color:#0000ff;\">new</span> StreamWriter(memStrm);<br />writer.WriteLine(<span style=\"color:#006080;\">\"Hello\"</span>);<br />writer.WriteLine(<span style=\"color:#006080;\">\"World!!!\"</span>);<br /><br /><span style=\"color:#008000;\">// Force the writer to push the data into the underlying stream</span><br />writer.Flush();<br /><br /><span style=\"color:#008000;\">// Create a file stream</span><br />FileStream fileStrm = File.Create(<span style=\"color:#006080;\">@\"c:\\myfile.txt\"</span>);<br /><br /><span style=\"color:#008000;\">// Write the entire Memory stream to the file</span><br />memStrm.WriteTo(fileStrm);<br /><br /><span style=\"color:#008000;\">// Clean up</span><br />writer.Close();<br />fileStrm.Close();<br />memStrm.Close();</font></font></td></tr></tbody></table>\n\n<p><strong>BufferedStream</strong> class is used to buffer reads and writes through the stream that it wraps.  The code example above for <strong>MemoryStream</strong> can be rewritten to use the <strong>BufferedStream</strong>.</p>\n\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"630\"><tbody><tr><td valign=\"top\" width=\"628\"><font size=\"2\" face=\"Courier New\">FileStream fileStrm = File.Create(<span style=\"color:#006080;\">@\"c:\\myfile.txt\"</span>);<br />BufferedStream bufferedStrm = <span style=\"color:#0000ff;\">new</span> BufferedStream(fileStrm);<br />StreamWriter writer = <span style=\"color:#0000ff;\">new</span> StreamWriter(bufferedStrm);<br />writer.WriteLine(<span style=\"color:#006080;\">\"Hello World!!!\"</span>);<br />writer.Close();</font></td></tr></tbody></table>\n\n<p><strong>Compression Streams</strong></p>\n\n<p>Two classes you use for compression and decompression: <strong>GZipStream</strong> and <strong>DeflateStream</strong>.  If you plan on using the compressed file with <strong>gzip</strong> tool, then use <strong>GZipStream</strong>.  Otherwise use <strong>DeflateStream</strong> which produces slightly smaller files.</p>\n"
    } ,
  
    {
      "title"    : ".NET 2.0: Notes on Foundation Part 1",
      "category" : "net",
      "tags"     : "",
      "url"      : "/tech-blog/2009/03/28/net-2-0-notes-on-foundation-part-1-3.html",
      "date"     : "2009-03-28 00:00:00 +0000",
      "content": "<p><strong>Nullable Type</strong></p>\n\n<p>In .NET 2.0, you can declare a variable as <strong>Nullable</strong>:</p>\n\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"400\"><tbody><tr><td valign=\"top\" width=\"400\"><font size=\"2\" face=\"Courier New\">Nullable&lt;<span style=\"color:#0000ff;\">bool</span>&gt; b = <span style=\"color:#0000ff;\">null</span>;<br /><br /><span style=\"color:#008000;\">// shorthand notation</span><br /><span style=\"color:#0000ff;\">bool</span>? b = <span style=\"color:#0000ff;\">null</span>;</font></td></tr></tbody></table>\n\n<p><strong>String versus StringBuilder</strong></p>\n\n<p>Strings are immutable in .NET.  If you want to combine multiple strings, you can use <strong>String</strong> class’s <strong>Concat</strong>, <strong>Join</strong>, or <strong>Format</strong> methods or use <strong>StringBuilder</strong> class.</p>\n\n<p><strong>Arrays</strong></p>\n\n<p>To declare, initialize and sort an array:</p>\n\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"630\"><tbody><tr><td valign=\"top\" width=\"628\"><font size=\"2\"><font face=\"Courier New\"><span style=\"color:#008000;\">// Declare and initialize an array.</span><br /><span style=\"color:#0000ff;\">int</span>[] arr = { 3, 1, 2 };<br /><br /><span style=\"color:#008000;\">// Call a shared/static array method.</span><br />Array.Sort(arr);<br /><br /><span style=\"color:#008000;\">// Display the result.</span><br />Console.WriteLine(<span style=\"color:#006080;\">\"{0}, {1}, {2}\"</span>, arr[0], arr[1], arr[2]);</font></font></td></tr></tbody></table>\n\n<p><strong>Try/Catch/Finally Blocks</strong></p>\n\n<p>Use multiple <strong>Catch</strong> blocks to filter exceptions, ordered from most specific to least specific.  Make sure variables you want to access in the <strong>Finally</strong> block is declared outside of the <strong>Try</strong> block.  You can also use nested  <strong>Try/Catch/Finally</strong> blocks.</p>\n\n<p><strong>Commonly Used Interfaces</strong></p>\n\n<p><strong>IComparable</strong>, <strong>IDisposable</strong>, <strong>IConvertible</strong>, <strong>ICloneable</strong>, <strong>IEquatable</strong>, and <strong>IFormattble</strong> are commonly used interfaces.</p>\n\n<p><strong>Generics</strong></p>\n\n<p>To declare a generic type:</p>\n\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"400\"><tbody><tr><td valign=\"top\" width=\"400\"><font size=\"2\"><font face=\"Courier New\"><span style=\"color:#0000ff;\">class</span> Gen&lt;T, U&gt;<br />{<br /><span style=\"color:#0000ff;\">&nbsp; public</span> T t;<br /><span style=\"color:#0000ff;\">&nbsp; public</span> U u;<br /><br /><span style=\"color:#0000ff;\">&nbsp; public</span> Gen(T _t, U _u)<br />&nbsp; {<br />&nbsp;&nbsp;&nbsp; t = _t;<br />&nbsp;&nbsp;&nbsp; u = _u;<br />&nbsp; }<br />}</font></font></td></tr></tbody></table>\n\n<p>To consume a generic type:</p>\n\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"630\"><tbody><tr><td valign=\"top\" width=\"628\"><font size=\"2\"><font face=\"Courier New\"><span style=\"color:#008000;\">// Add two strings using the Gen class</span><br />Gen&lt;<span style=\"color:#0000ff;\">string</span>, <span style=\"color:#0000ff;\">string</span>&gt; ga = <span style=\"color:#0000ff;\">new</span> Gen&lt;<span style=\"color:#0000ff;\">string</span>, <span style=\"color:#0000ff;\">string</span>&gt;(<span style=\"color:#006080;\">\"Hello, \"</span>, <span style=\"color:#006080;\">\"World!\"</span>);<br />Console.WriteLine(ga.t + ga.u);<br /><br /><span style=\"color:#008000;\">// Add a double and an int using the Gen class</span><br />Gen&lt;<span style=\"color:#0000ff;\">double</span>, <span style=\"color:#0000ff;\">int</span>&gt; gb = <span style=\"color:#0000ff;\">new</span> Gen&lt;<span style=\"color:#0000ff;\">double</span>, <span style=\"color:#0000ff;\">int</span>&gt;(10.125, 2005);<br />Console.WriteLine(gb.t + gb.u);</font></font></td></tr></tbody></table>\n\n<p>To use a constraint so that you are not limited to just the base <strong>Object</strong> class:</p>\n\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"400\"><tbody><tr><td valign=\"top\" width=\"400\"><font size=\"2\"><font face=\"Courier New\"><span style=\"color:#0000ff;\">class</span> CompGen&lt;T&gt;<br /><span style=\"color:#0000ff;\">where</span> T : IComparable<br />{<br /><span style=\"color:#0000ff;\">&nbsp; public</span> T t1;<br /><span style=\"color:#0000ff;\">&nbsp; public</span> T t2;<br /><br /><span style=\"color:#0000ff;\">&nbsp; public</span> CompGen(T _t1, T _t2)<br />&nbsp; {<br />&nbsp;&nbsp;&nbsp; t1 = _t1;<br />&nbsp;&nbsp;&nbsp; t2 = _t2;<br />&nbsp; }<br /><br /><span style=\"color:#0000ff;\">&nbsp; public</span> T Max()<br />&nbsp; {<br /><span style=\"color:#0000ff;\">&nbsp;&nbsp;&nbsp; if</span> (t2.CompareTo(t1) &lt; 0)<br /><span style=\"color:#0000ff;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return</span> t1;<br /><span style=\"color:#0000ff;\">&nbsp;&nbsp;&nbsp; else</span><br /><span style=\"color:#0000ff;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return</span> t2;<br />&nbsp; }<br />}</font></font></td></tr></tbody></table>\n\n<p>Besides an <strong>interface</strong>, you can also use a <strong>base class</strong>, a <strong>constructor</strong> or a <strong>reference or value type</strong> for your constraints.</p>\n"
    } ,
  
    {
      "title"    : "General: It has been a while since my last post",
      "category" : "general",
      "tags"     : "",
      "url"      : "/tech-blog/2009/03/27/general-it-has-been-a-while-since-my-last-post.html",
      "date"     : "2009-03-27 00:00:00 +0000",
      "content": "<p>This past year and a half gave me new skills from my last project.  I learned <strong>Regular Expression</strong>, <strong>XSLT</strong>, <strong>XPath</strong>, <strong>Java</strong>, <strong>Eclipse</strong>, and <strong>C#</strong>. </p>\n\n<p>In the next few weeks or months I will be making some changes on this blog.  I will be refocusing my effort now on <strong>C#</strong> instead of <strong>VB.NET</strong>.  It would be best for me to use <strong>C#</strong> as my main language so I can easily switch between <strong>Java</strong> and also since I started with <strong>C</strong> way back. </p>\n\n<p>You see <strong>Java</strong> does not seem to be far away from <strong>C#</strong> and in my last project I was able to pick up <strong>Java</strong> relatively easy.  But I am not saying I will abandon <strong>VB.NET</strong>, its just that I would prefer using <strong>C#</strong> over <strong>VB.NET</strong>. </p>\n\n<p>Below are links to some cheat sheets that I found that will help me retain my knowledge in <strong>Java</strong> and <strong>VB.NET</strong> as I immerse myself in <strong>C#</strong>:</p>\n\n<p><a href=\"http://www.harding.edu/fmccown/java1_5_csharp_comparison.html\">Java (J2SE 5.0) and C# Comparison</a></p>\n\n<p><a href=\"http://www.harding.edu/fmccown/vbnet_csharp_comparison.html\">VB.NET and C# Comparison</a></p>\n"
    } ,
  
    {
      "title"    : "ASP.NET 2.0: Learning the Basics, Part III",
      "category" : "asp-net",
      "tags"     : "",
      "url"      : "/tech-blog/2007/05/08/asp-net-2-0-learning-the-basics-part-iii.html",
      "date"     : "2007-05-08 00:00:00 +0000",
      "content": "<p><strong>Page Load Event</strong></p>\n\n<p><strong>Page Load</strong> event is fired when the page is loaded and accessed for the first time and when it is loaded in response to a client postback.  But if you need to initialize variables or want something to happen only once during the first load of the page, you can use the <strong>IsPostBack</strong> property of the <strong>Page</strong> object to determine if the page is loaded for the first time or due to postback:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load\n    If Not Page.IsPostBack Then\n        ' do some initialization here...\n    End If\nEnd Sub\n</code></pre></div></div>\n\n<p><strong>Application and Session Events</strong></p>\n\n<p>If you need to code on the application and/or session events, add the <strong>Global.asax</strong> file (<strong>Add New Item…</strong> and select <strong>Global Application Class)</strong>.  You will find 3 application events (<strong>Start</strong>, <strong>End</strong>, and <strong>Error</strong>) and 2 session events (<strong>Start</strong> and <strong>End</strong>).</p>\n\n<p><strong>Application and Session State</strong></p>\n\n<p>As always, you can save your application and session states using the Application and Session objects respectively:</p>\n\n<p>Application(“MyAppVariable”) = “MyAppValue”</p>\n\n<p>and</p>\n\n<p>Session(“MySessionVariable”) = “MySessionValue”</p>\n\n<p><strong>Session Identifiers</strong></p>\n\n<p>To identify each browser session, ASP.NET assigns a unique ID to a session, the <strong>SessionID</strong> property of the <strong>Session</strong> object.</p>\n\n<p><strong>ViewState Object</strong></p>\n\n<p>ViewState object is useful in persisting data on the page between postbacks.  It makes use of the <strong>__VIEWSTATE</strong> input hidden field that is inserted into the generated page.  __VIEWSTATE contains the state of all the controls on the page in encrypted form.</p>\n\n<p><strong>Profile Object</strong></p>\n\n<p>New in ASP.NET 2.0 is the <strong>Profile</strong> object.  This is now the preferred way to store user information across multiple visits to a web application.  It’s like the Session object but better.  It is strongly typed and you have the option to save it in the database, in an XML file, or in memory. </p>\n\n<p>To add properties to your Profile object, you need to add them to your web.config file, inside the **<system.web>** element:</system.web></p>\n\n<p>&lt;configuration&gt;</p>\n<appSettings />\n\n<connectionStrings />\n\n<p>&lt;system.web&gt;</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  ...\n\n  &lt;anonymousIdentification enabled\\=\"true\" /&gt;\n  &lt;profile\\&gt;\n     &lt;properties\\&gt;\n        &lt;add name\\=\"MyProfileVariable\" allowAnonymous\\=\"true\" /&gt;\n     &lt;/properties\\&gt;\n  &lt;/profile\\&gt;\n</code></pre></div></div>\n\n<p>&lt;/system.web&gt;\n&lt;/configuration&gt;</p>\n\n<p>In your code you can access or set the property like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Profile.MyProfileVariable = \"MyValue\"\n</code></pre></div></div>\n\n<p><strong>Other ASP.NET Objects</strong></p>\n\n<p>Other objects that are also available in ASP.NET are the following: <strong>Request</strong>, <strong>Form</strong>, <strong>Trace</strong>, <strong>User</strong>, <strong>Server</strong>, and <strong>PreviousPage</strong>.</p>\n\n<p><strong>Query String</strong></p>\n\n<p>To pass data from one page to another, you can use the name/value pair in the query string of the URL:</p>\n\n<p>MyW<a href=\"http://www.mywebsite.com/mywebpage.aspx?MyVariable=MyValue\">ebPage.aspx?MyVariable=MyValue</a></p>\n\n<p>On the target page, you can access the value in the query string using the <strong>Request</strong> object:</p>\n\n<p>Request.QueryString(“MyVariable”)</p>\n\n<p><strong>Cross Page PostBack</strong></p>\n\n<p>New in ASP.NET 2.0 is the ability to postback to a different page.  To use this, set the <strong>PostBackUrl</strong> property of the <strong>Button</strong> control to the page that you want to postback to.  To get information from the source page, you can use the <strong>PreviousPage</strong> object or the <strong>Form</strong> dictionary of the <strong>Request</strong> object.  If you want to check if the target page is running as a result of a cross page postback, use the <strong>IsCrossPagePostBack</strong> property of the <strong>PreviousPage</strong> object.  Do not use the target page’s <strong>IsPostBack</strong> property as it is set to false.</p>\n"
    } ,
  
    {
      "title"    : "VB 2005: Things to know about the Visual Studio 2005 IDE",
      "category" : "vb-net",
      "tags"     : "",
      "url"      : "/tech-blog/2007/05/05/vb-2005-things-to-know-about-the-visual-studio-2005-ide.html",
      "date"     : "2007-05-05 00:00:00 +0000",
      "content": "<p>When you first started your Visual Studio 2005 you were asked to specify the default settings and I set mine to <strong>Visual Basic Development Settings</strong>.  If you want to change this setting, say to <strong>Visual C# Development Settings</strong>, you need to go to <strong>Tools -&gt; Import and Export Settings…</strong> and go through the wizard to change it.</p>\n\n<p>When you go create a new project, one of the project templates that you can select is <strong>Database</strong>.  This project template lets you create classes that can run inside SQL Server 2005.  Note that there is another project template of the same name under the <strong>Other Project Types</strong> option.  They are not the same.</p>\n\n<p>If you have used a previous Microsoft development tool (e.g. Visual Studio 6.0), you will notice that the <strong>Solution Explorer</strong> is similar to the project group, except that it can contain projects of any .NET language and may include database, testing, and installation projects as part of the overall solution.</p>\n\n<p>Application settings are now stored in an XML file named <strong>app.config</strong> but when you create a new project, it does not create one by default.  Since this app.config file is stored in the application directory, you can run different versions of your application without encountering problems that you usually get if the settings were stored in the Windows Registry.</p>\n\n<p>When you get to the <strong>Assembly Information</strong> screen (by double-clicking the <strong>My Project</strong> on the Solution Explorer and on the <strong>Application</strong> tab display, clicking the <strong>Assembly Information…</strong> button), you will notice the <strong>GUID</strong> attribute there.  The value of that attribute is used as the ID of the type library that will be created when the assembly is made visible to <strong>COM</strong> applications (the checkbox <strong>Make assembly COM-Visible</strong> is checked).</p>\n\n<p>A new feature in the code window is outlining.  You will notice a <strong>+</strong> or <strong>-</strong> sign on the left side of your code window.  This allows you to hide or show portions of your code.  If you don’t like this feature you can disable it by selecting <strong>Edit -&gt; Outlining -&gt; Stop Outlining</strong>.  To bring outlining back, select <strong>Edit -&gt; Outlining -&gt; Collapse to Definitions</strong>. </p>\n\n<p>There is also this <strong>#Region</strong> directive that allows you to hide regions of code.  The code should be enclosed with <strong>#Region</strong> at top and <strong>#End Region</strong> at the end.  There should be a description after the <strong>#Region</strong> keyword which will be shown when this region of code is collapsed.  Example of code enclosed with the #Region directive:</p>\n\n<blockquote>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>#Region \"My region of code\"\nPrivate Sub mySub()\n    ' ...\nEnd Sub\n#End Region\n</code></pre></div>  </div>\n</blockquote>\n\n<p>You’ll notice in the Visual Studio 2005 IDE, that all the files that you are working on are in tabbed layout unlike in previous versions of Visual Studio, they are in MDI layout.  If you prefer the MDI layout, just go to <strong>Tools -&gt; Options</strong> and under the <strong>Environment -&gt; General</strong> category, on the <strong>Window layout</strong> section, select <strong>Multiple documents</strong>.</p>\n\n<p><strong>Tools -&gt; Options</strong> is the place to customize your IDE.  It has customizations for your text editor like line numbering which if you turn it on will number all your lines of code.</p>\n\n<p>You might also want to use the <strong>Dynamic Help</strong> feature in the IDE.  To show this window, select <strong>Help -&gt; Dynamic Help</strong> or press <strong>Ctrl+Alt+F4</strong>.  This feature tries to guess what you are trying to do and shows a list of things that you might be interested in looking at.</p>\n"
    } ,
  
    {
      "title"    : "VB 2005: The Global keyword",
      "category" : "vb-net",
      "tags"     : "",
      "url"      : "/tech-blog/2007/05/05/vb-2005-the-global-keyword.html",
      "date"     : "2007-05-05 00:00:00 +0000",
      "content": "<p>I was looking at the code generated by Visual Studio and I encounter this <strong>Global</strong> keyword.  Found out that you use this when you want to start the qualification chain at the outermost level of the .NET Framework class library, e.g.:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Global.System.Int32\n</code></pre></div></div>\n\n<p>This is useful if you are in a situation where you have defined a namespace in your code nested in another namespace (e.g. <strong>MyNamespace.System</strong>) and you have a <strong>System.Int32</strong> declaration inside.</p>\n"
    } ,
  
    {
      "title"    : "VB 2005: Putting XML comments to your source code",
      "category" : "vb-net",
      "tags"     : "",
      "url"      : "/tech-blog/2007/05/05/vb-2005-putting-xml-comments-to-your-source-code.html",
      "date"     : "2007-05-05 00:00:00 +0000",
      "content": "<p>A new feature in Visual Studio 2005 is the ability to add XML comments to your procedures and functions and even classes, which can be picked up by Visual Studio’s <strong>IntelliSense</strong> besides providing means to generate documentation and help files for the source code. </p>\n\n<p>To add the XML comments, type 3 single quotes (<strong>’’‘</strong>) to the line before the procedure or function and Visual Studio will add the following block of comments:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>''' &lt;summary&gt;\n''' \n''' &lt;/summary&gt;\n''' &lt;param name=\"sender\"&gt;&lt;/param&gt;\n''' &lt;param name=\"e\"&gt;&lt;/param&gt;\n''' &lt;remarks&gt;&lt;/remarks&gt;\n</code></pre></div></div>\n\n<p>What you have now is a template where you can enter your description and parameters for the procedure or function you want to document or comment on.</p>\n\n<p>You will find an XML file containing all the XML comments in your project directory when you compiled your project.  You can use this to generate the documentation and help files.</p>\n"
    } ,
  
    {
      "title"    : "VB 2005: Don&#39;t declare a form MustInherit if you will be inheriting the form",
      "category" : "vb-net",
      "tags"     : "",
      "url"      : "/tech-blog/2007/05/05/vb-2005-dont-declare-a-form-mustinherit-if-you-will-be-inheriting-the-form.html",
      "date"     : "2007-05-05 00:00:00 +0000",
      "content": "<p>If you create a form to be inherited and you try to declare a function or procedure as <strong>MustOverride</strong>:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Protected MustOverride Function MyFunction() As String\n</code></pre></div></div>\n\n<p>you need to declare that form <strong>MustInherit</strong>:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Public MustInherit Class MyForm\n</code></pre></div></div>\n\n<p>But doing this will prevent you from inheriting the form because you won’t see this form on the <strong>Inheritance Picker</strong> tool window when you create an inherited form (<strong>Add New Item… -&gt; Inherited Form</strong>).</p>\n\n<p>You have no choice but to declare  your function or procedure as <strong>Overridable</strong>:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Protected Overridable Function MyFunction()As String\n    ' You can put some code here or nothing at all...\nEnd Function\n</code></pre></div></div>\n\n<p>and then make sure your derived form overrides this function:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Protected Overrides Function MyFunction()As String\n    ' Your code here...\nEnd Function\n</code></pre></div></div>\n"
    } ,
  
    {
      "title"    : "VB 2005: Code generation in Visual Studio 2005",
      "category" : "vb-net",
      "tags"     : "",
      "url"      : "/tech-blog/2007/05/05/vb-2005-code-generation-in-visual-studio-2005.html",
      "date"     : "2007-05-05 00:00:00 +0000",
      "content": "<p>Visual Studio 2005 generates some code for us when we create our projects.  Code generated by this tool can be found in a separate file with <strong>.Designer.vb</strong> extension.  The code we make are saved in a file with <strong>.vb</strong> extension only.  This is possible with the use of <strong>partial class</strong>.</p>\n\n<p>Let’s take an example, say <strong>Form1.vb</strong>.  Code generated by Visual Studio 2005 is in <strong>Form1.Designer.vb</strong>.  Inside this file you will see your <strong>Form1</strong> class being declared as a partial class and being inherited from <strong>System.Windows.Forms.Form</strong>.  One of it’s method is <strong>InitializeComponent()</strong> which is where all initializations and custom settings of properties of the form and the controls that you put on the form are generated.  So if you’ve set the <strong>Text</strong> property of your <strong>Form1</strong> to something else, say <strong>My Form</strong> on the form’s <strong>Properties</strong> window, you will see this property being set inside the <strong>InitializeComponent()</strong> method.  Also if you added a button control on the form, you will also see initialization code for this button as well:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Me.Button1 = New System.Windows.Forms.Button\nMe.SuspendLayout()\n'\n'Button1\n'\nMe.Button1.Location = New System.Drawing.Point(116, 150)\nMe.Button1.Name = \"Button1\"\nMe.Button1.Size = New System.Drawing.Size(75, 23)\nMe.Button1.TabIndex = 0\nMe.Button1.Text = \"Button1\"\nMe.Button1.UseVisualStyleBackColor = True\n'\n'Form1\n'\nMe.AutoScaleDimensions = New System.Drawing.SizeF(6.0!, 13.0!)\nMe.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font\nMe.ClientSize = New System.Drawing.Size(292, 273)\nMe.Controls.Add(Me.Button1)\nMe.Name = \"Form1\"\nMe.Text = \"My Form\"\nMe.ResumeLayout(False)\n</code></pre></div></div>\n\n<p>Note that <strong>Button1</strong> is declared outside the InitializeComponent() method but inside the Form1 class as:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Friend WithEvents Button1 As System.Windows.Forms.Button \n</code></pre></div></div>\n\n<p>It’s cool that we can view the generated code and this will actually help us understand more what’s involved in let’s say, creating a form and adding a button control on the form.</p>\n"
    } ,
  
    {
      "title"    : "VB 2005: Building applications in VS 2005 IDE",
      "category" : "vb-net",
      "tags"     : "",
      "url"      : "/tech-blog/2007/05/05/vb-2005-building-applications-in-vs-2005-ide.html",
      "date"     : "2007-05-05 00:00:00 +0000",
      "content": "<p><strong>Build Configurations</strong></p>\n\n<p>New in VS 2005 IDE is the ability to choose which build configuration you want to use to build your applications.  You can create your own build configuration besides the <strong>Debug</strong> and <strong>Release</strong> build configuration that VS 2005 IDE already provides.</p>\n\n<p>To choose which build configuration you want, you need to display the settings first by going to <strong>Tools -&gt; Options… -&gt; Projects and Solutions -&gt; General</strong> and checking the <strong>Show advanced build configurations</strong> checkbox.  Then go to your project’s properties by right-clicking your project and selecting <strong>Properties</strong> and clicking the <strong>Compile</strong> tab.  From there you can see the <strong>Configuration</strong> drop-down listbox where you can choose which build configuration you want and you can also change the settings associated to that build configuration like the <strong>Build output path</strong>, <strong>Option explicit</strong>, <strong>Option strict</strong>, etc.  You can also click the <strong>Advanced Compile Options…</strong> button for more advanced compiler settings.</p>\n\n<p>To add a new build configuration or include/exclude projects from your build configuration if you are working on a solution with multiple projects, go to the  <strong>Build</strong> menu and select <strong>Configuration</strong> <strong>Manager…</strong>.</p>\n\n<p><strong>Building and Debugging Applications</strong></p>\n\n<p>To build your application, you can use <strong>Build</strong> or <strong>Rebuild</strong> just like in the old versions of Visual Studio.  During debugging, you have the <strong>Output</strong>, <strong>Call Stack</strong>, <strong>Breakpoints</strong>, <strong>Locals</strong>, and <strong>Watch</strong> windows to use to help you in your debugging efforts.  There is this another window, the <strong>Autos</strong> window, that automatically displays the variables used in the statement currently being executed and the statement just before it.</p>\n\n<p><strong>Other Useful Features</strong></p>\n\n<p><strong>Task List</strong> not only tracks errors when building your applications but you can also use this to keep track of your <strong>TODO</strong> comments in your source code and user-entered tasks as well.  To be able to track comments in your source code, you need to create a standard comment with the apostrophe and begin your comment with <strong>TODO</strong>, just like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>' TODO: Put your code here...\n</code></pre></div></div>\n\n<p>Then on your Task List window, if you double-click a comment task, you will be directed to the source code where the comment is, pretty neat huh?  You can open your Task List window by going to <strong>View -&gt; Other Windows -&gt; Task List</strong>.</p>\n\n<p>The <strong>Command</strong> window is useful especially if it’s in <strong>immediate</strong> mode.  It is like the <strong>Immediate</strong> window we are used to in Visual Basic 6.  The immediate mode is accessed by typing <strong>immed</strong> in the command prompt <strong>&gt;</strong> and pressing ENTER.  To return to the command mode, type <strong>cmd</strong> and press ENTER.</p>\n\n<p><strong>Server Explorer</strong>, as the name suggests, explores resources available on the server.  By default it inspects resources on the local machine.  You can also add a server for the Server Explorer to inspect.  Resources like <strong>SQL Server databases</strong>, <strong>event logs</strong>, <strong>registry</strong>, and <strong>message queues</strong> are just among the resources inspected by Server Explorer.</p>\n\n<p><strong>Macros</strong></p>\n\n<p>If you have programmed in Excel and used it’s macro recording facility, you will find it similar in Visual Studio 2005 as well.  You start recording by going to <strong>Tools -&gt; Macros -&gt; Record TemporaryMacro</strong>.  A floating toolbar will appear to let you pause, stop, or cancel your recording.  Once finished you can view or edit your macro by going to <strong>Tools -&gt; Macros -&gt; Macro Explorer</strong>.  Now why would you want to use a macro?  Well this is useful if you have a code that you use frequently and by using a macro it can save you from typing the code.  Plus you can transfer the macro-generated code to a Visual Studio Add-In project so you can share it with others.  Another one of those cool features.</p>\n"
    } ,
  
    {
      "title"    : "SQL Server 2005: Understanding decimal, numeric, float, and real data types",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2007/05/05/sql-server-2005-understanding-decimal-numeric-float-and-real-data-types.html",
      "date"     : "2007-05-05 00:00:00 +0000",
      "content": "<p>Since I came from a VB background, I get confused when I encounter these data types in SQL Server.  In VB if I need to use a variable that can hold a number with digits to the right of the decimal point, I declare the variable as <strong>single</strong> or <strong>double</strong>.  In SQL Server, you have <strong>decimal</strong>, <strong>numeric</strong>, <strong>float</strong> and <strong>real</strong> to choose from.  So what is the difference between them?</p>\n\n<p><strong>Decimal and numeric</strong></p>\n\n<p>Decimal and numeric are called <strong>exact numerics</strong> in SQL Server because they have fixed <strong>precision</strong> and <strong>scale</strong>. </p>\n\n<p><strong>Precision</strong> is the maximum total number of digits that can be stored, both to the left and to the right of the decimal point.  The value for precision can be from <strong>1</strong> to <strong>38</strong>.</p>\n\n<p><strong>Scale</strong> is the maximum number of digits that can be stored to the right of the decimal point.  The value for scale can be from <strong>0</strong> to <strong>precision</strong>.</p>\n\n<p>If you don’t specify the precision and scale when you declare the variable as decimal or numeric, by default it will have a precision of 18 digits and a scale of 0 digit.  It’s like declaring it as:</p>\n\n<p><a href=\"http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=decimal&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99\">decimal</a> (18, 0)</p>\n\n<p>Since decimal and numeric are both the same, either numeric or decimal will do.</p>\n\n<p>If you are concerned with storage, then use a precision of <strong>9 digits or less</strong> and this will take only <strong>5 bytes</strong>, the minimum for a decimal or numeric.  A precision of <strong>10-19 digits</strong> will give you <strong>9 bytes</strong>; <strong>20-28 digits</strong> will give you <strong>13 bytes</strong>; and <strong>29-38</strong> digits will give you <strong>17 bytes</strong>.</p>\n\n<p><strong>Float and real</strong></p>\n\n<p>Float and real are called <strong>approximate numerics</strong> and are used for floating point numeric data (whatever that means).  Since decimal or numeric will serve my purpose if all I want is a number that can store digits to the right of the decimal point, then I don’t need to bother with float and real unless I am working on a mathematical application.</p>\n"
    } ,
  
    {
      "title"    : "SQL Server 2005: Query window in Microsoft SQL Server Management Studio",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2007/05/05/sql-server-2005-query-window-in-microsoft-sql-server-management-studio.html",
      "date"     : "2007-05-05 00:00:00 +0000",
      "content": "<p>The query window has  a lot more to offer than just outputting the results to grid.  You can also output the results in text format and also save the results to a file.  If you are in the query window, you may notice an additional toolbar on top of it similar to the one below:</p>\n\n<p><img src=\"/tech-blog/assets/images/clip_image0022_thumb5.jpg\" alt=\"\" /></p>\n\n<p>There are 3 buttons there that let you specify how you want your output from the query.  They are <strong>Results to Text</strong>, <strong>Results to Grid</strong>, and <strong>Results to File</strong> respectively:</p>\n\n<p><img src=\"/tech-blog/assets/images/clip_image0023_thumb.jpg\" alt=\"\" /></p>\n\n<p>You can also display the estimated execution plan for your query by clicking the following button:</p>\n\n<p><img src=\"/tech-blog/assets/images/clip_image0024_thumb.jpg\" alt=\"*\" /></p>\n\n<p>You can also include the actual execution plan by clicking the following button before you execute your query:</p>\n\n<p><img src=\"/tech-blog/assets/images/clip_image0025_thumb.jpg\" alt=\"*\" /></p>\n"
    } ,
  
    {
      "title"    : "SQL Server 2005: JOINS and UNION",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2007/05/05/sql-server-2005-joins-and-union.html",
      "date"     : "2007-05-05 00:00:00 +0000",
      "content": "<p>There are actually 4 joins in SQL Server: <strong>INNER</strong>, <strong>OUTER</strong>, <strong>CROSS</strong>, AND <strong>FULL</strong>.  If you come from an Access background, you already know <strong>INNER</strong>, <strong>OUTER</strong>, and <strong>CROSS</strong> joins.</p>\n\n<p><strong>INNER JOIN</strong> is the default join in SQL Server so any SQL statements that has only JOIN in it is, by default, an INNER JOIN.  Use this type of join if you only want to include records where the joined fields from both tables are equal.  Example of an INNER JOIN:</p>\n\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"630\"><tbody><tr><td valign=\"top\" width=\"628\"><a style=\"color:#0000ff;\" href=\"http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=SELECT&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99\"><font size=\"2\" face=\"Courier New\">SELECT</font></a><font size=\"2\" face=\"Courier New\"> *<br /></font><a style=\"color:#0000ff;\" href=\"http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=FROM&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99\"><font size=\"2\" face=\"Courier New\">FROM</font></a><font size=\"2\" face=\"Courier New\"> Products<br /></font><a style=\"color:#0000ff;\" href=\"http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=INNER&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99\"><font size=\"2\" face=\"Courier New\">INNER</font></a><font size=\"2\" face=\"Courier New\"> </font><a style=\"color:#0000ff;\" href=\"http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=JOIN&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99\"><font size=\"2\" face=\"Courier New\">JOIN</font></a><font size=\"2\" face=\"Courier New\"> Suppliers </font><a style=\"color:#0000ff;\" href=\"http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=ON&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99\"><font size=\"2\" face=\"Courier New\">ON</font></a><font size=\"2\" face=\"Courier New\"> Products.SupplierID = Suppliers.SupplierID</font></td></tr></tbody></table>\n\n<p><strong>OUTER JOIN</strong> can be a <strong>LEFT OUTER JOIN</strong> or a <strong>RIGHT OUTER JOIN</strong>.  Use <strong>LEFT OUTER JOIN</strong> if you want to include all records from the table left of the JOIN keyword, and only those records from the table right of the JOIN keyword, where the joined fields are equal  Use <strong>RIGHT OUTER JOIN</strong> if you want to include all records from the table right of the JOIN keyword, and only those records from the table left of the JOIN keyword, where the joined fields are equal.</p>\n\n<p>When mixing INNER and OUTER JOINS, it is best to do the INNER JOINS first before the OUTER JOINS.</p>\n\n<p><strong>CROSS JOIN</strong> is just the cartesian product of all the records on both tables.  It doesn’t have the <strong>ON</strong> operator like the other 3 JOINS.  Typically used in scientific environments but you can also use it to build your test data.  Example of a CROSS JOIN:</p>\n\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"630\"><tbody><tr><td valign=\"top\" width=\"628\"><a style=\"color:#0000ff;\" href=\"http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=SELECT&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99\"><font size=\"2\" face=\"Courier New\">SELECT</font></a><font size=\"2\" face=\"Courier New\"> Customers.CustomerName, Addresses.Address<br /></font><a style=\"color:#0000ff;\" href=\"http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=FROM&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99\"><font size=\"2\" face=\"Courier New\">FROM</font></a><font size=\"2\" face=\"Courier New\"> Customers<br /></font><a style=\"color:#0000ff;\" href=\"http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=CROSS&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99\"><font size=\"2\" face=\"Courier New\">CROSS</font></a><font size=\"2\" face=\"Courier New\"> </font><a style=\"color:#0000ff;\" href=\"http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=JOIN&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99\"><font size=\"2\" face=\"Courier New\">JOIN</font></a><font size=\"2\" face=\"Courier New\"> Addresses</font></td></tr></tbody></table>\n\n<p><strong>FULL JOIN</strong>, also known as <strong>FULL OUTER JOIN</strong>, is like having a LEFT OUTER JOIN and a RIGHT OUTER JOIN in one JOIN.  It is rarely used which might be the reason Access does not have this type of join.</p>\n\n<p><strong>UNION</strong>, unlike the JOINS, appends the result from your second query to your first query, essentially adding more rows instead of adding more columns.  When you use UNION, all queries should have the same number of columns.  The data types of each column in a query should be implicitly compatible with the data type in the same relative column in the other queries.  The heading returned for a UNION query is taken from the first query.  This means you only need to provide meaningful column names on your first query.  Also by default the UNION query returns <strong>DISTINCT</strong> records so if you want it to return duplicate records, then you need to specify <strong>UNION ALL</strong>:</p>\n\n<p><a href=\"http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=SELECT&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99\">SELECT</a> <a href=\"http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=Column&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99\">Column</a>1, <a href=\"http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=Column&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99\">Column</a>2\n<a href=\"http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=FROM&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99\">FROM</a> <a href=\"http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=Table&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99\">Table</a>1</p>\n\n<p><a href=\"http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=UNION&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99\">UNION</a> <a href=\"http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=ALL&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99\">ALL</a></p>\n\n<p><a href=\"http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=SELECT&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99\">SELECT</a> <a href=\"http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=Column&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99\">Column</a>1, <a href=\"http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=Column&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99\">Column</a>2\n<a href=\"http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=FROM&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99\">FROM</a> <a href=\"http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=Table&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99\">Table</a>2</p>\n"
    } ,
  
    {
      "title"    : "SQL Server 2005: Inserting DEFAULT values",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2007/05/05/sql-server-2005-inserting-default-values.html",
      "date"     : "2007-05-05 00:00:00 +0000",
      "content": "<p>You can insert a <strong>DEFAULT</strong> value for a column instead of a <strong>NULL</strong> value if the column has a default value defined in it:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[INSERT](http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=INSERT&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99) [INTO](http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=INTO&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99) [Table](http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=Table&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99)1 ([Column](http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=Column&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99)1, [Column](http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=Column&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99)2)\n[VALUES](http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=VALUES&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99) ([DEFAULT](http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=DEFAULT&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99), N'Some Value')\n</code></pre></div></div>\n"
    } ,
  
    {
      "title"    : "SQL Server 2005: INFORMATION_SCHEMA views",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2007/05/05/sql-server-2005-information_schema-views.html",
      "date"     : "2007-05-05 00:00:00 +0000",
      "content": "<p>You can use the <strong>INFORMATION_SCHEMA</strong> views to get the metadata on any database:</p>\n\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"400\"><tbody><tr><td valign=\"top\" width=\"400\"><a style=\"color:#0000ff;\" href=\"http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=SELECT&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99\"><font size=\"2\" face=\"Courier New\">SELECT</font></a><font size=\"2\" face=\"Courier New\"> * </font><a style=\"color:#0000ff;\" href=\"http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=FROM&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99\"><font size=\"2\" face=\"Courier New\">FROM</font></a><font size=\"2\" face=\"Courier New\"> INFORMATION_SCHEMA.TABLES</font></td></tr></tbody></table>\n\n<p>You can also get information on table columns, table constraints, etc.  You can check what views are available by going to the <strong>System Views</strong> node under the <strong>Views</strong> node of the database from the <strong>Microsoft SQL Server Management Studio</strong>.</p>\n"
    } ,
  
    {
      "title"    : "General: Problem importing Access into Oracle using SQL*Loader",
      "category" : "generalms-access",
      "tags"     : "",
      "url"      : "/tech-blog/2007/05/05/general-problem-importing-access-into-oracle-using-sqlloader.html",
      "date"     : "2007-05-05 00:00:00 +0000",
      "content": "<p>My wife is into <a href=\"http://www.oracle.com/index.html\">Oracle</a> and recently she had this problem of importing data from Access to Oracle using [SQL<em>Loader](http://www.oracle.com/technology/products/database/utilities/htdocs/sql_loader_overview.html).  What she was doing was export the Access data to CSV text file first and then have SQL</em>Loader import this CSV text file.  I helped her debug the problem after she told me it might be Access having problem in exporting the data correctly.  I checked the data in Access and found that it has embedded line feed and carriage return characters in the text and memo fields of the Access table she is importing. </p>\n\n<p>Now, knowing the cause of the problem, my wife tried to make SQL<em>Loader to replace these line feed (<strong>CHR(10)</strong>) and carriage return (<strong>CHR(13)</strong>) characters into space characters.  But still SQL</em>Loader interprets these as record terminator characters first before it can be replaced with space characters. </p>\n\n<p>I suggested to her to solve this problem from Access.  I went to the Access database and wrote an Access query that will replace these line feed and carriage return characters in the text and memo fields with space characters using Access built-in <strong><a href=\"http://office.microsoft.com/en-us/access/HA012288981033.aspx\">Replace()</a></strong> function:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Replace(\\[Text/Memo Field Column\\], Chr(10) &amp; Chr(13), ' ')\n</code></pre></div></div>\n\n<p>Instead of exporting the table, I exported the query to the CSV text file.  SQL*Loader imported this file and it worked.</p>\n"
    } ,
  
    {
      "title"    : "ASP.NET 2.0: Learning the Basics, Part II",
      "category" : "asp-net",
      "tags"     : "",
      "url"      : "/tech-blog/2007/05/05/asp-net-2-0-learning-the-basics-part-ii.html",
      "date"     : "2007-05-05 00:00:00 +0000",
      "content": "<p><strong>Validation Controls</strong></p>\n\n<p>You also have the ability to put some validation onto your controls using some of the available validation controls.</p>\n\n<p><strong>RequiredFieldValidator</strong> will check if the control you assigned to it (<strong>ControlToValidate</strong>) has a value.  Other properties you can set are <strong>Text</strong>, and <strong>ErrorMessage</strong>.  <strong>Text</strong> is displayed when no value is entered for the control while <strong>ErrorMessage</strong> will show up on the <strong>ValidationSummary</strong> control if you have it setup on your webpage.</p>\n\n<p><strong>CompareValidator</strong> will compare the value of the control you assigned to it (<strong>ControlToValidate</strong>) to some value you specify (<strong>ValueToCompare</strong>) given the comparison operator you indicated (<strong>Operator</strong>).  You can also compare it to another control (<strong>ControlToCompare</strong>).  You also need to set the <strong>Type</strong> to indicate the type of the values that you want to compare (e.g. <strong>String</strong>, <strong>Integer</strong>, <strong>Double</strong>, <strong>Date</strong>, or <strong>Currency</strong>).  As with the <strong>RequiredFieldValidator</strong>, you can also set the <strong>Text</strong> and <strong>ErrorMessage</strong> properties.</p>\n\n<p><strong>Layout Toolbar</strong></p>\n\n<p>If you want to align your controls or lay them out in relation to the other controls, you can make use of the <strong>Layout</strong> toolbar.  Go to <strong>View -&gt; Toolbars</strong> and select <strong>Layout</strong>.  You can align lefts, centers, rights, tops, middles, and bottoms, make same width, height, and size, increase/decrease/remove horizontal/vertical spacing, and bring to front/send to back.</p>\n\n<p><strong>AutoPostBack</strong></p>\n\n<p>If you need to postback to the server after selection to the control is changed without having the user to initiate the postback (using a <strong>Button</strong> control), you can set the <strong>AutoPostBack</strong> property to <strong>True</strong>.</p>\n"
    } ,
  
    {
      "title"    : "ASP.NET 2.0: Learning the Basics, Part I",
      "category" : "asp-net",
      "tags"     : "",
      "url"      : "/tech-blog/2007/05/04/asp-net-2-0-learning-the-basics-part-i.html",
      "date"     : "2007-05-04 00:00:00 +0000",
      "content": "<p>I will probably be very brief about this and just go through the important ones, the ones that you need to know if you’re coming from classic ASP just like me.</p>\n\n<p><strong>Creating a Webpage</strong></p>\n\n<p>When you create your ASP.NET web site (<strong>File -&gt; New Website…</strong> and select <strong>ASP.NET Web Site</strong> from the templates), <strong>Default.aspx</strong> file is created and probably the <strong>web.config</strong> file too.  When you start coding your events on the controls you placed on your Default web page, a code-behind file named <strong>Default.aspx.vb</strong> is created.  This is because by default, code is separated from the HTML.  You still have the option though to have your code inside the HTML by removing the check on the <strong>Place code in separate file</strong> checkbox when you create a new web page (<strong>Add New Item…</strong> and select <strong>Web Form</strong> from the templates).</p>\n\n<p><strong>Laying Out Controls</strong></p>\n\n<p>Besides using <strong>Tables</strong> to layout your controls you can use <strong>Absolute Positioning</strong>.  To set absolute positioning to all your controls, go to <strong>Layout -&gt; Position -&gt; Auto-position Options…</strong> and check the <strong>Change positioning to the following for controls added using the Toolbox, paste, or drag and drop:</strong> checkbox and make sure <strong>Absolutely positioned</strong> is selected in the drop down list.  Once set you can move your controls anywhere you like.  You can also set the absolute positioning of each control by selecting the control and going to <strong>Layout -&gt; Position</strong> and selecting <strong>Absolute</strong>.</p>\n\n<p>Another way to layout your controls is to use <strong>Layers</strong> (<strong>Layout -&gt; Insert Layer</strong>).  These are absolute positioned areas where you can place your controls and then basically move the layer to where you want it to be.</p>\n\n<p><strong>Standard Controls</strong></p>\n\n<p>The following are just some of the ASP.NET server controls that you can place on to your web page: <strong>Labels</strong>, <strong>TextBox</strong>, <strong>DropDownList</strong>, <strong>RadioButton</strong>, <strong>CheckBox</strong>, <strong>HyperLink</strong>, and <strong>Buttons</strong>.  One thing to remember about using radio button controls, when you only want one of them selected, is to set their <strong>GroupName</strong> properties to some name.  For the hyperlink controls, you set the <strong>NavigationUrl</strong> property to some URL that you would like to navigate to when this hyperlink is clicked.</p>\n"
    } ,
  
    {
      "title"    : "ASP.NET 2.0: Ramping up my knowledge on Microsoft&#39;s latest version of ASP",
      "category" : "asp-net",
      "tags"     : "",
      "url"      : "/tech-blog/2007/05/02/asp-net-2-0-ramping-up-my-knowledge-on-microsofts-latest-version-of-asp.html",
      "date"     : "2007-05-02 00:00:00 +0000",
      "content": "<p>I had the opportunity to work on classic ASP before and let me tell you, it’s really hard to create a dynamic website especially for data entry-type of web applications.  You need to do a lot of client-side scripting and some tricks on the server side to make your web applications behave like desktop applications.</p>\n\n<p>I remember creating a simple online store management application for a music retailer company years ago using just Notepad mostly, and FrontPage.  Does not have any graphics though since this is a back-office-kind of application and the client only wants a basic data entry interface and reporting.  Database is in Access and the web server is IIS using classic ASP on Windows NT.  I made use of Windows scripting to create my components so I can host them on an MTS environment.  I had lots of Javascript code on the client browser just to make it behave like a desktop application.  It’s way too much work really.</p>\n\n<p>Recently I have been reading up on ASP.NET 2.0, actually viewing the video tutorials that the <a href=\"http://www.asp.net/\"><strong>Microsoft ASP.NET</strong></a> website has put up for the beginners.  It’s really easy now to create a web application and looking back at the online store management application I created, I could have done that in a week’s time or even less.  You can find the tutorials <strong><a href=\"http://www.asp.net/learn/videos/default.aspx?tabid=63#beginners\">here</a></strong>.</p>\n\n<p>Hopefully this blog will help me acquire the knowledge I need to fully use ASP.NET 2.0 in building the latest generation of web applications and at the same time share my newly found knowledge to you beginners out there.  So let’s get ramped up!</p>\n"
    } ,
  
    {
      "title"    : "SQL Server 2005: New data types",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2007/04/28/sql-server-2005-new-data-types.html",
      "date"     : "2007-04-28 00:00:00 +0000",
      "content": "<p>I recently had a job interview and one of the questions in the written exam that they gave me was about the new data types in SQL Server 2005.  I did get most of them.  So here are the new data types in SQL Server 2005, in case you wanted to know:</p>\n\n<p><strong>XML</strong></p>\n\n<p>As the name suggests, this data type can store XML data.</p>\n\n<p><strong>VarChar(MAX), NVarChar(MAX), and VarBinary(MAX)</strong></p>\n\n<p>These are called large value data types.  By specifying the <strong>MAX</strong> keyword in the VarChar, NVarChar, and VarBinary data types, you essentially increased the storage size of these data types to <strong>2^31 - 1 bytes</strong>.</p>\n"
    } ,
  
    {
      "title"    : "General: Programming Test #1",
      "category" : "general",
      "tags"     : "",
      "url"      : "/tech-blog/2007/04/28/general-programming-test-1.html",
      "date"     : "2007-04-28 00:00:00 +0000",
      "content": "<p>There was this test in one of the job interviews I had recently that I did not ace well.  It was a written programming test.  I have not been given a written programming test for a while so I was caught off-guard.  If this was a hands-on, I would have aced it.  Anyways, here is some more details about the problem.</p>\n\n<p>Given an input of 1-7 indicating the day of the week (Sunday being a 1, Monday a 2, and so on…) for the first day of the month, print a calendar for that month.  I fired my Visual Studio 2005 and started coding in VB.  After 3 iterations of the code (I like to make my code small and easy to understand which is why I usually do more than 1 iterations of the code), I came up with this solution:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Public Sub PrintMonthCalendar(ByVal DayOfWeekFirstDayOfMonth As Integer, _\n                                ByVal NumberOfDaysInMonth As Integer)\n    Dim i As Integer\n    Dim intDay As Integer = 1\n\n    Console.WriteLine(\"Su Mo Tu We Th Fr Sa \")\n    For i = 1 To NumberOfDaysInMonth + (DayOfWeekFirstDayOfMonth - 1)\n        If i &lt; DayOfWeekFirstDayOfMonth Then\n            Console.Write(\"   \")\n        Else\n            If i Mod 7 = 0 Then\n                Console.WriteLine(\"{0,2} \", intDay)\n            Else\n                Console.Write(\"{0,2} \", intDay)\n            End If\n            intDay += 1\n        End If\n    Next\n\n    Console.ReadLine()\nEnd Sub\n</code></pre></div></div>\n\n<p>Here are some sample outputs of the program:</p>\n\n<p><img src=\"/tech-blog/assets/images/clip_image0021.jpg\" alt=\"\" /></p>\n\n"
    } ,
  
    {
      "title"    : "VB 2005: Don&#39;t use the Timer control on your Windows Service project",
      "category" : "vb-net",
      "tags"     : "",
      "url"      : "/tech-blog/2007/04/21/vb-2005-dont-use-the-timer-control-on-your-windows-service-project.html",
      "date"     : "2007-04-21 00:00:00 +0000",
      "content": "<p>Just wasted my time trying to debug why the <strong>Timer control</strong> (from the <strong>Toolbox</strong> under <strong>Components</strong>) on my Windows Service project was not working at all.  Then I tried explicitly creating a <strong>Timer object</strong> from the <strong>System.Timers.Timer</strong> class and now it is working.</p>\n\n<p>One thing I noticed though is that when I used the Timer control, the event that is fired when the interval has elapsed is the <strong>Tick</strong> event while when I used the Timer object from the System.Timers.Timer class, the event fired is the <strong>Elapsed</strong> event.  Found out that they are different because the Timer control is created from the <strong>System.Windows.Forms.Timer</strong> class.</p>\n"
    } ,
  
    {
      "title"    : "VB 2005: Quick introduction to the world of .NET",
      "category" : "vb-net",
      "tags"     : "",
      "url"      : "/tech-blog/2007/03/28/vb-2005-quick-introduction-to-the-world-of-net.html",
      "date"     : "2007-03-28 00:00:00 +0000",
      "content": "<p>Before <strong>.NET</strong> came, <a href=\"http://www.microsoft.com/com/default.mspx\"><strong>COM (Component Object Model)</strong></a> was the norm.  You build COM objects to make your code reusable and so that you can fit them in a 3-tier or n-tier architecture.  This architecture was called or marketed by Microsoft as <strong>DNA (Distributed interNet Architecture)</strong>.  It is just a way to architect or build distributed business applications using (but not necessarily) Microsoft technologies.  One of its technologies besides COM, is <strong>MTS</strong> (<strong>Microsoft Transaction Server</strong>).  MTS is a run-time environment that provides objects with not only transaction services but also concurrency, resource pooling, security, context management, and other system-level services.  It provides location transparency as well.  Then there is this <strong>COM+</strong> which is just COM and MTS combined.</p>\n\n<p>Now that we have .NET, it’s time to learn this new technology from Microsoft which I think will stay with us for some time.  .NET is the next generation platform that developers can take advantage of in building not only distributed applications but the more traditional applications as well, more easily and intuitively.  Which is why .NET is appropriately called <strong><a href=\"http://msdn2.microsoft.com/en-us/netframework/default.aspx\">.NET Framework</a></strong>.</p>\n\n<p>Here I am going to blog about .NET 2.0.  The latest version now is 3.0 but it is still relatively new and I think the knowledge you will get from understanding the .NET Framework even if it’s not the latest version will be useful for a long time.</p>\n\n<p>Basically the .NET Framework contains the following major components: <strong>CLR (Common Language Runtime)</strong>, <strong>.NET Framework Base Classes</strong>, <strong>Windows Forms</strong> and <strong>ASP.NET</strong>. </p>\n\n<p><strong>CLR</strong> is where component loading, memory management, reference tracking for objects and garbage collection happens.  It includes a common system of datatypes and coupled with standard interface convention, provides cross-language inheritance.  It also provides easy deployment of your .NET applications. </p>\n\n<p>One thing to note about applications in .NET is that they are self-describing because <strong>metadata</strong>, the information that describes the applications, is stored together with the application itself.  This is key to the easy deployment in .NET.</p>\n\n<p><strong>.NET Framework Base Classes</strong> provides developers with a rich set of functionality (in classes and interfaces) that they can use to help them develop applications with lesser code.  These classes and interfaces are organized into namespaces.  Examples of popular namespaces would be <strong>System.Collections</strong>, <strong>System.Data</strong>, <strong>System.Diagnostics</strong>, <strong>System.IO</strong>, <strong>System.Math</strong>, <strong>System.Reflection</strong>, and <strong>System.Security</strong>.</p>\n\n<p><strong>Windows Forms</strong> is the user interface services provided by .NET Framework in building windows-based applications.  <strong>Smart client</strong> applications with rich user interface are now more practical under .NET, even for a large number of users.</p>\n\n<p><strong>ASP.NET</strong> is the part of .NET that provides services for developing web-based applications.  <strong>Web Forms</strong> and <strong>Web Services</strong> are part of ASP.NET.</p>\n\n<p><strong>Web Forms</strong> is used to develop browser-based user interfaces and much like in a standard Visual Basic form, code is separated from the layout and properties information of the user interface elements.  Before in classic ASP, code is all over the HTML page.</p>\n\n<p><strong>Web Services</strong> allows programs to talk to each other directly over the web using the <strong><a href=\"http://www.w3.org/TR/soap12-part1/\">SOAP (Simple Object Access Protocol)</a></strong> standard.  With web services, software functionality are exposed over the web as resources for building your distributed applications.</p>\n\n<p>It is worth noting that ASP.NET 2.0 has been significantly improved from previous versions with more built-in functionality making it possible to write far less code.  Also ASP.NET components for user authentication are already prebuilt.</p>\n\n<p><a href=\"http://www.w3.org/XML/\"><strong>XML</strong></a> is also at the center stage in the .NET Framework as most of the underlying technologies are dependent on XML.  It is used as a glue to tie pieces together internally and externally.</p>\n\n<p>Some of the important changes in .NET 2.0 are the following: <strong>partial classes</strong> which allows coding for a class into multiple code modules; <strong>generics</strong> which allows generic collections to handle specific data types, declared when collection is created; <strong>ClickOnce</strong> which is a new technology for deploying across the web, with automatic updating; <strong>My class</strong> which provides easy access to most commonly used classes in .NET; <strong>nullable types</strong>; <strong>operator overloading</strong>; <strong>IsNot</strong> and <strong>Using</strong> keyword.</p>\n"
    } ,
  
    {
      "title"    : "VB 2005: A journey towards mastering Visual Basic 2005",
      "category" : "vb-net",
      "tags"     : "",
      "url"      : "/tech-blog/2007/03/27/vb-2005-a-journey-towards-mastering-visual-basic-2005.html",
      "date"     : "2007-03-27 00:00:00 +0000",
      "content": "<p>My last project involved using <a href=\"http://msdn2.microsoft.com/en-us/vbasic/default.aspx\">Visual Basic 2005</a>.  This is the latest version of VB.NET.  I have used Visual Basic before starting with version 4.0.  In fact I got certified a long time ago, <strong>November 2001</strong> to be exact, as a <a href=\"http://www.microsoft.com/learning/mcp/mcp/default.mspx\"><strong>Microsoft Certified Professional (MCP)</strong></a> by passing the exam <a href=\"http://www.microsoft.com/learning/exams/70-176.mspx\">Designing and Implementing Desktop Applications with Microsoft Visual Basic 6.0</a>.  Now that I am using VB 2005, it’s time for me to master this technology and hopefully get back on track with my certification.  I recently bought a book titled <strong><a href=\"http://www.wrox.com/WileyCDA/WroxTitle/productCd-0764575368.html\">Professional VB 2005</a></strong> by various authors and I will be reading this book to help me with my journey and of course this blog will serve as my notes pad.  So here we go!</p>\n"
    } ,
  
    {
      "title"    : "SQL Server 2005: Aggregate Functions",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2007/03/27/sql-server-2005-aggregate-functions.html",
      "date"     : "2007-03-27 00:00:00 +0000",
      "content": "<p>Aggregate functions (e.g. <strong>AVG</strong>, <strong>MIN</strong>, <strong>MAX</strong>, <strong>COUNT</strong>, etc.) can be in a <strong>SELECT</strong> statement without the <strong>GROUP BY</strong> clause.  Without the <strong>GROUP BY</strong> clause in the <strong>SELECT</strong> statement will apply the aggregate function to the entire result set.</p>\n\n<p>Also all aggregate functions, except for <strong>COUNT(*)</strong>, ignore <strong>NULL</strong>s.  So you need to be sure that when you use an aggregate function on a column, you want any <strong>NULL</strong> values in your column to be excluded in the aggregation, meaning they will not be included in the function.</p>\n"
    } ,
  
    {
      "title"    : "Access 2003: A journey towards mastering Access 2003",
      "category" : "ms-access",
      "tags"     : "",
      "url"      : "/tech-blog/2007/03/27/access-2003-a-journey-towards-mastering-access-2003.html",
      "date"     : "2007-03-27 00:00:00 +0000",
      "content": "<p><a href=\"http://office.microsoft.com/en-us/access/FX100487571033.aspx\">Access</a> is the first database that I worked on, not SQL Server.  I started with version 97.  Now with version 2007 available, you ask why master 2003 when there is already 2007.  For one it’s still relatively new and companies especially small to mid-size ones where I cater to most, don’t jump hastily to new technologies so there should be plenty of pre-2007 Access applications around to work on.  My purpose in this journey is to eventually get certified with Access 2003 so wish me luck.</p>\n"
    } ,
  
    {
      "title"    : "SQL Server 2005: Transaction log",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2007/03/26/sql-server-2005-transaction-log.html",
      "date"     : "2007-03-26 00:00:00 +0000",
      "content": "<p>There are actually 2 files that make up a database in SQL Server, one containing the data itself, and the other one containing the transaction logs.  All data inserts, updates, and deletes happen in transaction log file first and stay there until one point in time when they propagate to the actual database itself.  How long will they be in the transaction log file is something I don’t know but I’m guessing it might be in milliseconds so you don’t notice that your data is being held in the transaction log file first.</p>\n"
    } ,
  
    {
      "title"    : "SQL Server 2005: Bit, Image, VarBinary, and unsigned numeric data types",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2007/03/26/sql-server-2005-bit-image-varbinary-and-unsigned-numeric-data-types.html",
      "date"     : "2007-03-26 00:00:00 +0000",
      "content": "<p><strong>Bit</strong></p>\n\n<p>If you use bit, say to represent a boolean value, you are actually not allocating 1 bit but <strong>1 byte</strong>.  The first bit will give you 1 byte and the next 7 bits will use that byte so if you declared 8 columns in your table of data type <strong>bit</strong>, they will all share the same byte.  If these are all nullable, or just even one, another byte is allocated.  So if you don’t need your bit to be nullable, then make sure it’s not.</p>\n\n<p><strong>Image and **VarBinary</strong>**</p>\n\n<p><strong>Image</strong> data type is used for backwards compatibility in SQL Server 2005 and <strong>varbinary(max)</strong> is the replacement for it, which is essentially a LOB (large text or binary object) field that can take up to <strong>2^31 bytes</strong> of data.  If you don’t want this a big of a size, you can specify a length for a <strong>varbinary</strong> data type up to a maximum of <strong>8,000 bytes</strong> only.</p>\n\n<p><strong>Unsigned numeric data types</strong></p>\n\n<p>SQL Server 2005 (or SQL Server for that matter) does not have a concept of them.</p>\n"
    } ,
  
    {
      "title"    : "SLQ Server 2005: Operators you can use in the WHERE clause",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2007/03/26/slq-server-2005-operators-you-can-use-in-the-where-clause.html",
      "date"     : "2007-03-26 00:00:00 +0000",
      "content": "<p>Besides the standard comparison operators (<strong>=</strong>, <strong>&gt;</strong>, <strong>&lt;</strong>, etc.), the boolean operators (<strong>AND</strong>, <strong>OR</strong>, <strong>NOT</strong>) and the <strong>BETWEEN</strong> operator, you can also use <strong>LIKE</strong>, <strong>IN</strong>, <strong>ALL</strong>, <strong>ANY</strong>, <strong>SOME</strong>, and <strong>EXISTS</strong>.</p>\n\n<p><strong>LIKE</strong></p>\n\n<p>Use this when you want to match the value of a column to a string with wildcard characters specified after this keyword.  You use <strong>%</strong> to mean 1 or more characters and <strong>_</strong> to mean just 1 character.  Enclosing characters in <strong>[]</strong> indicates that any of the characters inside is OK.  Specifying <strong>^</strong> before a character excludes that character.</p>\n\n<p><strong>IN</strong></p>\n\n<p>Use this if you want to match the value of a column to a list of values specified after this keyword.  You can also use this with subqueries.</p>\n\n<p><strong>ALL, ANY, SOME</strong></p>\n\n<p>Used in conjunction with a comparison operator (e.g. =, &gt;, &lt;).  Use this if you want to compare the value of a column to all, any or some of the values in a subquery.</p>\n\n<p>Below is an example usage (the default is ALL):</p>\n\n<table>\n  <tbody>\n    <tr>\n      <td>&lt;column</td>\n      <td>expression&gt; (comparison operator) &lt;ANY</td>\n      <td>SOME&gt; (subquery)</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><strong>EXISTS</strong></p>\n\n<p>Use this to check if a subquery returns at least 1 row.</p>\n"
    } ,
  
    {
      "title"    : "SQL Server 2005: model and msdb system databases",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2007/03/25/sql-server-2005-model-and-msdb-system-databases.html",
      "date"     : "2007-03-25 00:00:00 +0000",
      "content": "<p><strong>model</strong> and <strong>msdb</strong> are among the 2 of the 4 system databases in SQL Server 2005, the other 2 being the <strong>master</strong> and <strong>tempdb</strong>. </p>\n\n<p><strong>model</strong> is a template for creating new databases so this is where you might want to add additional objects (e.g. tables, stored procedures, user defined types, etc.) that you want your new databases to have when you create them. </p>\n\n<p>In my last project I have a user defined type <strong>dbo.boolean</strong> from the <strong>bit</strong> data type and I thought this would be a good candidate to add to the model database.  I went and add this to the model database and created a new <strong>Test</strong> database and lo and behold, I have the <strong>dbo.boolean</strong> user defined data type there.</p>\n\n<p>If you are scheduling jobs on SQL Server 2005, <strong>msdb</strong> database is the place where all the information on them are stored.</p>\n"
    } ,
  
    {
      "title"    : "SQL Server 2005: A journey towards learning SQL Server 2005 better",
      "category" : "sql-server",
      "tags"     : "",
      "url"      : "/tech-blog/2007/03/24/sql-server-2005-a-journey-towards-learning-sql-server-2005-better.html",
      "date"     : "2007-03-24 00:00:00 +0000",
      "content": "<p>I have worked on Access database for a long time now and recently worked on <a href=\"http://www.microsoft.com/sql/editions/express/default.mspx\">SQL Server 2005 Express.</a>  I did some SQL Server stored procedures and triggers before that but it has been a while.  So now I told myself why not learn more about it and post my new found knowledge on a blog site and so this came about.  I just got a book by <a href=\"http://www.wrox.com/WileyCDA/WroxTitle/productCd-0764584332,descCd-authorInfo.html\">Robert Vieira</a> titled <strong><a href=\"http://www.wrox.com/WileyCDA/WroxTitle/productCd-0764584332.html\">Beginning SQL Server 2005 Programming</a></strong> to help me with my journey and hopefully using this blog will inspire me to continue reading and learning <a href=\"http://www.microsoft.com/sql/default.mspx\">SQL Server 2005</a>.  So let’s begin!</p>\n"
    } 
  
]